<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>aiohttp - Tag - 我的全新 Hugo 网站</title>
        <link>http://example.org/tags/aiohttp/</link>
        <description>aiohttp - Tag - 我的全新 Hugo 网站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 27 Nov 2021 16:58:17 &#43;0000</lastBuildDate><atom:link href="http://example.org/tags/aiohttp/" rel="self" type="application/rss+xml" /><item>
    <title>aiohttp使用回调函数边请求边处理</title>
    <link>http://example.org/aiohttp%E4%BD%BF%E7%94%A8%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E8%BE%B9%E8%AF%B7%E6%B1%82%E8%BE%B9%E5%A4%84%E7%90%86/</link>
    <pubDate>Sat, 27 Nov 2021 16:58:17 &#43;0000</pubDate>
    <author>xxxx</author>
    <guid>http://example.org/aiohttp%E4%BD%BF%E7%94%A8%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E8%BE%B9%E8%AF%B7%E6%B1%82%E8%BE%B9%E5%A4%84%E7%90%86/</guid>
    <description><![CDATA[我们平时使用Requests的时候，一般是这样写代码的： 1 2 3 4 5 6 7 import requests def parse(html): print(&#39;对 html 进行处理&#39;) html = requests.get(&#39;url&#39;) parse(html) 这是一种]]></description>
</item>
<item>
    <title>aiohttp学习笔记</title>
    <link>http://example.org/aiohttp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <pubDate>Sat, 27 Nov 2021 09:37:35 &#43;0000</pubDate>
    <author>xxxx</author>
    <guid>http://example.org/aiohttp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
    <description><![CDATA[aiohttp中文文档 https://www.cntofu.com/book/127/aiohttp文档/ClientUsage.md]]></description>
</item>
<item>
    <title>轻松理解 Python中 的 async-await 概念</title>
    <link>http://example.org/%E8%BD%BB%E6%9D%BE%E7%90%86%E8%A7%A3-python%E4%B8%AD-%E7%9A%84-async-await-%E6%A6%82%E5%BF%B5/</link>
    <pubDate>Sat, 27 Nov 2021 07:21:36 &#43;0000</pubDate>
    <author>xxxx</author>
    <guid>http://example.org/%E8%BD%BB%E6%9D%BE%E7%90%86%E8%A7%A3-python%E4%B8%AD-%E7%9A%84-async-await-%E6%A6%82%E5%BF%B5/</guid>
    <description><![CDATA[前言 写这篇文章是受 xinghun85 的这篇博客 的启发, 但是人家后面写的东西跳跃太快, 有点没看懂, 自己在此做一个补充. 我希望能用一个最平易近人的例子, 把 Python 协程]]></description>
</item>
<item>
    <title>python3异步编程async/await原理解释的比较详细的文章</title>
    <link>http://example.org/await%E5%8E%9F%E7%90%86%E8%A7%A3%E9%87%8A%E7%9A%84%E6%AF%94%E8%BE%83%E8%AF%A6%E7%BB%86%E7%9A%84%E6%96%87%E7%AB%A0/</link>
    <pubDate>Sat, 27 Nov 2021 07:06:09 &#43;0000</pubDate>
    <author>xxxx</author>
    <guid>http://example.org/await%E5%8E%9F%E7%90%86%E8%A7%A3%E9%87%8A%E7%9A%84%E6%AF%94%E8%BE%83%E8%AF%A6%E7%BB%86%E7%9A%84%E6%96%87%E7%AB%A0/</guid>
    <description><![CDATA[身为Python核心开发组的成员，我对于这门语言的各种细节充满好奇。尽管我很清楚自己不可能对这门语言做到全知全能，但哪怕是为了能够解决各种i]]></description>
</item>
<item>
    <title>requests、aiohttp、httpx对比</title>
    <link>http://example.org/requestsaiohttphttpx%E5%AF%B9%E6%AF%94/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>xxxx</author>
    <guid>http://example.org/requestsaiohttphttpx%E5%AF%B9%E6%AF%94/</guid>
    <description><![CDATA[来源：https://learnku.com/articles/54989 在 Python 众多的 HTTP 客户端中，最有名的莫过于 requests、aiohtt]]></description>
</item>
<item>
    <title>异步并发aiohttp</title>
    <link>http://example.org/%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91aiohttp/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>xxxx</author>
    <guid>http://example.org/%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91aiohttp/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import time from aiohttp import ClientSession,TCPConnector from pprint import pprint as print import asyncio url = &#39;https://api.panhvhg.xyz/api/v3/channels/968/connect&#39; url=&#39;https://api.panhvhg.xyz/api/v3/channels/0/connect&#39; headers = { &#39;Host&#39;: &#39;api.panhvhg.xyz&#39;, &#39;api-version&#39;: &#39;v3.0&#39;,]]></description>
</item>
</channel>
</rss>
