<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>vscode - Tag - 我的全新 Hugo 网站</title>
        <link>http://example.org/tags/vscode/</link>
        <description>vscode - Tag - 我的全新 Hugo 网站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 13 Jul 2023 11:08:59 &#43;0000</lastBuildDate><atom:link href="http://example.org/tags/vscode/" rel="self" type="application/rss+xml" /><item>
    <title>如何将 VSCode 变成绿色版本</title>
    <link>http://example.org/%E5%A6%82%E4%BD%95%E5%B0%86-vscode-%E5%8F%98%E6%88%90%E7%BB%BF%E8%89%B2%E7%89%88%E6%9C%AC/</link>
    <pubDate>Thu, 13 Jul 2023 11:08:59 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/%E5%A6%82%E4%BD%95%E5%B0%86-vscode-%E5%8F%98%E6%88%90%E7%BB%BF%E8%89%B2%E7%89%88%E6%9C%AC/</guid>
    <description><![CDATA[介绍 指导性文章 : Portable Mode in Visual Studio Code
为什么要设置成绿色版 移植方便，到了新的电脑环境，直接拷贝文件夹就完成 VSCode 环境搭建
管理方便，原来的插件，配置文件不在一个地方，而且路径藏的过深 如图，绿色版本的结构很清晰，除了应用程序之外就是一个存放 扩展 (extensions) 和 用户数据 (user-data) 的 数据文件夹 (code-portable-data). 当我使用新的一台电脑的时候，只需要将 VSCode 文件夹 拷贝到新电脑就装有 相同配置，相同扩展的一模一样的 VSCode 编辑器，无需额外下载和配置. 如何将 VSCode 编程绿色版本 第一种情况：从零开始配置 VSCode 下载压缩包 下载地址 : Download Visual Studio Code - Mac, Linux, Windows 最后一个支持Win7的版本：VSCode-win32-x64-1.70.3.zip 下载完毕，解压到任意文件夹 创建数据文件夹 (放置插件以及用户设置) Mac 在 VSCode 同一层级的目录下创建文件夹 code-portable-data Windows 在解压后的文件夹内 创建文件夹 data 绿色版制作完成 第二种情况：在 VSCode 已经有配置的前提下变成绿色版 下载压缩包 下载地址 : Download Visual Studio Code - Mac, Linux, Windows 最后一个支持Win7的版本：VSCode-win32-x64-1.]]></description>
</item>
<item>
    <title>VSCODE插件Remote-SSH配置</title>
    <link>http://example.org/vscode%E6%8F%92%E4%BB%B6remote-ssh%E9%85%8D%E7%BD%AE/</link>
    <pubDate>Wed, 02 Mar 2022 22:06:09 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/vscode%E6%8F%92%E4%BB%B6remote-ssh%E9%85%8D%E7%BD%AE/</guid>
    <description><![CDATA[●Preface 服务器很多时候都是部署在 Linux 远程机器上的，我们通常是 SSH 连过去然后用 vim 或者 emacs 去修改源文件。
这种方式对我来说很麻烦，因为我已经习惯了全宇宙最好用的 C++IDE Visual Studio，离开 IDE 写代码实在太痛苦了。
所以我只能借助 samba+sourceinsight 的组合来勉强度日。这个组合其实是比较好的，只不过配置特别麻烦，实在是不想折腾。
这时，微软开发了一个 VSCode 的插件 Remote-SSH，可以说是目前比较完美的解决了在 windows 下开发 linux 程序的问题。
Remote-SSH 配置简单，界面可视化，你可以把他看做是带 IDE 的 Putty。当然你也可以只把他当做一个远程 ssh 的连接工具来代替 putty，xshell。
●安装 Remote-SSH （1）VSCode 左侧边栏上找到 Extensions 按钮，点击打开扩展插件面板。
（2）在扩展搜索栏中搜索到 Remote-SSH 这个插件，然后点击下载安装这个插件。
（3）此插件安装完毕后，侧边栏会出现一个名为 Remote-SSH 新的图标按钮。
（4）点击 VSCode 左侧边栏上的 Remote-SSH 图标按钮，打开 Remote-SSH 面板。
（5）在 CONNECTIONS 条目右边找到配置按钮图标 [Configure]，点击配置。
（6）此时会弹出一个下拉框，选择 config 配置文件保存路径，比如 C:\Users\Administrator\.ssh\config
（7）点击编辑这个 config 文件，编辑代码如下示例：
1 2 3 4 5 Host njdaby #远程主机 1 别名 alias，注意主机别名不能包含 @符，否则会连接失败 HostName 117.]]></description>
</item>
<item>
    <title>vscode-hexo-utils使用教程</title>
    <link>http://example.org/vscode-hexo-utils%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
    <pubDate>Sat, 21 Aug 2021 07:27:21 &#43;0800</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/vscode-hexo-utils%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
    <description><![CDATA[前言 为了解决Typecho需要自建服务器，容易数据丢失的问题，从Typecho转移到Hexo，但是Hexo需要解决只能本地写博客，而且还要安装一堆依赖的问题，又从网上学到了Hexo+Github Acitons的组合，这样只要有浏览器就能登录Github写博客。
最稳妥的的还是使用原生的Hexo环境（node.js），这样可以本地先预览博客最终效果，再发布，这样可以减少commit次数。
只是本地写博客如果采用Hexo最原始的方式，即：先cd到Hexo目录-&gt;再hexo new post-&gt;再到_posts目录中找到新建的md文件进行编辑，就显得非常繁琐不友好了。
经过一番折腾，终于找到了vscode-hexo-utils这款神器。
介绍 vscode-hexo-utils是一款VSCODE插件，可以实现在VSCODE中方便的写Hexo博客（新建、编辑、管理MD文件），省去了先cd到Hexo目录-&gt;再hexo new post-&gt;再到_posts中找到新建的md文件进行编辑的步骤，而且支持粘贴图片后自动保存到相应目录并插入进MD中，简直美滋滋。 同时还支持按Draft、Post、Categories、Tags管理文章，具体效果如图： 安装 首先得安装VSCODE&hellip;此步略。 然后在VSCODE的插件市场（Ctrl+Shift+X调出）中搜索vscode-hexo-utils，找到并安装它。
设置 安装完毕后，进入VSCODE的设置(Ctrl+,)，在新界面顶部搜索框输入@ext:fantasy.vscode-hexo-utils将插件的设置项筛选出来。这里介绍几个重要的设置。
Hexo: Generate Time Format 这里设置新建文章、插入图片时自动生成的时间格式，留空的话，生成的时间形如：2021-08-21T07:27:21+08:00，可以自定义，具体变量参考，举个栗子：
1、YYYY-MM-DD HH:mm:ss 生成的时间形如:2021-08-23 14:18:57 2、YYYY-MM-DD HH:mm 生成的时间形如:2021-08-23 14:18
Hexo: Hexo Project Root 这里设置Hexo博客所在目录，建议留空，并设置为不同步。
Hexo › Markdown: Resource 这个配置项会开启代码中的 markdown 插件，用于支持一些 hexo 自己的语法。
Hexo: Upload 设置是否自动将图片上传到图床，支持路过图床和腾讯oss，下面的两个设置对应路过图床和腾讯OSS，点击在setting.json中编辑，将自己平台的账号密码填入：
1 2 3 4 &#34;hexo.uploadImgchr&#34;: { &#34;username&#34;: &#34;用户名&#34;, &#34;password&#34;: &#34;密码&#34; } Hexo: Upload Type 选择默认的图床服务
使用 首先使用VSCODE打开Hexo项目目录， 然后在VSCODE左侧找到vscode-hexo-utils插件图标。
新建文章 鼠标放在POST栏目的Bar上，就能看到新增和刷新按钮，点击新增即可按照事先在Hexo设置的模板新建文章。 在文章中插入图片 1、使用图床 不知道是不是我设置的问题，路过图床总时提示失败，后来发现是路过图床更换了域名，已联系插件作者修复。 2、不使用图床 插件会自动将图片保存至MD文件所在目录的同名子目录中。]]></description>
</item>
<item>
    <title>VSCODE写HEXO博客时自动插入FrontMatter的实现</title>
    <link>http://example.org/vscode%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E6%97%B6%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5frontmatter%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
    <pubDate>Fri, 20 Aug 2021 12:39:57 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/vscode%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E6%97%B6%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5frontmatter%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
    <description><![CDATA[第一步 首先点VSCODE的文件-&gt;首选项-&gt;用户片段，在弹出来的对话框中选择markdown.json。输入以下内容：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { &#34;Hexo Front Matter&#34;: { &#34;prefix&#34;: &#34;---&#34;, # 触发代码块的输入字符 &#34;body&#34;: [ &#34;---&#34;, &#34;title: ${TM_FILENAME_BASE}&#34;, # 自动将文件名作为标题 &#34;date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}&#34;, # 自动输入当前时间 &#34;update: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}&#34;, # 自动输入当前时间 &#34;tags:&#34;, &#34; - &#34;, &#34; - &#34;, &#34;categories:&#34;, &#34; - &#34;, &#34; - &#34;,	&#34;description: &#34;, &#34;cover: &#34;, &#34;keywords: &#34;, &#34;---\r&#34; ], &#34;description&#34;: &#34;Hexo Front Matter&#34; } } 第二步 然后在VSCODE的设置中添加配置：]]></description>
</item>
<item>
    <title>Docker搭建VSCODE-Server</title>
    <link>http://example.org/docker%E6%90%AD%E5%BB%BAvscode-server/</link>
    <pubDate>Sat, 14 Aug 2021 15:42:45 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/docker%E6%90%AD%E5%BB%BAvscode-server/</guid>
    <description><![CDATA[宿主机环境装备 先在宿主机建立用户数据目录
1 mkdir /userdatas/mycode 给上面目录授权（否则将会出现docker挂载该目录时拒绝访问的错误）
1 chmod 777 /userdatas/mycode 启动vscode-server容器 1 2 3 4 5 docker run -it -d \ --restart=always \ --name code-server -p 6688:8080 \ -v &#34;/userdatas/mycode:/home/coder&#34; \ codercom/code-server:latest 登录密码的修改 进入宿主机/userdatas/mycode/.config/code-server目录，其中config.yaml中password后面的值就是密码。
修改密码也是在此文件。 修改密码后，需要重启容器docker restart code-server才能生效。
访问xxx.xx:6688即可享用vscode WebIDE
Python开发环境打磨 安装pip管理包 vscode服务端（即docker容器）是基于debian系统，未安装pip，需要进入容器中进行安装，进入容器的方法有两种。
一、WebIDE界面进入 登录WebIDE后，在WebIDE的终端中进行。
1 2 sudo apt update sudo apt install python3-pip 二、在宿主机中进入 宿主机运行以下命令进入容器
1 docker exec -it code-server /bin/bash 然后执行 一、WebIDE界面安装 步骤中的代码。
配置远程调试运行环境 在WebIDE左侧的插件商店中安装python插件 重启容器docker restart code-server 然后再次进入WebIDE,进入左侧的运行和调试，点击创建 launch.]]></description>
</item>
</channel>
</rss>
