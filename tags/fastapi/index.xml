<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>FastAPI - Tag - 我的全新 Hugo 网站</title>
        <link>http://example.org/tags/fastapi/</link>
        <description>FastAPI - Tag - 我的全新 Hugo 网站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 20 Oct 2021 23:05:55 &#43;0000</lastBuildDate><atom:link href="http://example.org/tags/fastapi/" rel="self" type="application/rss+xml" /><item>
    <title>FastAPI直接使用请求与响应</title>
    <link>http://example.org/fastapi%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/</link>
    <pubDate>Wed, 20 Oct 2021 23:05:55 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/fastapi%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/</guid>
    <description><![CDATA[FastAPI是一个非常好用的web框架,今天我要介绍的是它直接使用请求和响应的方法.
有些时候,我们不能确定客户端的参数,这时候,我们可以直接使用请求和响应,可以获取到更底层的一些信息,已经不确定的参数. https://www.starlette.io/responses/
1. 请求 众所周知,fastapi站在巨人的肩膀上,其中,请求和和响应部分来自于starlette.这里给出官网对请求解释的部分.
当我们使用fastapi时,可以声明一个类型为starlette.request.Request类型的参数,他将接受原始的请求对象:
1 2 3 4 5 6 7 8 9 10 11 12 13 import uvicorn from fastapi import FastAPI from starlette.requests import Request app=FastAPI() @app.get(&#34;/&#34;) def func(request:Request): print(request.headers) return request.headers if __name__ == &#39;__main__&#39;: uvicorn.run(app=&#34;main:app&#34;, host=&#34;127.0.0.1&#34;, port=8080, reload=True, debug=True) 请求对象支持的操作:
request.cookies:cookie request.query_params:查询参数 request.url:url对象 request.headers:请求头 async def request.form():获取表单信息,注意这是一个异步函数. async def request.json():获取json信息,这两个只能用一个,这也是一个异步函数. async def request.body():直接获取body数据,未经过转换 2.响应 可以从官网对响应的解释上看到全部内容.
有很多种响应,包括:
Response(content:str,statuc_code:int=200,headers:dict=None,media_type):基本的响应
RedirectResponse(url,status_code,headers):重定向到url
FileResponse(path,status_code,media_type):文件响应,path为本地文件路径,需要安装aiofiles库才可以使用.
StreamingResponse(data,media_type):流响应,支持一个可迭代对象(包括文件和BytesIO,StringIO等类文件对象)
直接返回即可,关于StreamingResponse还有一篇文章,讲述了如何利用它传输文件.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import uvicorn from fastapi import FastAPI from starlette.]]></description>
</item>
<item>
    <title>FastAPI容器使用说明翻译</title>
    <link>http://example.org/fastapi%E5%AE%B9%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E7%BF%BB%E8%AF%91/</link>
    <pubDate>Wed, 20 Oct 2021 22:44:44 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/fastapi%E5%AE%B9%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E7%BF%BB%E8%AF%91/</guid>
    <description><![CDATA[官方说明：https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/README.md
环境变量 有多个环境变量可供设置，如果不指定，则会使用默认值。
MODULE_NAME——指定要运行的主文件文件名（Python中也叫模块名） Python &ldquo;module&rdquo; (文件) Gunicorn, this module would contain the actual application in a variable.
默认为:
app.main——如果主文件路径为 /app/app/main.py 或者 main——如果主文件路径为 /app/main.py 打个比方, 如果主文件路径为 /app/custom_app/custom_main.py, 那么你需要设置成这样:
1 docker run -d -p 80:80 -e MODULE_NAME=&#34;custom_app.custom_main&#34; myimage VARIABLE_NAME——指定主文件中FastAPI()对象的变量名称 默认是:
app 举个例子, 如果你的主文件是这样的:
1 2 3 4 5 6 7 from fastapi import FastAPI api = FastAPI() @api.get(&#34;/&#34;) def read_root(): return {&#34;message&#34;: &#34;Hello world!&#34;} 在上面的例子中,FastAPI()对象的变量名为api ，那么你需要这样设置:
1 docker run -d -p 80:80 -e VARIABLE_NAME=&#34;api&#34; myimage APP_MODULE——这个环境变量可以直接实现上面两个环境变量的作用 1 docker run -d -p 80:80 -e APP_MODULE=&#34;custom_app.]]></description>
</item>
</channel>
</rss>
