<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>我的全新 Hugo 网站</title>
        <link>http://example.org/</link>
        <description>这是我的全新 Hugo 网站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 26 Jul 2023 21:32:10 &#43;0800</lastBuildDate>
            <atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Hexo博客迁移Hugo方法</title>
    <link>http://example.org/hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BBhugo%E6%96%B9%E6%B3%95/</link>
    <pubDate>Wed, 26 Jul 2023 21:32:10 &#43;0800</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BBhugo%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[区别点 Markdown文件的frontmatter不同，需要转换； 可能插入超链接、图片链接不同，需要转换； frontmatter转换 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 import yaml import os import glob import re def rename_key(dictionary, old_key, new_key): if old_key in dictionary: dictionary[new_key] = dictionary[old_key] del dictionary[old_key] def delete_key(dictionary, old_key): if old_key in dictionary: del dictionary[old_key] def check_and_increase_header_level(markdown_text): &#34;&#34;&#34; Check if there are level-1 headers in the markdown text and increase the level of the headers if true.]]></description>
</item>
<item>
    <title>sonic博客试用</title>
    <link>http://example.org/sonic%E5%8D%9A%E5%AE%A2%E8%AF%95%E7%94%A8/</link>
    <pubDate>Tue, 25 Jul 2023 22:44:00 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/sonic%E5%8D%9A%E5%AE%A2%E8%AF%95%E7%94%A8/</guid>
    <description><![CDATA[为了搭建知识库网站，最近都在找一个合适的框架，需要满足以下几个要求：
方便移植：以文件或者sqlite数据库作为数据储存引擎； 多平台适用； 支持全文检索，且检索时命中关键词部分前后的文章内容会展示在搜索结果中； 支持在线增删改查，而不是像hexo、hugo等静态渲染的博客系统； 资源占用低。 最后被俺找到两个`go语言`(低资源占用的代名词)开发的博客系统：[`sonic`](https://github.com/go-sonic/sonic)和[`journey`](https://github.com/kabukky/journey) journey 超级简陋，自定义项目较少。
sonic sonic是中国人开发的，更易上手。功能较多，且因为作者是中国人，使用遇到问题交流起来无障碍。]]></description>
</item>
<item>
    <title>VPN智能分流</title>
    <link>http://example.org/vpn%E6%99%BA%E8%83%BD%E5%88%86%E6%B5%81/</link>
    <pubDate>Fri, 21 Jul 2023 16:40:01 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/vpn%E6%99%BA%E8%83%BD%E5%88%86%E6%B5%81/</guid>
    <description><![CDATA[https://github.com/2dust/v2rayN/issues/1366]]></description>
</item>
<item>
    <title>如何将 VSCode 变成绿色版本</title>
    <link>http://example.org/%E5%A6%82%E4%BD%95%E5%B0%86-vscode-%E5%8F%98%E6%88%90%E7%BB%BF%E8%89%B2%E7%89%88%E6%9C%AC/</link>
    <pubDate>Thu, 13 Jul 2023 11:08:59 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/%E5%A6%82%E4%BD%95%E5%B0%86-vscode-%E5%8F%98%E6%88%90%E7%BB%BF%E8%89%B2%E7%89%88%E6%9C%AC/</guid>
    <description><![CDATA[介绍 指导性文章 : Portable Mode in Visual Studio Code
为什么要设置成绿色版 移植方便，到了新的电脑环境，直接拷贝文件夹就完成 VSCode 环境搭建
管理方便，原来的插件，配置文件不在一个地方，而且路径藏的过深 如图，绿色版本的结构很清晰，除了应用程序之外就是一个存放 扩展 (extensions) 和 用户数据 (user-data) 的 数据文件夹 (code-portable-data). 当我使用新的一台电脑的时候，只需要将 VSCode 文件夹 拷贝到新电脑就装有 相同配置，相同扩展的一模一样的 VSCode 编辑器，无需额外下载和配置. 如何将 VSCode 编程绿色版本 第一种情况：从零开始配置 VSCode 下载压缩包 下载地址 : Download Visual Studio Code - Mac, Linux, Windows 最后一个支持Win7的版本：VSCode-win32-x64-1.70.3.zip 下载完毕，解压到任意文件夹 创建数据文件夹 (放置插件以及用户设置) Mac 在 VSCode 同一层级的目录下创建文件夹 code-portable-data Windows 在解压后的文件夹内 创建文件夹 data 绿色版制作完成 第二种情况：在 VSCode 已经有配置的前提下变成绿色版 下载压缩包 下载地址 : Download Visual Studio Code - Mac, Linux, Windows 最后一个支持Win7的版本：VSCode-win32-x64-1.]]></description>
</item>
<item>
    <title>Postgres快速导入csv文件</title>
    <link>http://example.org/postgres%E5%BF%AB%E9%80%9F%E5%AF%BC%E5%85%A5csv%E6%96%87%E4%BB%B6/</link>
    <pubDate>Fri, 07 Jul 2023 12:54:33 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/postgres%E5%BF%AB%E9%80%9F%E5%AF%BC%E5%85%A5csv%E6%96%87%E4%BB%B6/</guid>
    <description><![CDATA[psql的copy命令导入 第一步 连接数据库： psql -U &lt;user_name&gt; -d &lt;database_name&gt; -h 远程数据库IP地址 -p 端口， psql位于安装目录的bin目录下，建议将路径X:\XXX\PostgreSQL\15\bin\添加到环境变量中 如果想免密码，则需要设置环境变量 PGPASSWORD
第二步 使用\copy命令导入，该命令必须在服务端运行，不能通过pg_admin、dbeaver等数据库管理客户端的sql命令执行。 \copy bbb FROM 'D:\NavicatExports\aaa.csv' DELIMITER ',' NULL '' CSV HEADER; 其中bbb是事先创建好的表的名称，下同
常见错误 报错: ERROR: character with byte sequence 0xba 0x22 in encoding &quot;GBK&quot; has no equivalent in encoding &quot;UTF8&quot; 原因: csv文件内容为utf-8 no bom编码，其中有中文。 解决方案: \encoding UTF8
其他 启用计时功能——可查看导入等操作的耗时 \timing
切换数据库 \c 目标数据库名
导入时的目标表名不能是中文，csv文件名可以是中文 通过实践，目标表名不能是中文，但文件名可以是中文。 \copy bbb FROM 'C:\我是中文.csv' WITH (FORMAT CSV,DELIMITER ',' , HEADER TRUE);]]></description>
</item>
<item>
    <title>修改Docker默认数据保存位置</title>
    <link>http://example.org/%E4%BF%AE%E6%94%B9docker%E9%BB%98%E8%AE%A4%E6%95%B0%E6%8D%AE%E4%BF%9D%E5%AD%98%E4%BD%8D%E7%BD%AE/</link>
    <pubDate>Thu, 06 Jul 2023 19:11:48 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/%E4%BF%AE%E6%94%B9docker%E9%BB%98%E8%AE%A4%E6%95%B0%E6%8D%AE%E4%BF%9D%E5%AD%98%E4%BD%8D%E7%BD%AE/</guid>
    <description><![CDATA[第一步 停止wsl
1 wsl --shutdown 第二步 移动默认位置（C:\Users\xxxxx\AppData\Local\Docker\wsl\data）下的ext4.vhdx到新位置，这里我们移动到D:\Docker\data目录下。
第三步 regedit打开注册表，定位到HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Lxss 将其下的DistributionName为docker-desktop-data所在项对应的BasePath修改为新位置目录\\?\D:\Docker\data
完成 重新打开Docker Desktop
限制 wsl2 内存使用 这个解决方案来自 github，简单来说就是创建一个 %UserProfile%\.wslconfig 文件来限制 wsl 使用的内存总量。比如说我在 Windows 中使用的用户是 tinychen，那么我就在 C:\Users\tinychen 中创建了一个.wslconfig 文件，在里面加入以下内容来限制 wsl2 的内存总大小：
1 2 3 4 5 [wsl2] memory=1GB swap=8GB swapFile=%USERPROFILE%\AppData\Local\Temp\swap.vhdx localhostForwarding=true 复制以下内容粘贴到cmd中一键解决，然后重新启动Docker Desktop
1 2 3 4 5 6 wsl --shutdown echo [wsl2] &gt; %UserProfile%\.wslconfig echo memory=1GB &gt;&gt; %UserProfile%\.wslconfig echo swap=8GB &gt;&gt; %UserProfile%\.wslconfig echo swapFile=^%USERPROFILE^%\AppData\Local\Temp\swap.vhdx &gt;&gt; %UserProfile%\.wslconfig echo localhostForwarding=true &gt;&gt; %UserProfile%\.wslconfig 注意修改完成之后需要重启 wsl2 才能生效。更多详细的配置可以查看官方文档。]]></description>
</item>
<item>
    <title>关联分析</title>
    <link>http://example.org/%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90/</link>
    <pubDate>Sun, 02 Jul 2023 20:30:44 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[树形关系分析 根据id,pid还原树形关系的完整树，找出每个树的每个节点的rootid，以便导入neo4j数据库。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 import duckdb from joblib import Parallel, delayed def find_related_ids(current_id,phone,cursor): path_ids = [current_id] id_phone_dict = {current_id:phone} def find_son_ids(current_id): # 父 ID 等于上面 ID 的 phone, 即儿子的 ID cursor.]]></description>
</item>
<item>
    <title>DuckDB学习笔记</title>
    <link>http://example.org/duckdb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <pubDate>Mon, 29 May 2023 10:55:39 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/duckdb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
    <description><![CDATA[概述 貌似duckdb能自动识别文件的encoding。
实现emeditor的列拆分功能 关键函数 regexp_matches，查询字符串是否包含正则表达式字符 regexp_split_to_array，按给定的正则表达式字符进行拆分 unnest，将数组转为行 contains，判断是否包含特定字符（不支持正则表达式） 数据样本 phone introduce name 111 New York|Chicago Jean Vasquez 222 HK;Tokoy|USA Nakayama Yuito 333 Chinese Shanghai Jean Vasquez 以单个分隔符拆分 duckdb代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 --对包含;的列进行拆分，然后转为行。注意：UNION ALL 前后的列顺序必须一致 SELECT --与 UNION ALL 关键字 后面的列顺序必须一致 phone, UNNEST(regexp_split_to_array(introduce,	&#39;;&#39;)) introduce, name FROM read_csv(&#39;testfile.csv&#39;, delim=&#39;,&#39;, header=True, columns={&#39;phone&#39;:&#39;BIGINT&#39;,&#39;introduce&#39;:&#39;VARCHAR&#39;,&#39;name&#39;:&#39;VARCHAR&#39;}) WHERE contains(introduce,	&#39;;&#39;) UNION ALL -- 与不包含;的行进行合并，实际中要去掉 SELECT --与 UNION ALL 关键字 前面的列顺序必须一致 * FROM read_csv(&#39;testfile.]]></description>
</item>
<item>
    <title>NaiveProxy搭建过程记录</title>
    <link>http://example.org/naiveproxy%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</link>
    <pubDate>Tue, 02 May 2023 10:22:19 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/naiveproxy%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</guid>
    <description><![CDATA[原Naiveproxy的搭建脚本有个弊端，域名证书需要手动申请，比较蛋疼，这次找到的一键搭建脚本可以自动申请证书（暂时未找到到期续期的脚本，可以重置服务器，重新运行脚本来实现变相续期）。 脚本地址如下：https://github.com/crazypeace/naive 修改用户名密码：修改/etc/caddy/Caddyfile
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { order forward_proxy before file_server } :443, np.mydomain.com { tls e16d9cb045d7@gmail.com forward_proxy { basic_auth 用户名 密码 hide_ip hide_via probe_resistance } file_server { root /var/www/html } } 然后重启：service caddy restart]]></description>
</item>
<item>
    <title>Go语言将Map数据写入EXCEL文件</title>
    <link>http://example.org/go%E8%AF%AD%E8%A8%80%E5%B0%86map%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5excel%E6%96%87%E4%BB%B6/</link>
    <pubDate>Sun, 23 Apr 2023 23:21:42 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/go%E8%AF%AD%E8%A8%80%E5%B0%86map%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5excel%E6%96%87%E4%BB%B6/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 package main import ( &#34;fmt&#34; &#34;strconv&#34; &#34;time&#34; &#34;github.]]></description>
</item>
</channel>
</rss>
