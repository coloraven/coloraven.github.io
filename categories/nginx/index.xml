<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Nginx - Category - 我的全新 Hugo 网站</title>
        <link>http://example.org/categories/nginx/</link>
        <description>Nginx - Category - 我的全新 Hugo 网站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 14 Aug 2021 15:42:45 &#43;0000</lastBuildDate><atom:link href="http://example.org/categories/nginx/" rel="self" type="application/rss+xml" /><item>
    <title>Nginx负载均衡</title>
    <link>http://example.org/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link>
    <pubDate>Sat, 14 Aug 2021 15:42:45 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid>
    <description><![CDATA[一、Nginx负载均衡 1、示意图 2、好处 均摊请求，让服务端整体吞吐率提高，满足不断增长的业务需求。
相比于单点服务，当其中一台服务器挂掉后，还可以继续让剩下的服务器继续服务，提高了容灾性。
二、负载均衡的分类 1、GSLB（全局负载均衡） 一般是以国家或省为单位进行全局负载的。
示意图如下：
2、SLB 示意图： 三、基于LVS的中间件架构 LVS（Linux Virtual Server ）Linux 虚拟服务器
1、四层负载均衡 即在OSI七层模型中的传输层。因为第四层支持TCP/IP协议。四层负载均衡只需要对客户端的请求进行TCP/IP协议的包转发就能实现负载均衡。
优势 非常快，只需要最底层进行应用处理，不需要进行一些复杂的逻辑，值需要负责包的转发即可。
示意图 2、七层负载均衡 因为是在应用层，因此可以完成很多应用方面的协议请求，比如HTTP协议的负载均衡可以实现HTTP信息的改写，头信息的改写，安全应用规则的控制，转发，rewrite等等方面的规则控制。因此在七层负载均衡里面可以做的事情就更多一些，Nginx就是一个典型的七层负载均衡的SLB。
SLB（Server Load Balancing）服务器负载均衡。
示意图 Nginx负载均衡实现原理 通过 proxy_pass 转发到后端的服务器上，只是不是转发到一台，而是一组虚拟的服务池（即 upstream server）。在upstream 组里面实现了对于多台服务器请求的不断轮询。
当用户的请求过来后，就会通过 upstream_module 这个模块将用户的请求分发到不同的服务上，从而实现负载均衡。
故 proxy_pass 和 upstream 是两个核心的配置。
示意图 配置语法 ngx_http_upstream_module官方文档 ： http://nginx.org/en/docs/http/ngx_http_upstream_module.html
1 2 3 Syntax: upstream name { ... } Default: — Context: http 示例： a、用一台服务器来实现负载均衡，配置如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 upstream chrdai { server 192.]]></description>
</item>
<item>
    <title>Nginx从入门到实践---万字详解</title>
    <link>http://example.org/nginx%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5---%E4%B8%87%E5%AD%97%E8%AF%A6%E8%A7%A3/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>五彩斑斓的黑</author>
    <guid>http://example.org/nginx%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5---%E4%B8%87%E5%AD%97%E8%AF%A6%E8%A7%A3/</guid>
    <description><![CDATA[最近越来越频繁地遇到需要配置反向代理的场景，在自己搭建博客的时候，也不可避免要用到 Nginx，所以这段时间集中学习了一下 Nginx，同时做了一些笔记，希望也可以帮助到大家～ 😜
这篇文章会在 CentOS 环境下安装和使用 Nginx，如果对 CentOS 基本操作还不太清楚的，可以先看看 &lt;半小时搞会 CentOS 入门必备基础知识&gt; 一文先做了解。
相信作为开发者，大家都知道 Nginx 的重要，废话不多说，一起来学习吧。
CentOS 版本： 7.6
Nginx 版本： 1.16.1
1. Nginx 介绍 传统的 Web 服务器，每个客户端连接作为一个单独的进程或线程处理，需在切换任务时将 CPU 切换到新的任务并创建一个新的运行时上下文，消耗额外的内存和 CPU 时间，当并发请求增加时，服务器响应变慢，从而对性能产生负面影响。
Nginx 是开源、高性能、高可靠的 Web 和反向代理服务器，而且支持热部署，几乎可以做到 7 * 24 小时不间断运行，即使运行几个月也不需要重新启动，还能在不间断服务的情况下对软件版本进行热更新。性能是 Nginx 最重要的考量，其占用内存少、并发能力强、能支持高达 5w 个并发连接数，最重要的是，Nginx 是免费的并可以商业化，配置使用也比较简单。
Nginx 的最重要的几个使用场景：
静态资源服务，通过本地文件系统提供服务； 反向代理服务，延伸出包括缓存、负载均衡等； API 服务，OpenResty ； 对于前端来说 Node.js 不陌生了，Nginx 和 Node.js 的很多理念类似，HTTP 服务器、事件驱动、异步非阻塞等，且 Nginx 的大部分功能使用 Node.js 也可以实现，但 Nginx 和 Node.js 并不冲突，都有自己擅长的领域。Nginx 擅长于底层服务器端资源的处理（静态资源处理转发、反向代理，负载均衡等），Node.js 更擅长上层具体业务逻辑的处理，两者可以完美组合，共同助力前端开发。]]></description>
</item>
</channel>
</rss>
