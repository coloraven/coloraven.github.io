<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2021/8/test/"/>
      <url>/2021/8/test/</url>
      
        <content type="html"><![CDATA[<p>this is a test</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hugo漂亮主题</title>
      <link href="/2021/8/Hugo%E6%BC%82%E4%BA%AE%E4%B8%BB%E9%A2%98/"/>
      <url>/2021/8/Hugo%E6%BC%82%E4%BA%AE%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>主题名：stack<br>演示站：<a href="https://theme-stack.jimmycai.com/p/test-chinese/">https://theme-stack.jimmycai.com/p/test-chinese/</a><br>第一次看到：<a href="https://zhixuan666.github.io/">https://zhixuan666.github.io/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode-hexo-utils使用教程</title>
      <link href="/2021/8/vscode-hexo-utils%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2021/8/vscode-hexo-utils%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了解决<code>Typecho</code>需要自建服务器，容易数据丢失的问题，从<code>Typecho</code>转移到<code>Hexo</code>，但是<code>Hexo</code>需要解决只能本地写博客，而且还要安装一堆依赖的问题，又从网上学到了<code>Hexo</code>+<code>Github Acitons</code>的组合，这样只要有浏览器就能登录<code>Github</code>写博客。</p><blockquote><p>最稳妥的的还是使用原生的<code>Hexo</code>环境（<code>node.js</code>），这样可以本地先预览博客最终效果，再发布，这样可以减少<code>commit</code>次数。</p></blockquote><p>只是本地写博客如果采用<code>Hexo</code>最原始的方式，即：先<code>cd</code>到Hexo目录-&gt;再<code>hexo new post</code>-&gt;再到<code>_posts</code>目录中找到新建的<code>md文件</code>进行编辑，就显得非常繁琐不友好了。</p><p><strong>经过一番折腾，终于找到了<code>vscode-hexo-utils</code>这款神器。</strong></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>vscode-hexo-utils</code>是一款VSCODE插件，可以实现在<code>VSCODE</code>中方便的写<code>Hexo</code>博客（新建、编辑、管理MD文件），省去了先<code>cd</code>到<code>Hexo</code>目录-&gt;再<code>hexo new post</code>-&gt;再到<code>_posts</code>中找到新建的<code>md文件</code>进行编辑的步骤，而且支持粘贴图片后自动保存到相应目录并插入进MD中，简直美滋滋。<br>同时还支持按<code>Draft</code>、<code>Post</code>、<code>Categories</code>、<code>Tags</code>管理文章，具体效果如图：<br><img src="2021-08-23T095907.png" alt="2021-08-23T095907" style="zoom:20%" /></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先得安装<code>VSCODE</code>…此步略。<br>然后在<code>VSCODE</code>的插件市场（<code>Ctrl+Shift+X</code>调出）中搜索<code>vscode-hexo-utils</code>，找到并安装它。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>安装完毕后，进入VSCODE的设置(<code>Ctrl+,</code>)，在新界面顶部搜索框输入<code>@ext:fantasy.vscode-hexo-utils</code>将插件的设置项筛选出来。这里介绍几个重要的设置。</p><h3 id="Hexo-Generate-Time-Format"><a href="#Hexo-Generate-Time-Format" class="headerlink" title="Hexo: Generate Time Format"></a>Hexo: Generate Time Format</h3><p>这里设置新建文章、插入图片时自动生成的时间格式，留空的话，生成的时间形如：<code>2021-08-21T07:27:21+08:00</code>，可以自定义，具体变量<a href="https://day.js.org/docs/en/parse/string-format">参考</a>，举个栗子：</p><blockquote><p>1、YYYY-MM-DD HH:mm:ss<br>生成的时间形如:<code>2021-08-23 14:18:57</code><br>2、YYYY-MM-DD HH:mm<br>生成的时间形如:<code>2021-08-23 14:18</code></p></blockquote><h3 id="Hexo-Hexo-Project-Root"><a href="#Hexo-Hexo-Project-Root" class="headerlink" title="Hexo: Hexo Project Root"></a>Hexo: Hexo Project Root</h3><p>这里设置Hexo博客所在目录，建议留空，并设置为不同步。</p><h3 id="Hexo-›-Markdown-Resource"><a href="#Hexo-›-Markdown-Resource" class="headerlink" title="Hexo › Markdown: Resource"></a>Hexo › Markdown: Resource</h3><p>这个配置项会开启代码中的 <code>markdown</code> 插件，用于支持一些 <code>hexo</code> 自己的语法。</p><h3 id="Hexo-Upload"><a href="#Hexo-Upload" class="headerlink" title="Hexo: Upload"></a>Hexo: Upload</h3><p>设置是否自动将图片上传到图床，支持路过图床和腾讯oss，下面的两个设置对应路过图床和腾讯OSS，点击<code>在setting.json中编辑</code>，将自己平台的账号密码填入：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;hexo.uploadImgchr&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;用户名&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;密码&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hexo-Upload-Type"><a href="#Hexo-Upload-Type" class="headerlink" title="Hexo: Upload Type"></a>Hexo: Upload Type</h3><p>选择默认的图床服务</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先使用<code>VSCODE</code>打开<code>Hexo</code>项目目录，<br>然后在<code>VSCODE</code>左侧找到<code>vscode-hexo-utils</code>插件图标。<img src="2021-08-23T102122.png" style="zoom:50%" /></p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>鼠标放在<code>POST</code>栏目的Bar上，就能看到新增和刷新按钮，点击新增即可按照事先在<code>Hexo</code>设置的模板新建文章。<br><img src="2021-08-23T102540.png" alt="2021-08-23T102540" style="zoom:50%" /></p><h3 id="在文章中插入图片"><a href="#在文章中插入图片" class="headerlink" title="在文章中插入图片"></a>在文章中插入图片</h3><ul><li><p>1、使用图床<br>不知道是不是我设置的问题，路过图床总时提示失败，后来发现是路过图床更换了域名，已联系插件作者修复。</p><img src="https://z3.ax1x.com/2021/08/23/h9sVtU.png" alt="" style="zoom:10%" /></li><li><p>2、不使用图床<br>插件会自动将图片保存至MD文件所在目录的同名子目录中。</p></li></ul><h3 id="使用插件提供的代码片段"><a href="#使用插件提供的代码片段" class="headerlink" title="使用插件提供的代码片段"></a>使用插件提供的代码片段</h3><p>插件默认附带了一些用来写<code>Hexo</code>博客的代码片段，可选择使用。<br>插件默认的代码片段如下，该文件的保存在<code>C:\Users\Administrator\.vscode\extensions\fantasy.vscode-hexo-utils-0.1.26\snippets</code>，可以自行添加代码片段，但是修改的东西不会同步到vscode云端，如需同步，可参考我的另一篇文章<a href="/2021/8/VSCODE%E5%86%99HEXO%E5%8D%9A%E5%AE%A2%E6%97%B6%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5FrontMatter%E7%9A%84%E5%AE%9E%E7%8E%B0/" title="[VSCODE写HEXO博客时自动插入FrontMatter的实现]">[VSCODE写HEXO博客时自动插入FrontMatter的实现]</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;hexo.post_path&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span>: [<span class="string">&quot;hexo.post_path&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: [<span class="string">&quot;&#123;% post_path $&#123;1:filename&#125; %&#125;&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Include links to other posts.&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hexo.post_link&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span>: [<span class="string">&quot;hexo.post_link&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: [<span class="string">&quot;&#123;% post_link $&#123;1:filename&#125; $&#123;2:[title] [escape]&#125; %&#125;&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Include links to other posts.&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hexo.asset_path&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span>: [<span class="string">&quot;hexo.asset_path&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: [<span class="string">&quot;&#123;% asset_path $&#123;1:filename&#125; %&#125;&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Include post assets.&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hexo.asset_img&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span>: [<span class="string">&quot;hexo.asset_img&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: [<span class="string">&quot;&#123;% asset_img $&#123;1:filename&#125; $&#123;2:[title]&#125; %&#125;&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Include post assets.&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hexo.asset_link&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span>: [<span class="string">&quot;hexo.asset_link&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: [<span class="string">&quot;&#123;% post_link $&#123;1:filename&#125; $&#123;2:[title] [escape]&#125; %&#125;&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Include post assets.&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hexo.raw&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span>: [<span class="string">&quot;hexo.raw&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: [<span class="string">&quot;&#123;% raw %&#125;&quot;</span>, <span class="string">&quot;$&#123;1:content&#125;&quot;</span>, <span class="string">&quot;&#123;% endraw %&#125;&quot;</span>, <span class="string">&quot;$0&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;If certain content is causing processing issues in your posts, wrap it with the raw tag to avoid rendering errors.&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hexo.more&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;hexo.more&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: [<span class="string">&quot;&lt;!-- more --&gt;&quot;</span>, <span class="string">&quot;$0&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Use text placed before the &lt;!-- more --&gt; tag as an excerpt for the post. excerpt: value in the front-matter, if specified, will take precedent.&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> VSCODE </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCODE写HEXO博客时自动插入FrontMatter的实现</title>
      <link href="/2021/8/VSCODE%E5%86%99HEXO%E5%8D%9A%E5%AE%A2%E6%97%B6%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5FrontMatter%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/8/VSCODE%E5%86%99HEXO%E5%8D%9A%E5%AE%A2%E6%97%B6%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5FrontMatter%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>首先点<code>VSCODE</code>的<code>文件</code>-&gt;<code>首选项</code>-&gt;<code>用户片段</code>，在弹出来的对话框中选择<code>markdown.json</code>。输入以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;Hexo Front Matter&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;---&quot;</span>, # 触发代码块的输入字符</span><br><span class="line"><span class="attr">&quot;body&quot;</span>: [</span><br><span class="line"><span class="string">&quot;---&quot;</span>,</span><br><span class="line"><span class="string">&quot;title: $&#123;TM_FILENAME_BASE&#125;&quot;</span>, # 自动将文件名作为标题</span><br><span class="line"><span class="string">&quot;date: $&#123;CURRENT_YEAR&#125;-$&#123;CURRENT_MONTH&#125;-$&#123;CURRENT_DATE&#125; $&#123;CURRENT_HOUR&#125;:$&#123;CURRENT_MINUTE&#125;:$&#123;CURRENT_SECOND&#125;&quot;</span>, # 自动输入当前时间</span><br><span class="line"><span class="string">&quot;update: $&#123;CURRENT_YEAR&#125;-$&#123;CURRENT_MONTH&#125;-$&#123;CURRENT_DATE&#125; $&#123;CURRENT_HOUR&#125;:$&#123;CURRENT_MINUTE&#125;:$&#123;CURRENT_SECOND&#125;&quot;</span>, # 自动输入当前时间</span><br><span class="line"><span class="string">&quot;tags:&quot;</span>,</span><br><span class="line"><span class="string">&quot;  - &quot;</span>,</span><br><span class="line"><span class="string">&quot;  - &quot;</span>,</span><br><span class="line"><span class="string">&quot;categories:&quot;</span>,</span><br><span class="line"><span class="string">&quot;  - &quot;</span>,</span><br><span class="line"><span class="string">&quot;  - &quot;</span>,</span><br><span class="line"><span class="string">&quot;description: &quot;</span>,</span><br><span class="line"><span class="string">&quot;cover: &quot;</span>,</span><br><span class="line"><span class="string">&quot;keywords: &quot;</span>,</span><br><span class="line"><span class="string">&quot;---\r&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Hexo Front Matter&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>然后在VSCODE的设置中添加配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;[markdown]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;editor.renderWhitespace&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;editor.quickSuggestions&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;other&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;comments&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;strings&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;editor.acceptSuggestionOnEnter&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>经过以上两个步骤后，用VSCODE写hexo博客，只需要在hexo的source_post目录下新建markdown文件，并输入文件名，此时在编辑器中输入<code>---</code>，VSCODE将弹出自动补全的窗口，选中回车即可输入以下内容,省去了人工输入大量Front Matter信息。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">VSCODE写HEXO博客时自动插入FrontMatter的实现</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-08-20 12:47:39</span></span><br><span class="line"><span class="attr">update:</span> <span class="number">2021-08-20 12:47:39</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> </span><br><span class="line">  <span class="bullet">-</span> </span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> </span><br><span class="line">  <span class="bullet">-</span> </span><br><span class="line"><span class="attr">description:</span> </span><br><span class="line"><span class="attr">cover:</span> </span><br><span class="line"><span class="attr">keywords:</span> </span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="Over"><a href="#Over" class="headerlink" title="Over"></a>Over</h2>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCODE </tag>
            
            <tag> Hexo </tag>
            
            <tag> FrontMatter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背景图地址备份</title>
      <link href="/2021/8/%E8%83%8C%E6%99%AF%E5%9B%BE%E5%9C%B0%E5%9D%80%E5%A4%87%E4%BB%BD/"/>
      <url>/2021/8/%E8%83%8C%E6%99%AF%E5%9B%BE%E5%9C%B0%E5%9D%80%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/08/19/dHy6JwF14jOqCoY.png" alt="Crystal Clear.jpg"><br><img src="https://i.loli.net/2021/08/19/iseIpWy3gEwlarx.png" alt="Mauve.jpg"><br><img src="https://i.loli.net/2021/08/19/EMhsYfPk1CIj2H5.png" alt="The Blue Lagoon.jpg"><br><img src="https://i.loli.net/2021/08/19/RIVGmxpDMiHhEyS.png" alt="Celestial.jpg"><br><img src="https://i.loli.net/2021/08/19/HvgOmKncQGaVSed.png" alt="Crimson Tide.jpg"><br><img src="https://i.loli.net/2021/08/19/WApsUiSxOdTmKvl.png" alt="Under the Lake.jpg"><br><img src="https://i.loli.net/2021/08/19/d4KjpbEyJHZBGQR.png" alt="Orca.jpg"><br><img src="https://i.loli.net/2021/08/19/AQCfe8sqcHLtkUj.png" alt="Pacific Dream.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 折腾记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB数据库的备份和恢复</title>
      <link href="/2021/8/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/"/>
      <url>/2021/8/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.51cto.com/jack88/2145833"><strong>https://blog.51cto.com/jack88/2145833</strong></a></p><p>mongodb数据备份和恢复主要分为二种：</p><blockquote><p>一种是针对库的mongodump和mongorestore，</p><p>一种是针对库中表的mongoexport和mongoimport。</p></blockquote><h2 id="一、-mongodump备份数据库"><a href="#一、-mongodump备份数据库" class="headerlink" title="一、 mongodump备份数据库"></a>一、 mongodump备份数据库</h2><h3 id="1-常用命令格式"><a href="#1-常用命令格式" class="headerlink" title="1.常用命令格式"></a>1.常用命令格式</h3><p>​                mongodump -h IP –port 端口 -u 用户名 -p 密码 -d 数据库 -c 表 -o 文件存放路径              </p><p>参数说明：-h 指明数据库宿主机的IP–port 指明数据库的端口 -u 指明数据库的用户名-p 指明数据库的密码-d 指明数据库的名字-c 指明collection的名字-o 指明到要导出的文件名-q 指明导出数据的过滤条件</p><h3 id="2-导出所有数据库"><a href="#2-导出所有数据库" class="headerlink" title="2.导出所有数据库"></a>2.导出所有数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump -o /data/mongobak/            </span><br></pre></td></tr></table></figure><h3 id="3-导出指定数据库"><a href="#3-导出指定数据库" class="headerlink" title="3.导出指定数据库"></a>3.导出指定数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump -d SERVERLOG -o /data/mongobak/SERVERLOG.bak/       </span><br></pre></td></tr></table></figure><p>​       </p><h2 id="二、-mongorestore恢复数据库"><a href="#二、-mongorestore恢复数据库" class="headerlink" title="二、 mongorestore恢复数据库"></a>二、 mongorestore恢复数据库</h2><p>自行补充：</p><p>恢复其他数据库中的表到已有数据库中，已有数据库已经有表，且数据库有账号密码验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -u 用户名 -p 密码 --authenticationDatabase admin -d leanote --dir /leanote_install_data/</span><br></pre></td></tr></table></figure><h3 id="1-常用命令格式-1"><a href="#1-常用命令格式-1" class="headerlink" title="1.常用命令格式"></a>1.常用命令格式</h3><p>​                mongorestore -h IP –port 端口 -u 用户名 -p 密码 -d 数据库 –drop 文件存在路径              </p><p>​                –drop：先删除所有的记录，然后恢复.              </p><h3 id="2-恢复所有数据库到mongodb中"><a href="#2-恢复所有数据库到mongodb中" class="headerlink" title="2.恢复所有数据库到mongodb中"></a>2.恢复所有数据库到mongodb中</h3><p>​                mongorestore /data/mongobak/ #所有库的备份路径              </p><h3 id="3-恢复指定的数据库"><a href="#3-恢复指定的数据库" class="headerlink" title="3. 恢复指定的数据库"></a>3. 恢复指定的数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -d SERVERLOG /data/mongobak/SERVERLOG.bak/SERVERLOG/ <span class="comment"># SERVERLOG这个数据库的备份路径 mongorestore -d SERVERLOG_new /data/mongobak/SERVERLOG.bak/SERVERLOG/ #将SERVERLOG备份数据还原到SERVERLOG_new数据库中    </span></span><br></pre></td></tr></table></figure><p>​          </p><h2 id="三、-mongoexport导出（表或者表中部分字段）"><a href="#三、-mongoexport导出（表或者表中部分字段）" class="headerlink" title="三、 mongoexport导出（表或者表中部分字段）"></a>三、 mongoexport导出（表或者表中部分字段）</h2><h3 id="1-常用命令格式-2"><a href="#1-常用命令格式-2" class="headerlink" title="1. 常用命令格式"></a>1. 常用命令格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoexport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 -f 字段 -q 条件导出 --csv -o 文件名    </span><br></pre></td></tr></table></figure><p>​          </p><p>参数重点说明：-f 导出指定字段，以逗号分割，-f uid,name,age导出uid,name,age这三个字段-q 可以根据查询条件导出，-q ‘{ “uid” : “100” }’ 导出uid为100的数据–csv 表示导出的文件格式为csv的。这个比较有用，因为大部分的关系型数据库都是支持csv，在这里有共同点</p><h3 id="2-导出整张表"><a href="#2-导出整张表" class="headerlink" title="2. 导出整张表"></a>2. 导出整张表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongoexport -d SERVERLOG -c users -o /data/mongobak/SERVERLOG.bak/</span><br><span class="line"><span class="comment"># users.dat connected to: 127.0.0.1 exported 4 records </span></span><br></pre></td></tr></table></figure><h3 id="3-导出表中部分字段"><a href="#3-导出表中部分字段" class="headerlink" title="3. 导出表中部分字段"></a>3. 导出表中部分字段</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongoexport -d SERVERLOG -c users --csv -f uid,name,age -o /data/mongobak/SERVERLOG.bak/</span><br><span class="line"><span class="comment"># users.csv connected to: 127.0.0.1 exported 4 records</span></span><br></pre></td></tr></table></figure><h3 id="4-根据条件导出数据"><a href="#4-根据条件导出数据" class="headerlink" title="4. 根据条件导出数据"></a>4. 根据条件导出数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongoexport -d SERVERLOG -c users -q <span class="string">&#x27;&#123;uid:&#123;$gt:1&#125;&#125;&#x27;</span> -o /data/mongobak/SERVERLOG.bak/</span><br><span class="line"><span class="comment"># users.json connected to: 127.0.0.1 exported 3 records</span></span><br></pre></td></tr></table></figure><h2 id="四、-mongoimport导入（表或者表中部分字段）"><a href="#四、-mongoimport导入（表或者表中部分字段）" class="headerlink" title="四、 mongoimport导入（表或者表中部分字段）"></a>四、 mongoimport导入（表或者表中部分字段）</h2><h3 id="1-常用命令格式-3"><a href="#1-常用命令格式-3" class="headerlink" title="1. 常用命令格式"></a>1. 常用命令格式</h3><p>恢复整表导出的非csv文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --upsert --drop 文件名</span><br></pre></td></tr></table></figure><blockquote><p>–upsert:插入或者更新现有数据</p></blockquote><p>恢复部分字段的导出文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --upsertFields 字段 --drop 文件名</span><br></pre></td></tr></table></figure><blockquote><p>–upsertFields:更新部分的查询字段，必须为索引,以逗号分隔.</p></blockquote><p>恢复导出的csv文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --<span class="built_in">type</span> 类型 --headerline --upsert --drop 文件名</span><br></pre></td></tr></table></figure><blockquote><p>–type：导入的文件类型（默认json）</p></blockquote><h3 id="2-恢复导出的表数据"><a href="#2-恢复导出的表数据" class="headerlink" title="2. 恢复导出的表数据"></a>2. 恢复导出的表数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongoimport -d SERVERLOG -c users --upsert /data/mongobak/SERVERLOG.bak/</span><br><span class="line"><span class="comment"># users.dat connected to: 127.0.0.1 Tue Dec 3 08:26:52.852 imported 4 objects</span></span><br></pre></td></tr></table></figure><h3 id="3-部分字段的表数据导入"><a href="#3-部分字段的表数据导入" class="headerlink" title="3. 部分字段的表数据导入"></a>3. 部分字段的表数据导入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongoimport -d SERVERLOG -c users --upsertFields uid,name,age /data/mongobak/SERVERLOG.bak/</span><br><span class="line"><span class="comment"># users.datconnected to: 127.0.0.1 Tue Dec 3 08:31:15.179 imported 4 objects</span></span><br></pre></td></tr></table></figure><h3 id="4-恢复csv文件"><a href="#4-恢复csv文件" class="headerlink" title="4. 恢复csv文件"></a>4. 恢复csv文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongoimport -d SERVERLOG -c users --<span class="built_in">type</span> csv --headerline --file /data/mongobak/SERVERLOG.bak/</span><br><span class="line"><span class="comment"># users.csv connected to: 127.0.0.1 Tue Dec 3 08:37:21.961 imported 4 objects</span></span><br></pre></td></tr></table></figure><blockquote><p>–file:需要导入的文件</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON转CSV格式</title>
      <link href="/2021/8/json%E8%BD%ACCSV%E6%A0%BC%E5%BC%8F/"/>
      <url>/2021/8/json%E8%BD%ACCSV%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://pypi.org/project/python-json2csv/">https://pypi.org/project/python-json2csv/</a></p><h2 id="Project-description"><a href="#Project-description" class="headerlink" title="Project description"></a>Project description</h2><p>Convert json array data to csv.</p><p><em>Note:</em> zencore-json2csv rename to python-json2csv</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-json2csv</span><br></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;json2csv --<span class="built_in">help</span></span><br><span class="line">Usage: json2csv [OPTIONS]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">-f, --file FILENAME     Input file name, use - <span class="keyword">for</span> stdin.</span><br><span class="line">--file-encoding TEXT    Input file encoding.</span><br><span class="line">-o, --output FILENAME   Output file name, use - <span class="keyword">for</span> stdout.</span><br><span class="line">--output-encoding TEXT  Output file encoding.</span><br><span class="line">-k, --keys TEXT         Output field names. Comma separated string list.</span><br><span class="line">-p, --path TEXT         Path of the data.</span><br><span class="line">--<span class="built_in">help</span>                  Show this message and <span class="built_in">exit</span>.</span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例 1"></a>案例 1</h3><p><strong>输入数据:</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>命令:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat input.txt | json2csv -o output.txt</span><br></pre></td></tr></table></figure><p><strong>结果:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1,2,3</span><br><span class="line">2,3,4</span><br></pre></td></tr></table></figure><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例 2"></a>案例 2</h3><p><strong>输入数据:</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">&quot;f1&quot;</span>: <span class="number">11</span>, <span class="attr">&quot;f2&quot;</span>: <span class="number">12</span>, <span class="attr">&quot;f3&quot;</span>: <span class="number">13</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">&quot;f1&quot;</span>: <span class="number">21</span>, <span class="attr">&quot;f3&quot;</span>: <span class="number">23</span>, <span class="attr">&quot;f2&quot;</span>: <span class="number">22</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>命令:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat input.txt | json2csv -o output.txt -k f1,f2,f3</span><br></pre></td></tr></table></figure><p><strong>结果:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">11,12,13</span><br><span class="line">21,22,23</span><br></pre></td></tr></table></figure><h3 id="案例-3（嵌套）"><a href="#案例-3（嵌套）" class="headerlink" title="案例 3（嵌套）"></a>案例 3（嵌套）</h3><p><strong>输入:</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;list&quot;</span>: [</span><br><span class="line">            [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">            [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>命令:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat input.txt | json2csv -o output.txt -p data.list</span><br></pre></td></tr></table></figure><p><strong>结果:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1,2,3</span><br><span class="line">2,3,4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JSON </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用CSharp带参数调用外部EXE</title>
      <link href="/2021/8/%E4%BD%BF%E7%94%A8CSharp%E5%B8%A6%E5%8F%82%E6%95%B0%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8EXE/"/>
      <url>/2021/8/%E4%BD%BF%E7%94%A8CSharp%E5%B8%A6%E5%8F%82%E6%95%B0%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8EXE/</url>
      
        <content type="html"><![CDATA[<h3 id="1-问题意义"><a href="#1-问题意义" class="headerlink" title="1.问题意义"></a>1.<strong>问题意义</strong></h3><p>据说界面程序开发,首选C#(像lebview之类的也很好)<br> 但是,**能不能用其他语言开发核心代码,只用C#做界面?**毕竟每种语言都有自己擅长的领域.</p><h3 id="2-exe程序"><a href="#2-exe程序" class="headerlink" title="2.exe程序"></a>2.exe程序</h3><p>比如有个example.exe,能接受4个参数.用cmd的调用方法是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example.exe <span class="string">&quot;1&quot;</span> <span class="string">&quot;a&quot;</span> <span class="string">&quot;2&quot;</span> <span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-C-调用方法"><a href="#3-C-调用方法" class="headerlink" title="3.C#调用方法"></a>3.C#调用方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用exe的函数</span></span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">StartProcess</span>(<span class="params"><span class="built_in">string</span> runFilePath, <span class="keyword">params</span> <span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> arg <span class="keyword">in</span> args)</span><br><span class="line">        &#123;</span><br><span class="line">            s = s + arg + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s = s.Trim();</span><br><span class="line">        Process process = <span class="keyword">new</span> Process();<span class="comment">//创建进程对象    </span></span><br><span class="line">        ProcessStartInfo startInfo = <span class="keyword">new</span> ProcessStartInfo(runFilePath, s); <span class="comment">// 括号里是(程序名,参数)</span></span><br><span class="line">        process.StartInfo = startInfo;</span><br><span class="line">        process.Start();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start_craw</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> exe_path = <span class="string">&quot;E:/example.exe&quot;</span>;  <span class="comment">// 被调exe</span></span><br><span class="line">    <span class="built_in">string</span>[] the_args = &#123; <span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>&#125;;   <span class="comment">// 被调exe接受的参数</span></span><br><span class="line">    StartProcess(exe_path, the_args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-实战"><a href="#4-实战" class="headerlink" title="4.实战"></a>4.实战</h3><img src="https://upload-images.jianshu.io/upload_images/3132923-6f9f8d763243ce56.png?imageMogr2/auto-orient/strip|imageView2/2/w/598/format/webp" alt="界面设计" style="zoom:100%;" /><img src="https:////upload-images.jianshu.io/upload_images/3132923-37e318b07b7b67f5.png?imageMogr2/auto-orient/strip|imageView2/2/w/915/format/webp" alt="代码" style="zoom:80%;" /><p>给按键添加点击事件,点击事件触发start_craw函数</p><img src="https:////upload-images.jianshu.io/upload_images/3132923-415b9a266d54d37b.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="点击事件与函数关联" style="zoom:80%;" /><h3 id="5-StartProcess更多的设置"><a href="#5-StartProcess更多的设置" class="headerlink" title="5.StartProcess更多的设置"></a>5.StartProcess更多的设置</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">StartProcess</span>(<span class="params"><span class="built_in">string</span> runFilePath, <span class="keyword">params</span> <span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> arg <span class="keyword">in</span> args)</span><br><span class="line">        &#123;</span><br><span class="line">            s = s + arg + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s = s.Trim();</span><br><span class="line">        Process process = <span class="keyword">new</span> Process();<span class="comment">//创建进程对象    </span></span><br><span class="line">        ProcessStartInfo startInfo = <span class="keyword">new</span> ProcessStartInfo(runFilePath, s); <span class="comment">// 括号里是(程序名,参数)</span></span><br><span class="line">        process.StartInfo = startInfo;</span><br><span class="line">        <span class="comment">//process.StartInfo.UseShellExecute = true;    //是否使用操作系统的shell启动</span></span><br><span class="line">        <span class="comment">//startInfo.RedirectStandardInput = true;      //接受来自调用程序的输入     </span></span><br><span class="line">        <span class="comment">//startInfo.RedirectStandardOutput = true;     //由调用程序获取输出信息</span></span><br><span class="line">        <span class="comment">//startInfo.CreateNoWindow = true;             //不显示调用程序的窗口 </span></span><br><span class="line">        process.Start();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-疑难解答"><a href="#6-疑难解答" class="headerlink" title="6.疑难解答"></a>6.疑难解答</h3><p>调用外部exe时,当这个exe运行出错时,会闪退,无法看清错误原因<br> <strong>解决:</strong><br> 直接去调试这个被调用的exe即可.</p><p>作者：xigua1234<br>链接：<a href="https://www.jianshu.com/p/43aa64992706">https://www.jianshu.com/p/43aa64992706</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些配色网站</title>
      <link href="/2021/8/%E9%85%8D%E8%89%B2/"/>
      <url>/2021/8/%E9%85%8D%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<p>来源：<a href="https://www.coolapk.com/feed/18740582?shareKey=ODNiNTQ1YjQ4ZTYxNjExYTczMjU~&amp;shareUid=33091&amp;shareFrom=com.coolapk.market_11.3">酷安评论</a></p><p>分享一些配色网站<br>转载自公众号：平面课程表，下面是原链接<br><a href="https://mp.weixin.qq.com/s/8hXgjyzPO5zGAqiczTsNeA">查看链接</a><br>文字我都放在这里了，有些加载会比较慢，需要xx<br>（给出的图片是在最后一个网站随便找的，挺好看)</p><p>1.中国色<br>据说该网站收藏了最全的中国色，颜色皆以色卡的形式来呈现，并且还有中英文互译，可以说是十分贴心了。<br>网址：<a href="http://zhongguose.com/">查看链接</a><br>2.Nipponcolors<br>日式传统配色该网站收藏了日本传统色彩，也是以色卡的形式来呈现，它最棒的地方是背景可以根据你所选择的颜色来变化。<br>网址：<a href="http://nipponcolors.com/">查看链接</a></p><p>3.<a href="https://material.colorion.co/">Colorion MaterialColorion Material</a><br>网站不仅分享了几百个色板，并且还有收藏夹的功能，方便用户收藏。</p><img src="image-20210817094550402.png" style="zoom:30%;" /><p>4.LOL ColorsLOL Colors<br>是一款非常可爱的配色网站，鼠标移动到不同颜色的水滴上会有色彩代码(Hex Code)的颜色值。<br>网址：<a href="https://www.webdesignrankings.com/">查看链接</a><br>5.<a href="https://colorhunt.co/">Color HuntColor Hunt</a><br>不仅会实时更新不同配色方案，用户还能在该网站分享自己的色彩搭配，优质的配色方案往往会获得大量的点赞。</p><img src="image-20210817094758627.png" style="zoom:30%;" /><p>6.<a href="https://www.materialpalette.com/">Material PaletteMaterial Palette</a><br>主要特色是可以让用户一边选择颜色同时还能实时预览效果图，并且用户只需要选择1个或2个颜色后系统会自己匹配出一组APP UI 配色方案。</p><img src="Material Design Color Palette Generator - Material Palette.png" style="zoom:20%;" /><p>7.Palettable<br>在进入网页时，会随机推荐颜色，你只需要选择喜欢or不喜欢，直到搭配出想要的色板。<br>网址：<a href="http://www.palettable.io/">www.palettable.io/</a></p><img src="Palettable.png" style="zoom:20%;" /><p>8.colorfavscolorfavs<br><strong><code>它可以根据你上传的图片来分析配色，自动检测色值。</code></strong><br>网址：<a href="http://www.colorfavs.com/">www.colorfavs.com/</a><br>9.colrdcolrd<br>不仅可以保存自己喜欢的配色，也可以自己上传图片和配色方案。<br>网址：<a href="http://colrd.com/">查看链接</a><br>10.COLOURlovers<br>该网站除了提供了眼花缭乱的页面色彩搭配方案外，还把DIY的原理运用其中，让那些精彩的配色不会随着时间的流逝而被遗忘。用户也可以按照自定的格式上传配色方案与大家分享。<br>网址：<a href="https://www.colourlovers.com/">查看链接</a><br>11.WebGradientsWebGradients<br>网站收录了180种渐变色彩，整体风格比较柔和。<code>点击下方图示渐变色后进入全屏预览，直接可复制CSS代码。</code><br>网址：<a href="https://webgradients.com/">查看链接</a></p><img src="image-20210817095431056.png" style="zoom:20%;" /><p>12.ColourcoColourco<br>网站会根据你鼠标的移动来变换颜色。<br>网址：<a href="https://colourco.de/">查看链接</a></p><img src="image-20210817095659946.png" style="zoom:20%;" /><p>13.Color Claim“ColorClaim”<br>是由德国的一位设计师创办的配色站点，该网站展示的都是博主收集的最喜欢的颜色组合，目前已经收录了102种组合。<br>网址：<a href="https://www.vanschneider.com/colors">查看链接</a><br>14.Adobe Color CCAdobe Color CC<br>不仅有着超全的配色方案，还能根据色轮来调整配色。<br>网址：color.adobe.com/<br>15.UigradientsUigradients<br>收藏了将近上百种渐变配色方案，以分享美丽渐变色彩为主的分享站，里面接近上百种渐变配色方案，设计师可根据自己风格来选择搭配。<br>网址：<a href="https://uigradients.com/">查看链接</a></p><img src="image-20210817095849846.png" style="zoom:20%;" /><p>16.0 to 255<br>你随机点击一个颜色，它会有序呈现色彩变化的颜色列表，这时你可以选取合适的使用。<br>网址：<a href="http://www.0to255.com/">查看链接</a><br>17.BrandColorsBrandColors<br>收集了世界上许多知名品牌的配色表，可以直接让我们参考一个品牌的配色，我们也可以在该网站上下载任何一个品牌的配色表。<br>网址：<a href="https://brandcolors.net/">查看链接</a></p><img src="image-20210817100038062.png" style="zoom:20%;" /><p>18.Design SeedsDesign Seeds是一个色彩与灵感的网站，主要从自然和有意义的生活美学中寻找创作元素。<br>网址：<a href="https://www.design-seeds.com/">查看链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 配色 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署IP和地址行政区域归属查询工具</title>
      <link href="/2021/8/Docker%E9%83%A8%E7%BD%B2IP%E5%92%8C%E5%9C%B0%E5%9D%80%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%9F%9F%E5%BD%92%E5%B1%9E%E6%9F%A5%E8%AF%A2%E5%B7%A5%E5%85%B7/"/>
      <url>/2021/8/Docker%E9%83%A8%E7%BD%B2IP%E5%92%8C%E5%9C%B0%E5%9D%80%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%9F%9F%E5%BD%92%E5%B1%9E%E6%9F%A5%E8%AF%A2%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="构建Dockerfile"><a href="#构建Dockerfile" class="headerlink" title="构建Dockerfile"></a>构建Dockerfile</h2><p>Dockerfile如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> postgis/postgis:<span class="number">13</span>-<span class="number">3.1</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --update --no-cache add python3-dev libffi-dev gcc musl-dev make libevent-dev build-base py3-pip python3 \</span></span><br><span class="line"><span class="bash">    &amp;&amp;pip install wheel \</span></span><br><span class="line"><span class="bash">    &amp;&amp;pip install gevent \</span></span><br><span class="line"><span class="bash">    &amp;&amp;pip install --no-cache-dir flask gunicorn shapely aiohttp psycopg2 \</span></span><br><span class="line"><span class="bash">    &amp;&amp;apk del python3-dev libffi-dev gcc musl-dev make libevent-dev build-base</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8848</span> <span class="number">5432</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> gunicorn app:app -c gunicorn.conf.py</span></span><br></pre></td></tr></table></figure><p>因为构建镜像基于alpine，遇到安装上面代码中提到的python库文件错误时解放方案来源网络<br>alpine安装gevent成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk --update --no-cache add python3-dev libffi-dev gcc musl-dev make libevent-dev build-base</span><br></pre></td></tr></table></figure><p>来源<a href="https://stackoverflow.com/a/66952652">https://stackoverflow.com/a/66952652</a></p><p>alpine python 安装psycopg2失败的解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apk add --no-cache python3 postgresql-libs &amp;&amp; \</span><br><span class="line"> apk add --no-cache --virtual .build-deps gcc python3-dev musl-dev postgresql-dev</span><br><span class="line">pip install psycopg2 ---no-cache-dir<span class="comment">#不缓存安装</span></span><br><span class="line">apk --purge del .build-deps <span class="comment">#删掉编译库</span></span><br></pre></td></tr></table></figure><p><a href="https://www.codenong.com/46711990/">https://www.codenong.com/46711990/</a></p><p>alpine python安装shapely失败的解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apk --update add build-base libxslt-dev</span><br><span class="line">apk add --virtual .build-deps \</span><br><span class="line">        --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing \</span><br><span class="line">        --repository http://dl-cdn.alpinelinux.org/alpine/edge/main \</span><br><span class="line">        gcc libc-dev geos-dev geos &amp;&amp; \</span><br><span class="line">    runDeps=<span class="string">&quot;<span class="subst">$(scanelf --needed --nobanner --recursive /usr/local \</span></span></span><br><span class="line"><span class="subst"><span class="string">    | awk &#x27;&#123; gsub(/,/, <span class="string">&quot;\nso:&quot;</span>, $2)</span>; print &quot;</span>so:<span class="string">&quot; <span class="variable">$2</span> &#125;&#x27; \</span></span><br><span class="line"><span class="string">    | xargs -r apk info --installed \</span></span><br><span class="line"><span class="string">    | sort -u)&quot;</span> &amp;&amp; \</span><br><span class="line">    apk add --virtual .rundeps <span class="variable">$runDeps</span></span><br><span class="line">geos-config --cflags</span><br></pre></td></tr></table></figure><p>来源：<a href="https://serverfault.com/questions/947044/installing-shapely-on-alpine-docker">https://serverfault.com/questions/947044/installing-shapely-on-alpine-docker</a></p><p>alpine python 安装aiohttp失败的解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN apk add gcc g++ libffi-dev musl-dev \</span><br><span class="line">    &amp;&amp; python -m pip install --no-cache-dir brotlipy \</span><br><span class="line">    &amp;&amp; apk del gcc g++ libffi-dev musl-dev</span><br></pre></td></tr></table></figure><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><p>第一步的Dockerfile和应用已经发布到github私有仓库Quer<br>下载该仓库，上传到服务器，解压并执行以下命令创建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ipquery:3.0 . </span><br></pre></td></tr></table></figure><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name=ipquery -p 8848:8848 -p 54321:5432 -e POSTGRES_PASSWORD=password ipquery:3.0</span><br></pre></td></tr></table></figure><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><p>具体参照<code>http://www.sirliu.top:8000/archives/81/</code><br>数据库客户端Navicat连接postgis，新建数据库<code>csgeo</code>该名称已在代码中写死该名称已在py代码中写死，不可更改，并将数据库设置为地理空间数据库，具体方法见上面链接文章。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> alpine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python + SQLite + ST_Geometry</title>
      <link href="/2021/8/Python%20+%20SQLite%20+%20ST_Geometry/"/>
      <url>/2021/8/Python%20+%20SQLite%20+%20ST_Geometry/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/lqqgis/p/12641794.html">https://www.cnblogs.com/lqqgis/p/12641794.html</a></p>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> GIS </tag>
            
            <tag> sqlite </tag>
            
            <tag> spatial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中sqlite使用spatial扩展</title>
      <link href="/2021/8/Python%E4%B8%ADsqlite%E4%BD%BF%E7%94%A8spatial%E6%89%A9%E5%B1%95/"/>
      <url>/2021/8/Python%E4%B8%ADsqlite%E4%BD%BF%E7%94%A8spatial%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"> </span><br><span class="line">connR = sqlite3.connect(<span class="string">&#x27;:memory:&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">connR.enable_load_extension(<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#now we can load the extension</span></span><br><span class="line"><span class="comment"># depending on your OS and sqlite/spatialite version you might need to add </span></span><br><span class="line"><span class="comment"># &#x27;.so&#x27; (Linux) or &#x27;.dll&#x27; (Windows) to the extension name</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#mod_spatialite (recommended)</span></span><br><span class="line">connR.execute(<span class="string">&#x27;SELECT load_extension(&quot;mod_spatialite&quot;)&#x27;</span>)   </span><br><span class="line">connR.execute(<span class="string">&#x27;SELECT InitSpatialMetaData(1);&#x27;</span>)  </span><br><span class="line"> </span><br><span class="line"><span class="comment"># libspatialite</span></span><br><span class="line">connR.execute(<span class="string">&#x27;SELECT load_extension(&quot;libspatialite&quot;)&#x27;</span>)</span><br><span class="line">connR.execute(<span class="string">&#x27;SELECT InitSpatialMetaData();&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">curR = connR.cursor()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">curR.execute(<span class="string">&#x27;&#x27;&#x27;CREATE TABLE my_line(id INTEGER PRIMARY KEY)&#x27;&#x27;&#x27;</span>)</span><br><span class="line">curR.execute(<span class="string">&#x27;SELECT AddGeometryColumn(&quot;my_line&quot;,&quot;geom&quot; , 4326, &quot;LINESTRING&quot;, 2)&#x27;</span>)</span><br><span class="line">connR.commit()</span><br><span class="line"> </span><br><span class="line">polygon_wkt = <span class="string">&#x27;POLYGON ((11 50,11 51,12 51,12 50,11 50))&#x27;</span></span><br><span class="line"> </span><br><span class="line">XA = <span class="number">11</span></span><br><span class="line">YA = <span class="number">52</span></span><br><span class="line">XB = <span class="number">12</span></span><br><span class="line">YB = <span class="number">49</span></span><br><span class="line"> </span><br><span class="line">line_wkt = <span class="string">&#x27;LINESTRING(&#123;0&#125; &#123;1&#125;, &#123;2&#125; &#123;3&#125;)&#x27;</span>.<span class="built_in">format</span>(XA, YA, XB, YB)</span><br><span class="line"> </span><br><span class="line">curR.execute(<span class="string">&quot;&quot;&quot;INSERT INTO my_line VALUES (?,GeomFromText(?, 4326))&quot;&quot;&quot;</span>, (<span class="number">1</span>, line_wkt))</span><br><span class="line"> </span><br><span class="line">connR.commit()</span><br><span class="line"> </span><br><span class="line">cursor = connR.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    SELECT astext(st_intersection(geom, GeomFromText(?, 4326))) from my_line</span></span><br><span class="line"><span class="string">    WHERE st_intersects(geom, GeomFromText(?, 4326))&#x27;&#x27;&#x27;</span>, (polygon_wkt, polygon_wkt))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p><a href="https://gis.stackexchange.com/a/244830">python sqlite使用spatial扩展</a></p>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> GIS </tag>
            
            <tag> sqlite </tag>
            
            <tag> spatial </tag>
            
            <tag> geojson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL测试判断多边形（Polygon）及镂空多边形（MultiPolygon）是否包含点</title>
      <link href="/2021/8/MySQL%E6%B5%8B%E8%AF%95%E5%88%A4%E6%96%AD%E5%A4%9A%E8%BE%B9%E5%BD%A2%EF%BC%88Polygon%EF%BC%89%E5%8F%8A%E9%95%82%E7%A9%BA%E5%A4%9A%E8%BE%B9%E5%BD%A2%EF%BC%88MultiPolygon%EF%BC%89%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E7%82%B9/"/>
      <url>/2021/8/MySQL%E6%B5%8B%E8%AF%95%E5%88%A4%E6%96%AD%E5%A4%9A%E8%BE%B9%E5%BD%A2%EF%BC%88Polygon%EF%BC%89%E5%8F%8A%E9%95%82%E7%A9%BA%E5%A4%9A%E8%BE%B9%E5%BD%A2%EF%BC%88MultiPolygon%EF%BC%89%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.创建测试表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> zone (</span><br><span class="line">id <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">polygongeo geometry <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>MYISAM <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 2.插入多边形数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> zone(polygongeo) <span class="keyword">values</span>(ST_GeomFromText(<span class="string">&#x27;POLYGON((1 1,1 5,5 5,5 1,1 1))&#x27;</span>));</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 3.判断点是否在多边形区域</span></span><br><span class="line"><span class="comment">--   3.1 测试 POINT(3, 4)，在多边形内</span></span><br><span class="line"><span class="keyword">select</span> ST_AsText(polygongeo) <span class="keyword">from</span> zone <span class="keyword">where</span> MBRWithin(ST_GeomFromText(<span class="string">&#x27;POINT(3 4)&#x27;</span>),polygongeo);</span><br><span class="line"> </span><br><span class="line"><span class="comment">--   3.2 测试 POINT(6, 1)  在多边形外</span></span><br><span class="line"><span class="keyword">select</span> ST_AsText(polygongeo) <span class="keyword">from</span> zone <span class="keyword">where</span> MBRWithin(ST_GeomFromText(<span class="string">&#x27;POINT(6 1)&#x27;</span>),polygongeo);</span><br></pre></td></tr></table></figure><p>不入库，直接测试</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ST_Contains(ST_GeomFromText(<span class="string">&#x27;MULTIPOLYGON(((103.236631342762 28.8176761290501,103.223402196754 28.8067721559103,103.209070714842 28.8142367294416,103.180091207643 28.798947455161,103.14654213721 28.824723076309,103.130331635197 28.828001337192,103.134297395409 28.8452254641839,103.167231778324 28.8643948670295,103.176539598724 28.8840813692598,103.169919000262 28.9045950607135,103.172633909627 28.932211552721,103.146715816082 28.9448446028962,103.13471930785 28.9692321042783,103.150374074704 28.9703423083509,103.161580849577 28.9891424738461,103.15734975159 29.0005456111911,103.177684162294 29.032308821395,103.176350962327 29.0694099108388,103.160365421227 29.0944466696781,103.180453467154 29.1056188206521,103.2017136031 29.1071235950779,103.201687387863 29.0940476602714,103.191523992039 29.0799538880615,103.199963856947 29.0731856649865,103.219618568142 29.0694447325884,103.227025387212 29.0507195660552,103.259157118007 29.0312680863532,103.281320228146 28.996955444738,103.274604182837 28.9814130607642,103.25969996678 28.9740033773541,103.245668694754 28.9457143516361,103.251277767255 28.9258500057732,103.245698980324 28.915184451901,103.272321285299 28.8964177393872,103.246358179786 28.870089342749,103.228214409667 28.8654235673438,103.236631342762 28.8176761290501)))&#x27;</span>),ST_GeomFromText(<span class="string">&#x27;POINT(103.2366313 28.81767612)&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="判断点是否在镂空多边形内，直接测试"><a href="#判断点是否在镂空多边形内，直接测试" class="headerlink" title="判断点是否在镂空多边形内，直接测试"></a>判断点是否在镂空多边形内，直接测试</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ST_Contains(ST_GeomFromText(<span class="string">&#x27;MULTIPOLYGON(((98.9208984375  30.41078179084589,97.327880859375  28.825425374477224,98.052978515625  28.120438687101064,97.7783203125  26.303264239389534,99.151611328125  25.997549919572112,100.535888671875  26.303264239389534,101.865234375  27.235094607795503,103.095703125  26.391869671769022,103.89770507812499  27.712710260887476,103.60107421874999  28.700224692776988,101.88720703125  30.14512718337613,100.51391601562499  30.92107637538488,101.129150390625  28.9120147012556,100.0634765625  28.033197847676377,99.90966796875  29.6594160549124,98.9208984375  30.41078179084589),(101.7059326171875 28.023500048883022,102.72766113281249 28.023500048883022,102.72766113281249 28.700224692776988,101.7059326171875 28.700224692776988,101.7059326171875 28.023500048883022)))&#x27;</span>),ST_GeomFromText(<span class="string">&#x27;POINT(101.854248046875 29.084976575985912)&#x27;</span>))</span><br><span class="line"><span class="comment">--点1：101.854248046875 29.084976575985912    输出： 1</span></span><br><span class="line"><span class="comment">--点2：100.5029296875 28.969700808694157      输出： 0</span></span><br><span class="line"><span class="comment">--点3：103.91555786132812 27.70784710660343   输出： 0</span></span><br><span class="line"><span class="comment">--点4：102.26074218749999 28.372068829631633  输出： 0</span></span><br></pre></td></tr></table></figure><img src="3793956811.png" alt="点的位置" style="zoom:80%;" /><img src="2355939894.png" alt="点3位置" style="zoom:80%;" /><p>上面测试中的镂空多边形geojson数据如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;FeatureCollection&quot;</span>,<span class="attr">&quot;features&quot;</span>:[&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Feature&quot;</span>,<span class="attr">&quot;properties&quot;</span>:&#123;&#125;,<span class="attr">&quot;geometry&quot;</span>:&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Polygon&quot;</span>,<span class="attr">&quot;coordinates&quot;</span>:[[[<span class="number">98.9208984375</span>,<span class="number">30.41078179084589</span>],[<span class="number">97.327880859375</span>,<span class="number">28.825425374477224</span>],[<span class="number">98.052978515625</span>,<span class="number">28.120438687101064</span>],[<span class="number">97.7783203125</span>,<span class="number">26.303264239389534</span>],[<span class="number">99.151611328125</span>,<span class="number">25.997549919572112</span>],[<span class="number">100.535888671875</span>,<span class="number">26.303264239389534</span>],[<span class="number">101.865234375</span>,<span class="number">27.235094607795503</span>],[<span class="number">103.095703125</span>,<span class="number">26.391869671769022</span>],[<span class="number">103.89770507812499</span>,<span class="number">27.712710260887476</span>],[<span class="number">103.60107421874999</span>,<span class="number">28.700224692776988</span>],[<span class="number">101.88720703125</span>,<span class="number">30.14512718337613</span>],[<span class="number">100.51391601562499</span>,<span class="number">30.92107637538488</span>],[<span class="number">101.129150390625</span>,<span class="number">28.9120147012556</span>],[<span class="number">100.0634765625</span>,<span class="number">28.033197847676377</span>],[<span class="number">99.90966796875</span>,<span class="number">29.6594160549124</span>],[<span class="number">98.9208984375</span>,<span class="number">30.41078179084589</span>]],[[<span class="number">101.7059326171875</span>,<span class="number">28.023500048883022</span>],[<span class="number">102.72766113281249</span>,<span class="number">28.023500048883022</span>],[<span class="number">102.72766113281249</span>,<span class="number">28.700224692776988</span>],[<span class="number">101.7059326171875</span>,<span class="number">28.700224692776988</span>],[<span class="number">101.7059326171875</span>,<span class="number">28.023500048883022</span>]]]&#125;&#125;]&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GEOJSON标准格式学习</title>
      <link href="/2021/8/GEOJSON%E6%A0%87%E5%87%86%E6%A0%BC%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/8/GEOJSON%E6%A0%87%E5%87%86%E6%A0%BC%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>转载自：<a href="https://www.jianshu.com/p/852d7ad081b3">https://www.jianshu.com/p/852d7ad081b3</a></p><p>最近做的项目需要详细了解geojson，因此查了一些资料，现在整理一份标准格式的记录，要理解本文需要首先了解json的基本知识，这里不过多展开，可以去参考w3school上的教程，简言之，json是通过键值对表示数据对象的一种格式，可以很好地表达数据，其全称为<strong>JavaScript Object Notation</strong>（JavaScript Object Notation），正如这个名称，JavaScript和json联系紧密，但是json可以应用的范围很广，不止于前端，它比XML数据更轻量、更容易解析（某种角度上说xml可以更自由地封装更多的数据）。很多编程语言都有对应的json解析库，例如Python的json库，C#的Newtonsoft.Json，Java的org.json。geojson是用json的语法表达和存储地理数据，可以说是json的子集。</p><p>例如下面就是一个点数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;FeatureCollection&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: [</span><br><span class="line">        &#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;properties&quot;</span>:&#123;&#125;,</span><br><span class="line">        <span class="attr">&quot;geometry&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Point&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;coordinates&quot;</span>:[<span class="number">105.380859375</span>,<span class="number">31.57853542647338</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="webp-162911417860130" alt="img" style="zoom:100%;" /><p>例子图片</p><p><em>（注：以下geojson的效果截图都来自<a href="https://links.jianshu.com/go?to=http://geojson.io/%23map=2/20.0/0.0">geojson.io</a>在线生成）</em></p><p>geojson将所有的地理要素分为Point、MultiPoint、LineString、MultiLineString、Polygon、MultiPolygon、GeometryCollection。首先是将这些要素封装到单个的geometry里，然后作为一个个的Feature（也就是要素）；要素放到一个要素集合里，从树状结构来理解FeatureCollection就是根节点，表示为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;FeatureCollection&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有地理要素放在features的列表里。</p><h3 id="点要素Point"><a href="#点要素Point" class="headerlink" title="点要素Point"></a>点要素Point</h3><p>点要素是最简单的，类型type对应Point，然后坐标是一个1维的数组，里面有两个元素（如果是立体的坐标就是三维x,y,z），分别为经度和纬度。properties里面可以封装各种属性，例如名称、标识颜色等等。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;geometry&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Point&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;coordinates&quot;</span>:[<span class="number">105.380859375</span>,<span class="number">31.57853542647338</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="多点要素MultiPoint"><a href="#多点要素MultiPoint" class="headerlink" title="多点要素MultiPoint"></a>多点要素MultiPoint</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;geometry&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;MultiPoint&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;coordinates&quot;</span>:[[<span class="number">105.380859375</span>,<span class="number">31.57853542647338</span>],</span><br><span class="line">                [<span class="number">105.580859375</span>,<span class="number">31.52853542647338</span>]</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>其核心坐标：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">105.380859375</span>,<span class="number">31.57853542647338</span></span><br><span class="line"><span class="number">105.580859375</span>,<span class="number">31.52853542647338</span></span><br></pre></td></tr></table></figure><h3 id="线要素LineString"><a href="#线要素LineString" class="headerlink" title="线要素LineString"></a>线要素LineString</h3><p>线要素就是指线段，记录的是线的端点坐标，可视化时会按照记录顺序联结。对于曲线（如贝塞尔曲线）目前还没有很好的表达，但是在地理数据中，曲线一般会用LineString去拟合，现实地理世界中也没有标准的曲线地理要素。</p><p>线要素的坐标coordinates里的二维数组和多点要素基本一样，区别就在type上了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;geometry&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;LineString&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;coordinates&quot;</span>:[[<span class="number">105.6005859375</span>,<span class="number">30.65681556429287</span>],</span><br><span class="line">        [<span class="number">107.95166015624999</span>,<span class="number">31.98944183792288</span>],</span><br><span class="line">        [<span class="number">109.3798828125</span>,<span class="number">30.031055426540206</span>],</span><br><span class="line">        [<span class="number">107.7978515625</span>,<span class="number">29.935895213372444</span>]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对应的Kml表达：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Placemark</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ExtendedData</span>&gt;</span><span class="tag">&lt;/<span class="name">ExtendedData</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LineString</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">coordinates</span>&gt;</span>108.65753173828125,34.1873818599505 108.72413635253905,34.25154099726973 108.77151489257812,34.16977214177208 108.88481140136719,34.229970811273084</span><br><span class="line">        <span class="tag">&lt;/<span class="name">coordinates</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LineString</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Placemark</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MultiLineString"><a href="#MultiLineString" class="headerlink" title="MultiLineString"></a>MultiLineString</h3><p>也是一个三维数组（和多边形一样）；</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;geometry&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;MultiLineString&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;coordinates&quot;</span>:</span><br><span class="line">        [</span><br><span class="line">            [</span><br><span class="line">                [<span class="number">105.6005859375</span>,<span class="number">30.65681556429287</span>],</span><br><span class="line">                [<span class="number">107.95166015624999</span>,<span class="number">31.98944183792288</span>],</span><br><span class="line">                [<span class="number">109.3798828125</span>,<span class="number">30.031055426540206</span>],</span><br><span class="line">                [<span class="number">107.7978515625</span>,<span class="number">29.935895213372444</span>]</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                [<span class="number">109.3798828125</span>,<span class="number">30.031055426540206</span>],</span><br><span class="line">                [<span class="number">107.1978515625</span>,<span class="number">31.235895213372444</span>]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="多边形Polygon"><a href="#多边形Polygon" class="headerlink" title="多边形Polygon"></a>多边形Polygon</h3><p>注：单个多边形是一个3维数组，可以包含多个二维数组，这种情况和MultiPolygon效果很像。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;geometry&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;coordinates&quot;</span>:[</span><br><span class="line">                        [</span><br><span class="line">                          [<span class="number">106.10595703125</span>,<span class="number">33.33970700424026</span>],</span><br><span class="line">                          [<span class="number">106.32568359375</span>,<span class="number">32.41706632846282</span>],</span><br><span class="line">                          [<span class="number">108.03955078125</span>,<span class="number">32.2313896627376</span>],</span><br><span class="line">                          [<span class="number">108.25927734375</span>,<span class="number">33.15594830078649</span>],</span><br><span class="line">                          [<span class="number">106.10595703125</span>,<span class="number">33.33970700424026</span>]</span><br><span class="line">                        ]</span><br><span class="line">                      ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="多多边形MultiPolygon"><a href="#多多边形MultiPolygon" class="headerlink" title="多多边形MultiPolygon"></a>多多边形MultiPolygon</h3><h4 id="type-1-两个不会相交的多边形"><a href="#type-1-两个不会相交的多边形" class="headerlink" title="type 1 两个不会相交的多边形"></a>type 1 两个不会相交的多边形</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">&quot;geometry&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;coordinates&quot;</span>:</span><br><span class="line">    [ </span><br><span class="line">        [</span><br><span class="line">            [</span><br><span class="line">                [<span class="number">109.2041015625</span>,<span class="number">30.088107753367257</span>],</span><br><span class="line">                [<span class="number">115.02685546875</span>,<span class="number">30.088107753367257</span>],</span><br><span class="line">                [<span class="number">115.02685546875</span>,<span class="number">32.7872745269555</span>],</span><br><span class="line">                [<span class="number">109.2041015625</span>,<span class="number">32.7872745269555</span>],</span><br><span class="line">                [<span class="number">109.2041015625</span>,<span class="number">30.088107753367257</span>]</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">            ]</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            [</span><br><span class="line">                [<span class="number">112.9833984375</span>,<span class="number">26.82407078047018</span>],</span><br><span class="line">                [<span class="number">116.69677734375</span>,<span class="number">26.82407078047018</span>],</span><br><span class="line">                [<span class="number">116.69677734375</span>,<span class="number">29.036960648558267</span>],</span><br><span class="line">                [<span class="number">112.9833984375</span>,<span class="number">29.036960648558267</span>],</span><br><span class="line">                [<span class="number">112.9833984375</span>,<span class="number">26.82407078047018</span>]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">             &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="webp-162911415511428" alt="img" style="zoom: 100%;" /><p>两个不相交的多边形</p><h4 id="type-2-两个镶套的多边形"><a href="#type-2-两个镶套的多边形" class="headerlink" title="type 2 两个镶套的多边形"></a>type 2 两个镶套的多边形</h4><p>小的在前面，范围大的在后面，用上4个中括号，但效果不是有洞的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">&quot;geometry&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;coordinates&quot;</span>:</span><br><span class="line">    [ </span><br><span class="line">        [</span><br><span class="line">            [</span><br><span class="line">                [<span class="number">101.6455078125</span>,<span class="number">27.68352808378776</span>],</span><br><span class="line">                [<span class="number">114.78515624999999</span>,<span class="number">27.68352808378776</span>],</span><br><span class="line">                [<span class="number">114.78515624999999</span>,<span class="number">35.209721645221386</span>],</span><br><span class="line">                [<span class="number">101.6455078125</span>,<span class="number">35.209721645221386</span>],</span><br><span class="line">                [<span class="number">101.6455078125</span>,<span class="number">27.68352808378776</span>]</span><br><span class="line">            ]   </span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            [</span><br><span class="line">                [<span class="number">104.2822265625</span>,<span class="number">30.107117887092357</span>],</span><br><span class="line">                [<span class="number">108.896484375</span>,<span class="number">30.107117887092357</span>],</span><br><span class="line">                [<span class="number">108.896484375</span>,<span class="number">33.76088200086917</span>],</span><br><span class="line">                [<span class="number">104.2822265625</span>,<span class="number">33.76088200086917</span>],</span><br><span class="line">                [<span class="number">104.2822265625</span>,<span class="number">30.107117887092357</span>]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="webp-162911413025724" alt="img" style="zoom:100%;" /><p>两个镶套的多边形</p><h4 id="type-3-有孔洞的多边形"><a href="#type-3-有孔洞的多边形" class="headerlink" title="type 3 有孔洞的多边形"></a>type 3 有孔洞的多边形</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">&quot;geometry&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;coordinates&quot;</span>:</span><br><span class="line">    [ </span><br><span class="line">        [</span><br><span class="line">            [</span><br><span class="line">                [<span class="number">101.6455078125</span>,<span class="number">27.68352808378776</span>],</span><br><span class="line">                [<span class="number">114.78515624999999</span>,<span class="number">27.68352808378776</span>],</span><br><span class="line">                [<span class="number">114.78515624999999</span>,<span class="number">35.209721645221386</span>],</span><br><span class="line">                [<span class="number">101.6455078125</span>,<span class="number">35.209721645221386</span>],</span><br><span class="line">                [<span class="number">101.6455078125</span>,<span class="number">27.68352808378776</span>]</span><br><span class="line">                </span><br><span class="line">          </span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                [<span class="number">104.2822265625</span>,<span class="number">30.107117887092357</span>],</span><br><span class="line">                [<span class="number">108.896484375</span>,<span class="number">30.107117887092357</span>],</span><br><span class="line">                [<span class="number">108.896484375</span>,<span class="number">33.76088200086917</span>],</span><br><span class="line">                [<span class="number">104.2822265625</span>,<span class="number">33.76088200086917</span>],</span><br><span class="line">                [<span class="number">104.2822265625</span>,<span class="number">30.107117887092357</span>]</span><br><span class="line">            </span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="webp" alt="img" style="zoom:100%;" /><p>有孔洞的多边形</p><p>可以仔细去品味type2和type3的区别。它们对应的kml表达区别是比较大的。</p><h3 id="GeometryCollection"><a href="#GeometryCollection" class="headerlink" title="GeometryCollection"></a>GeometryCollection</h3><p>GeometryCollection是多种基本地理要素的集合，就是里面可以包含点、线、面要素。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;GeometryCollection&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;geometries&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">         <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Point&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;coordinates&quot;</span>: [<span class="number">108.62</span>, <span class="number">31.02819</span>]</span><br><span class="line">         &#125;, &#123;</span><br><span class="line">         <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;LineString&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;coordinates&quot;</span>: [[<span class="number">108.896484375</span>,<span class="number">30.1071178870</span>],</span><br><span class="line">          [<span class="number">108.2184375</span>,<span class="number">30.91717870</span>],</span><br><span class="line">          [<span class="number">109.5184375</span>,<span class="number">31.2175780</span>]]</span><br><span class="line">         &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GeometryCollection不需要放在FeatureCollection里：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;FeatureCollection&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>geojson里面还有其他标签表达其他的属性，如外包矩形等，其中特别重要的是坐标系统，一般里面的坐标默认为WGS84，当然也可以是其他坐标系统的坐标，但是要标识。这部分内容之后再补充了。</p><p>更具体的内容可以参考<a href="https://links.jianshu.com/go?to=https://tools.ietf.org/html/rfc7946">rfc7946</a>。</p><p>欢迎关注本人公众号，有更多有趣内容和资料：</p><img src="2473543-a07a806b9ea5f9f9.webp" alt="2473543-a07a806b9ea5f9f9" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL地理空间查询——备忘录</title>
      <link href="/2021/8/MySQL%E5%9C%B0%E7%90%86%E7%A9%BA%E9%97%B4%E6%9F%A5%E8%AF%A2%E2%80%94%E2%80%94%E5%A4%87%E5%BF%98%E5%BD%95/"/>
      <url>/2021/8/MySQL%E5%9C%B0%E7%90%86%E7%A9%BA%E9%97%B4%E6%9F%A5%E8%AF%A2%E2%80%94%E2%80%94%E5%A4%87%E5%BF%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<ol><li><p><a href="https://developer.aliyun.com/article/228263">PostgreSQL 空间st_contains，st_within空间包含搜索优化 - 降IO和降CPUboundbox</a></p></li><li><p><a href="https://desktop.arcgis.com/zh-cn/arcmap/10.3/manage-data/using-sql-with-gdbs/st-contains.htm">ST_Contains函数-Oracle 、 PostgreSQL 以及 SQLITE，此文有很多函数解析和应用实例</a></p></li><li><p><a href="https://blog.csdn.net/upcdxlq/article/details/79505257">使用Sqlite和Spatialite</a></p></li><li><p><a href="https://gis.stackexchange.com/questions/335898/why-does-the-addgeometrycolumn-function-not-exist-in-rsqlite">Sqlite使用Spatial扩展的方法</a></p></li><li><p><a href="https://zoomadmin.com/HowToInstall/UbuntuPackage/libsqlite3-mod-spatialite">linux中如何安装Spatial</a></p></li><li><p><a href="https://stackoverflow.com/questions/29751765/spatialite-with-python-2-and-3">windows中如何安装Spatial，并在python中使用</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql或者Postgresql判断一个点是否存在于MULTIPOLYGON(多多边形)</title>
      <link href="/2021/8/Mysql%E6%88%96%E8%80%85Postgresql%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E7%82%B9%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E4%BA%8EMULTIPOLYGON%20%E5%A4%9A%E5%A4%9A%E8%BE%B9%E5%BD%A2/"/>
      <url>/2021/8/Mysql%E6%88%96%E8%80%85Postgresql%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E7%82%B9%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E4%BA%8EMULTIPOLYGON%20%E5%A4%9A%E5%A4%9A%E8%BE%B9%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Postgresql"><a href="#Postgresql" class="headerlink" title="Postgresql"></a>Postgresql</h1><p>转载自：<code>https://blog.csdn.net/weixin_47553445/article/details/115268077</code></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ST_Contains( ST_GeomFromText(&#x27;这里放需要查找的MULTIPOLYGON&#x27;),st_point(103.2366313,28.81767612))</span><br></pre></td></tr></table></figure><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ST_Contains( ST_GeomFromText(</span><br><span class="line">&#x27;MULTIPOLYGON(((103.236631342762 28.8176761290501,103.223402196754 28.8067721559103,103.209070714842 28.8142367294416,103.180091207643 28.798947455161,103.14654213721 28.824723076309,103.130331635197 28.828001337192,103.134297395409 28.8452254641839,103.167231778324 28.8643948670295,103.176539598724 28.8840813692598,103.169919000262 28.9045950607135,103.172633909627 28.932211552721,103.146715816082 28.9448446028962,103.13471930785 28.9692321042783,103.150374074704 28.9703423083509,103.161580849577 28.9891424738461,103.15734975159 29.0005456111911,103.177684162294 29.032308821395,103.176350962327 29.0694099108388,103.160365421227 29.0944466696781,103.180453467154 29.1056188206521,103.2017136031 29.1071235950779,103.201687387863 29.0940476602714,103.191523992039 29.0799538880615,103.199963856947 29.0731856649865,103.219618568142 29.0694447325884,103.227025387212 29.0507195660552,103.259157118007 29.0312680863532,103.281320228146 28.996955444738,103.274604182837 28.9814130607642,103.25969996678 28.9740033773541,103.245668694754 28.9457143516361,103.251277767255 28.9258500057732,103.245698980324 28.915184451901,103.272321285299 28.8964177393872,103.246358179786 28.870089342749,103.228214409667 28.8654235673438,103.236631342762 28.8176761290501))) &#x27;</span><br><span class="line">),st_point(103.2366313,28.81767612))</span><br></pre></td></tr></table></figure><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><img src="20210327171152526.png" alt="运行结果" style="zoom:100%;" /><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ol><li>st_point函数中,经度纬度不能是字符串类型</li><li>ST_GeomFromText函数中的MULTIPOLYGON为geom空间函数通过<br>sT_AsText函数转换得来，不需要二次处理。</li><li>愿大家永不脱发！！！</li></ol><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>转载自：<a href="https://www.cnblogs.com/TTonly/p/12737780.html">https://www.cnblogs.com/TTonly/p/12737780.html</a></p><p>MySQL5.6中查询多边形包含点情况（ST_Contains、ST_Within）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SET @x = 121;</span><br><span class="line">SET @y = 30;  </span><br><span class="line">-- SET @point = CONCAT(&#x27;POINT(&#x27;,@x,&#x27; &#x27;,@y,&#x27;)&#x27;); </span><br><span class="line">set @point= Point(@x,@y);</span><br><span class="line">set @geometry=ST_GeomFromText(&#x27;POLYGON((121 30, 121 30, ..., 121 30, 121 30))&#x27;);</span><br><span class="line">SELECT ST_Contains(@geometry,@point);//面包含点</span><br><span class="line">SELECT ST_Within(@point, @geometry);//点在面</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/zshtiger2414/article/details/77975958">https://blog.csdn.net/zshtiger2414/article/details/77975958</a><br><a href="https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html#function_st-overlaps">https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html#function_st-overlaps</a></p>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> MYSQL </tag>
            
            <tag> POSTGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>geojson对象与polygon_wkt、wkb对象（MySQL等数据库中的对象）互转</title>
      <link href="/2021/8/geojson%E5%AF%B9%E8%B1%A1%E4%B8%8Epolygon_wkt%20%20wkb%E5%AF%B9%E8%B1%A1%EF%BC%88mysql%E7%AD%89%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%89%E4%BA%92%E8%BD%AC/"/>
      <url>/2021/8/geojson%E5%AF%B9%E8%B1%A1%E4%B8%8Epolygon_wkt%20%20wkb%E5%AF%B9%E8%B1%A1%EF%BC%88mysql%E7%AD%89%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%89%E4%BA%92%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<p>来源：<a href="https://gist.github.com/drmalex07/5a54fc4f1db06a66679e">https://gist.github.com/drmalex07/5a54fc4f1db06a66679e</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> geojson</span><br><span class="line"><span class="keyword">from</span> shapely.geometry <span class="keyword">import</span> shape</span><br><span class="line"> </span><br><span class="line">o = &#123;</span><br><span class="line">   <span class="string">&quot;coordinates&quot;</span>: [[[<span class="number">23.314208</span>, <span class="number">37.768469</span>], [<span class="number">24.039306</span>, <span class="number">37.768469</span>], [<span class="number">24.039306</span>, <span class="number">38.214372</span>], [<span class="number">23.314208</span>, <span class="number">38.214372</span>], [<span class="number">23.314208</span>, <span class="number">37.768469</span>]]], </span><br><span class="line">   <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Polygon&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">s = json.dumps(o)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Convert to geojson.geometry.Polygon</span></span><br><span class="line">g1 = geojson.loads(s)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Feed to shape() to convert to shapely.geometry.polygon.Polygon</span></span><br><span class="line"><span class="comment"># This will invoke its __geo_interface__ (https://gist.github.com/sgillies/2217756)</span></span><br><span class="line">g2 = shape(g1)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Now it&#x27;s very easy to get a WKT/WKB representation</span></span><br><span class="line">g2.wkt</span><br><span class="line">g2.wkb</span><br><span class="line"><span class="keyword">import</span> geojson</span><br><span class="line"><span class="keyword">import</span> shapely.wkt</span><br><span class="line"> </span><br><span class="line">s = <span class="string">&#x27;&#x27;&#x27;POLYGON ((23.314208 37.768469, 24.039306 37.768469, 24.039306 38.214372, 23.314208 38.214372, 23.314208 37.768469))&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Convert to a shapely.geometry.polygon.Polygon object</span></span><br><span class="line">g1 = shapely.wkt.loads(s)</span><br><span class="line"> </span><br><span class="line">g2 = geojson.Feature(geometry=g1, properties=&#123;&#125;)</span><br><span class="line"> </span><br><span class="line">g2.geometry</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> GIS </tag>
            
            <tag> MYSQL </tag>
            
            <tag> geojson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断点是否在多边形内（check is the point in polygon）</title>
      <link href="/2021/8/%E5%88%A4%E6%96%AD%E7%82%B9%E6%98%AF%E5%90%A6%E5%9C%A8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%86%85%EF%BC%88check%20is%20the%20point%20in%20polygon%EF%BC%89/"/>
      <url>/2021/8/%E5%88%A4%E6%96%AD%E7%82%B9%E6%98%AF%E5%90%A6%E5%9C%A8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%86%85%EF%BC%88check%20is%20the%20point%20in%20polygon%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一（参考Python一行代码处理地理围栏）"><a href="#方法一（参考Python一行代码处理地理围栏）" class="headerlink" title="方法一（参考Python一行代码处理地理围栏）"></a>方法一（参考<a href="https://www.icode9.com/content-1-92489.html">Python一行代码处理地理围栏</a>）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> shapely.geometry <span class="keyword">import</span> Point</span><br><span class="line"><span class="keyword">from</span> shapely.geometry.polygon <span class="keyword">import</span> Polygon</span><br><span class="line"> </span><br><span class="line">polygon_data= [[<span class="number">114.3458104133606</span>,<span class="number">30.476167529462785</span>],[<span class="number">114.34512376785278</span>,<span class="number">30.475575748963195</span>],[<span class="number">114.34576749801636</span>,<span class="number">30.474540124433936</span>],[<span class="number">114.3467652797699</span>,<span class="number">30.475363076967565</span>],[<span class="number">114.34693694114685</span>,<span class="number">30.476102803645833</span>],[<span class="number">114.3458104133606</span>,<span class="number">30.476167529462785</span>]]</span><br><span class="line">          </span><br><span class="line">point1 = Point([<span class="number">114.34605717658997</span>,<span class="number">30.475584995561178</span>])</span><br><span class="line">point2 = Point([<span class="number">114.346604347229</span>,<span class="number">30.476518897432545</span>])</span><br><span class="line">polygon = Polygon(polygon_data)</span><br><span class="line"><span class="built_in">print</span>(polygon.contains(point1))</span><br><span class="line"><span class="built_in">print</span>(polygon.contains(point2))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="方法二-光线追踪"><a href="#方法二-光线追踪" class="headerlink" title="方法二 光线追踪"></a>方法二 光线追踪</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_inside_sm</span>(<span class="params">polygon, point</span>):</span></span><br><span class="line">    length = <span class="built_in">len</span>(polygon)-<span class="number">1</span></span><br><span class="line">    dy2 = point[<span class="number">1</span>] - polygon[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    intersections = <span class="number">0</span></span><br><span class="line">    ii = <span class="number">0</span></span><br><span class="line">    jj = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> ii&lt;length:</span><br><span class="line">        dy  = dy2</span><br><span class="line">        dy2 = point[<span class="number">1</span>] - polygon[jj][<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># consider only lines which are not completely above/bellow/right from the point</span></span><br><span class="line">        <span class="keyword">if</span> dy*dy2 &lt;= <span class="number">0.0</span> <span class="keyword">and</span> (point[<span class="number">0</span>] &gt;= polygon[ii][<span class="number">0</span>] <span class="keyword">or</span> point[<span class="number">0</span>] &gt;= polygon[jj][<span class="number">0</span>]):</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># non-horizontal line</span></span><br><span class="line">            <span class="keyword">if</span> dy&lt;<span class="number">0</span> <span class="keyword">or</span> dy2&lt;<span class="number">0</span>:</span><br><span class="line">                F = dy*(polygon[jj][<span class="number">0</span>] - polygon[ii][<span class="number">0</span>])/(dy-dy2) + polygon[ii][<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> point[<span class="number">0</span>] &gt; F: <span class="comment"># if line is left from the point - the ray moving towards left, will intersect it</span></span><br><span class="line">                    intersections += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> point[<span class="number">0</span>] == F: <span class="comment"># point on line</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">            <span class="comment"># point on upper peak (dy2=dx2=0) or horizontal line (dy=dy2=0 and dx*dx2&lt;=0)</span></span><br><span class="line">            <span class="keyword">elif</span> dy2==<span class="number">0</span> <span class="keyword">and</span> (point[<span class="number">0</span>]==polygon[jj][<span class="number">0</span>] <span class="keyword">or</span> (dy==<span class="number">0</span> <span class="keyword">and</span> (point[<span class="number">0</span>]-polygon[ii][<span class="number">0</span>])*(point[<span class="number">0</span>]-polygon[jj][<span class="number">0</span>])&lt;=<span class="number">0</span>)):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        ii = jj</span><br><span class="line">        jj += <span class="number">1</span></span><br><span class="line">    <span class="comment">#print &#x27;intersections =&#x27;, intersections</span></span><br><span class="line">    <span class="keyword">return</span> intersections &amp; <span class="number">1</span>  </span><br><span class="line"> </span><br><span class="line">polygon_data= [[<span class="number">114.3458104133606</span>,<span class="number">30.476167529462785</span>],[<span class="number">114.34512376785278</span>,<span class="number">30.475575748963195</span>],[<span class="number">114.34576749801636</span>,<span class="number">30.474540124433936</span>],[<span class="number">114.3467652797699</span>,<span class="number">30.475363076967565</span>],[<span class="number">114.34693694114685</span>,<span class="number">30.476102803645833</span>],[<span class="number">114.3458104133606</span>,<span class="number">30.476167529462785</span>]]</span><br><span class="line">points = [[<span class="number">114.34605717658997</span>,<span class="number">30.475584995561178</span>],[<span class="number">114.346604347229</span>,<span class="number">30.476518897432545</span>]]</span><br><span class="line"><span class="keyword">for</span> point <span class="keyword">in</span> points:</span><br><span class="line">    x = is_inside_sm(polygon_data,point)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p><a href="https://stackoverflow.com/a/66189882">参考一：Python一行代码处理地理围栏</a><br><a href="https://stackoverflow.com/a/66189882">参考二：Python中检查点是否在多边形内，哪种方法是最快的</a></p><p><a href="https://github.com/sasamil/PointInPolygon_Py">参考二中提到的最快算法来源 Github源码</a></p>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python计算坐标集的中心点坐标</title>
      <link href="/2021/8/Python%E8%AE%A1%E7%AE%97%E5%9D%90%E6%A0%87%E9%9B%86%E7%9A%84%E4%B8%AD%E5%BF%83%E7%82%B9%E5%9D%90%E6%A0%87/"/>
      <url>/2021/8/Python%E8%AE%A1%E7%AE%97%E5%9D%90%E6%A0%87%E9%9B%86%E7%9A%84%E4%B8%AD%E5%BF%83%E7%82%B9%E5%9D%90%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p><a href="https://stackoverflow.com/a/68503006">https://stackoverflow.com/a/68503006</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_centroid</span>(<span class="params">points</span>):</span></span><br><span class="line"> </span><br><span class="line">    x = points[:,<span class="number">0</span>]</span><br><span class="line">    y = points[:,<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Solving for polygon signed area</span></span><br><span class="line">    A = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(x):</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> == <span class="built_in">len</span>(x):</span><br><span class="line">            A += (x[i]*y[<span class="number">0</span>] - x[<span class="number">0</span>]*y[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            A += (x[i]*y[i+<span class="number">1</span>] - x[i+<span class="number">1</span>]*y[i])</span><br><span class="line">    A = A/<span class="number">2</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">#solving x of centroid</span></span><br><span class="line">    Cx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(x):</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> == <span class="built_in">len</span>(x):</span><br><span class="line">            Cx += (x[i]+x[<span class="number">0</span>]) * ( (x[i]*y[<span class="number">0</span>]) - (x[<span class="number">0</span>]*y[i]) )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Cx += (x[i]+x[i+<span class="number">1</span>]) * ( (x[i]*y[i+<span class="number">1</span>]) - (x[i+<span class="number">1</span>]*y[i]) )</span><br><span class="line">    Cx = Cx/(<span class="number">6</span>*A)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#solving y of centroid</span></span><br><span class="line">    Cy = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i , value <span class="keyword">in</span> <span class="built_in">enumerate</span>(y):</span><br><span class="line">        <span class="keyword">if</span> i+<span class="number">1</span> == <span class="built_in">len</span>(x):</span><br><span class="line">            Cy += (y[i]+y[<span class="number">0</span>]) * ( (x[i]*y[<span class="number">0</span>]) - (x[<span class="number">0</span>]*y[i]) )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Cy += (y[i]+y[i+<span class="number">1</span>]) * ( (x[i]*y[i+<span class="number">1</span>]) - (x[i+<span class="number">1</span>]*y[i]) )</span><br><span class="line">    Cy = Cy/(<span class="number">6</span>*A)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> Cx, Cy</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">points = np.array([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1.1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp from select语法实例</title>
      <link href="/2021/8/CSharp%E4%B8%ADfrom%20select%E8%AF%AD%E6%B3%95%E5%AE%9E%E4%BE%8B/"/>
      <url>/2021/8/CSharp%E4%B8%ADfrom%20select%E8%AF%AD%E6%B3%95%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://bbs.csdn.net/topics/392903084">https://bbs.csdn.net/topics/392903084</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;            </span><br><span class="line">            <span class="built_in">string</span> json = <span class="string">&quot;[&#123;\&quot;Groupid\&quot;: \&quot;1\&quot;,\&quot;groupnum\&quot;: \&quot;9005\&quot;,\&quot;groupname\&quot;: \&quot;调度中心\&quot;,\&quot;type\&quot;: \&quot;1\&quot;,\&quot;dnsprefix\&quot;: \&quot;\&quot;,\&quot;islocal\&quot;: \&quot;1\&quot;,\&quot;canshowall\&quot;: \&quot;0\&quot;,\&quot;user\&quot;: [],\&quot;group\&quot;: [&#123;\&quot;Groupid\&quot;: \&quot;54\&quot;,\&quot;groupnum\&quot;: \&quot;66000\&quot;,\&quot;groupname\&quot;: \&quot;大唐移动\&quot;,\&quot;type\&quot;: \&quot;0\&quot;,\&quot;dnsprefix\&quot;: \&quot;\&quot;,\&quot;islocal\&quot;: \&quot;1\&quot;,\&quot;canshowall\&quot;: \&quot;1\&quot;,\&quot;user\&quot;: [],\&quot;group\&quot;: [&#123;\&quot;Groupid\&quot;: \&quot;55\&quot;,\&quot;groupnum\&quot;: \&quot;67000\&quot;,\&quot;groupname\&quot;: \&quot;大唐移动1\&quot;,\&quot;type\&quot;: \&quot;1\&quot;,\&quot;dnsprefix\&quot;: \&quot;\&quot;,\&quot;islocal\&quot;: \&quot;1\&quot;,\&quot;canshowall\&quot;: \&quot;1\&quot;,\&quot;user\&quot;: [],\&quot;group\&quot;: []&#125;]        &#125;,&#123;\&quot;Groupid\&quot;: \&quot;66\&quot;,\&quot;groupnum\&quot;: \&quot;66000\&quot;,\&quot;groupname\&quot;: \&quot;大唐联通\&quot;,\&quot;type\&quot;: \&quot;0\&quot;,\&quot;dnsprefix\&quot;: \&quot;\&quot;,\&quot;islocal\&quot;: \&quot;1\&quot;,\&quot;canshowall\&quot;: \&quot;1\&quot;,\&quot;user\&quot;: [],\&quot;group\&quot;: [&#123;\&quot;Groupid\&quot;: \&quot;67\&quot;,\&quot;groupnum\&quot;: \&quot;67000\&quot;,\&quot;groupname\&quot;: \&quot;大唐联通1\&quot;,\&quot;type\&quot;: \&quot;1\&quot;,\&quot;dnsprefix\&quot;: \&quot;\&quot;,\&quot;islocal\&quot;: \&quot;1\&quot;,\&quot;canshowall\&quot;: \&quot;1\&quot;,\&quot;user\&quot;: [],\&quot;group\&quot;: []&#125;]        &#125;]&#125;,&#123;\&quot;Groupid\&quot;: \&quot;1\&quot;,\&quot;groupnum\&quot;: \&quot;9005\&quot;,\&quot;groupname\&quot;: \&quot;调度中心\&quot;,\&quot;type\&quot;: \&quot;1\&quot;,\&quot;dnsprefix\&quot;: \&quot;\&quot;,\&quot;islocal\&quot;: \&quot;1\&quot;,\&quot;canshowall\&quot;: \&quot;0\&quot;,\&quot;user\&quot;: [],\&quot;group\&quot;: [&#123;\&quot;Groupid\&quot;: \&quot;54\&quot;,\&quot;groupnum\&quot;: \&quot;66000\&quot;,\&quot;groupname\&quot;: \&quot;大唐移动\&quot;,\&quot;type\&quot;: \&quot;0\&quot;,\&quot;dnsprefix\&quot;: \&quot;\&quot;,\&quot;islocal\&quot;: \&quot;1\&quot;,\&quot;canshowall\&quot;: \&quot;1\&quot;,\&quot;user\&quot;: [],\&quot;group\&quot;: [&#123;\&quot;Groupid\&quot;: \&quot;55\&quot;,\&quot;groupnum\&quot;: \&quot;67000\&quot;,\&quot;groupname\&quot;: \&quot;大唐移动1\&quot;,\&quot;type\&quot;: \&quot;1\&quot;,\&quot;dnsprefix\&quot;: \&quot;\&quot;,\&quot;islocal\&quot;: \&quot;1\&quot;,\&quot;canshowall\&quot;: \&quot;1\&quot;,\&quot;user\&quot;: [],\&quot;group\&quot;: []&#125;]        &#125;,&#123;\&quot;Groupid\&quot;: \&quot;66\&quot;,\&quot;groupnum\&quot;: \&quot;66000\&quot;,\&quot;groupname\&quot;: \&quot;大唐联通\&quot;,\&quot;type\&quot;: \&quot;0\&quot;,\&quot;dnsprefix\&quot;: \&quot;\&quot;,\&quot;islocal\&quot;: \&quot;1\&quot;,\&quot;canshowall\&quot;: \&quot;1\&quot;,\&quot;user\&quot;: [],\&quot;group\&quot;: [&#123;\&quot;Groupid\&quot;: \&quot;67\&quot;,\&quot;groupnum\&quot;: \&quot;67000\&quot;,\&quot;groupname\&quot;: \&quot;大唐联通1\&quot;,\&quot;type\&quot;: \&quot;1\&quot;,\&quot;dnsprefix\&quot;: \&quot;\&quot;,\&quot;islocal\&quot;: \&quot;1\&quot;,\&quot;canshowall\&quot;: \&quot;1\&quot;,\&quot;user\&quot;: [],\&quot;group\&quot;: []&#125;]        &#125;]&#125;]&quot;</span>;</span><br><span class="line">            TreeNode nodes = <span class="keyword">new</span> TreeNode(<span class="string">&quot;自定义总节点名称&quot;</span>);</span><br><span class="line">            AddChild(nodes, json,<span class="string">&quot;groupname&quot;</span>,<span class="string">&quot;group&quot;</span>);<span class="comment">//groupname替换成你的consult_mold_name，group替换成你的son就行了</span></span><br><span class="line">            treeView1.Nodes.Add(nodes);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddChild</span>(<span class="params">TreeNode nodes,<span class="built_in">string</span> json,<span class="built_in">string</span> fatherName,<span class="built_in">string</span> sonName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            JArray array = JArray.Parse(json);</span><br><span class="line">            <span class="keyword">var</span> list = <span class="keyword">from</span> obj <span class="keyword">in</span> array.Children()</span><br><span class="line">                        <span class="keyword">select</span> <span class="keyword">new</span> &#123; name=obj[fatherName],son= obj[sonName] &#125;;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode node = <span class="keyword">new</span> TreeNode(item.name.ToString());</span><br><span class="line">                AddChild(node, item.son.ToString(),fatherName,sonName);</span><br><span class="line">                nodes.Nodes.Add(node);</span><br><span class="line">            &#125;                        </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超大JSON文件浏览工具</title>
      <link href="/2021/8/%E8%B6%85%E5%A4%A7JSON%E6%96%87%E4%BB%B6%E6%B5%8F%E8%A7%88%E5%B7%A5%E5%85%B7/"/>
      <url>/2021/8/%E8%B6%85%E5%A4%A7JSON%E6%96%87%E4%BB%B6%E6%B5%8F%E8%A7%88%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/WelliSolutions/HugeJsonViewer">https://github.com/WelliSolutions/HugeJsonViewer</a></p><h2 id="2021年8月6日17点更新"><a href="#2021年8月6日17点更新" class="headerlink" title="2021年8月6日17点更新"></a>2021年8月6日17点更新</h2><p>这个更好：<code>Dadroit JSON Viewer</code></p>]]></content>
      
      
      <categories>
          
          <category> 软件收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步并发aiohttp</title>
      <link href="/2021/8/%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91aiohttp/"/>
      <url>/2021/8/%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91aiohttp/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> ClientSession,</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint <span class="keyword">as</span> <span class="built_in">print</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://api.panhvhg.xyz/api/v3/channels/968/connect&#x27;</span></span><br><span class="line">url=<span class="string">&#x27;https://api.panhvhg.xyz/api/v3/channels/0/connect&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;api.panhvhg.xyz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;api-version&#x27;</span>: <span class="string">&#x27;v3.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;request_raw_response_body_tag_header&#x27;</span>: <span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh-CN&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;device-identifier&#x27;</span>: <span class="string">&#x27;6961EB763D32FDD1116C00092E0B9365&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;device-type&#x27;</span>: <span class="string">&#x27;ANDROID&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;product-identifier&#x27;</span>: <span class="string">&#x27;panda&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;authorization&#x27;</span>: <span class="string">&#x27;Bearer eyJleHAiOjE3MTM4OTc1NjcsInVzZXJJZCI6MzUyNzQ3NjksImRldmljZUlkIjozNTIzNDgxMCwiaWF0IjoxNjI3NDk3NTY3fQ.AMxXjoPi1HdPTlQ9h3eUq8VFpS40kLDvKTVCt787HQA&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;okhttp/4.9.0 android/10(ufkckcuuuccucfc) panda/5.5.0(91)&#x27;</span>,</span><br><span class="line">   <span class="comment"># &#x27;x-timestamp&#x27;: &#x27;1627507529&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;content-length&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accept-encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">make_request</span>(<span class="params">client</span>):</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> client.post(url, headers=headers) <span class="keyword">as</span> resp:</span><br><span class="line">        s=<span class="keyword">await</span> resp.json()</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    cons = TCPConnector(limit=<span class="number">11</span>) <span class="comment"># 限制QOS，具体以网速不同而不同，需要测试，同时，需要先导入aiohttp.TCPConnector模块</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> ClientSession(connector=cons) <span class="keyword">as</span> client:</span><br><span class="line">        starttime = time.time()</span><br><span class="line">        tasks = [asyncio.create_task(make_request(client)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">        s = <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line">        endtime = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;QOS:<span class="subst">&#123;<span class="built_in">len</span>(tasks)/(starttime-endtime)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    s=asyncio.run(main()) <span class="comment"># jupyter环境使用await main()</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;发送10次请求，耗时：<span class="subst">&#123;end - start&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests、aiohttp、httpx对比</title>
      <link href="/2021/8/requests%E3%80%81aiohttp%E3%80%81httpx%E5%AF%B9%E6%AF%94/"/>
      <url>/2021/8/requests%E3%80%81aiohttp%E3%80%81httpx%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<p>来源：<a href="https://learnku.com/articles/54989">https://learnku.com/articles/54989</a><br>在 Python 众多的 HTTP 客户端中，最有名的莫过于 <code>requests</code>、<code>aiohttp</code> 和 <code>httpx</code>。在不借助其他第三方库的情况下，<code>requests</code> 只能发送同步请求；<code>aiohttp</code> 只能发送异步请求；<code>httpx</code> 既能发送同步请求，又能发送异步请求。</p><p>所谓的同步请求，是指在单进程单线程的代码中，发起一次请求后，在收到返回结果之前，不能发起下一次请求。所谓异步请求，是指在单进程单线程的代码中，发起一次请求后，在等待网站返回结果的时间里，可以继续发送更多请求。</p><p>今天我们来一个浅度测评，仅仅以多次发送 GET 请求这个角度来对比这三个库的性能。</p><p>当然测试结果与网速有关，不过在同一段时间的同一个网络测试出来，还是能看得出来问题的。</p><h3 id="requests-发送请求"><a href="#requests-发送请求" class="headerlink" title="requests 发送请求"></a>requests 发送请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">headers = headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    res = requests.get(url,headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(res.status_code)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="httpx-发送请求"><a href="#httpx-发送请求" class="headerlink" title="httpx 发送请求"></a>httpx 发送请求</h3><h4 id="使用-httpx-发送同步请求："><a href="#使用-httpx-发送同步请求：" class="headerlink" title="使用 httpx 发送同步请求："></a>使用 httpx 发送同步请求：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">headers = headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    res = httpx.get(url,headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(res.status_code)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">      main()</span><br></pre></td></tr></table></figure><blockquote><p>httpx 的同步模式与 requests 代码重合度 99%，只需要把 requests 改成 httpx 即可正常运行。</p></blockquote><h4 id="使用-httpx-发送异步请求："><a href="#使用-httpx-发送异步请求：" class="headerlink" title="使用 httpx 发送异步请求："></a>使用 httpx 发送异步请求：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> httpx.AsyncClient() <span class="keyword">as</span> client:</span><br><span class="line">        resp = <span class="keyword">await</span> client.get(url, headers=headers)</span><br><span class="line">        <span class="built_in">print</span>(resp.status_code)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><h3 id="aiohttp-发送请求"><a href="#aiohttp-发送请求" class="headerlink" title="aiohttp 发送请求"></a>aiohttp 发送请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> client:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> client.get(url, headers=headers) <span class="keyword">as</span> resp:</span><br><span class="line">            <span class="built_in">print</span>(resp.text)</span><br><span class="line">            <span class="built_in">print</span>(resp.status)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><blockquote><p>aiohttp 的代码与 httpx 异步模式的代码重合度 90%，只不过把 AsyncClient 换成了 ClientSession</p></blockquote><p>使用 requests.post 每次都会创建新的连接，速度较慢。而如果首先初始化一个 Session，那么 requests 会保持连接，从而大大提高请求速度。所以在这次测评中，我们分别对两种情况进行测试</p><h3 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h3><h4 id="requests-不保持连接"><a href="#requests-不保持连接" class="headerlink" title="requests 不保持连接"></a>requests 不保持连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_request</span>():</span></span><br><span class="line">    resp = requests.get(url, headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(resp.status_code)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        make_request()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;发送100次请求，耗时：<span class="subst">&#123;end - start&#125;</span>&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>发送 100 次请求，耗时：10.295854091644287</p></blockquote><h4 id="requests-保持连接"><a href="#requests-保持连接" class="headerlink" title="requests 保持连接"></a>requests 保持连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">session = requests.session()</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_request</span>():</span></span><br><span class="line">    resp = session.get(url, headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(resp.status_code)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        make_request()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;发送100次请求，耗时：<span class="subst">&#123;end - start&#125;</span>&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>发送 100 次请求，耗时：4.679062128067017，很明显快了接近 6s</p></blockquote><h3 id="httpx"><a href="#httpx" class="headerlink" title="httpx"></a>httpx</h3><h4 id="httpx-同步模式"><a href="#httpx-同步模式" class="headerlink" title="httpx 同步模式"></a>httpx 同步模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_request</span>():</span></span><br><span class="line">    resp = httpx.get(url, headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(resp.status_code)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        make_request()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;发送100次请求，耗时：<span class="subst">&#123;end - start&#125;</span>&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>发送 100 次请求，耗时：16.60569405555725</p></blockquote><h4 id="httpx-异步模式：只创建一次-httpx-AsyncClient"><a href="#httpx-异步模式：只创建一次-httpx-AsyncClient" class="headerlink" title="httpx 异步模式：只创建一次 httpx.AsyncClient"></a>httpx 异步模式：只创建一次 httpx.AsyncClient</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">make_request</span>(<span class="params">client</span>):</span></span><br><span class="line">    resp = <span class="keyword">await</span> client.get(url, headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(resp.status_code)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> httpx.AsyncClient() <span class="keyword">as</span> client:</span><br><span class="line">        start = time.time()</span><br><span class="line">        tasks = [asyncio.create_task(make_request(client)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">        <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line">        end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;发送100次请求，耗时：<span class="subst">&#123;end - start&#125;</span>&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><blockquote><p>发送 100 次请求，耗时：4.359861135482788</p></blockquote><h4 id="httpx-异步模式：每次都创建-httpx-AsyncClient"><a href="#httpx-异步模式：每次都创建-httpx-AsyncClient" class="headerlink" title="httpx 异步模式：每次都创建 httpx.AsyncClient"></a>httpx 异步模式：每次都创建 httpx.AsyncClient</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">make_request</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> httpx.AsyncClient() <span class="keyword">as</span> client:</span><br><span class="line">        resp = <span class="keyword">await</span> client.get(url, headers=headers)</span><br><span class="line">        <span class="built_in">print</span>(resp.status_code)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    tasks = [asyncio.create_task(make_request()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;发送100次请求，耗时：<span class="subst">&#123;end - start&#125;</span>&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><blockquote><p>发送 100 次请求，耗时：6.378381013870239</p></blockquote><h3 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h3><h4 id="aiohttp：只创建一次-aiohttp-ClientSession"><a href="#aiohttp：只创建一次-aiohttp-ClientSession" class="headerlink" title="aiohttp：只创建一次 aiohttp.ClientSession"></a>aiohttp：只创建一次 aiohttp.ClientSession</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">make_request</span>(<span class="params">client</span>):</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> client.get(url, headers=headers) <span class="keyword">as</span> resp:</span><br><span class="line">        <span class="built_in">print</span>(resp.status)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> client:</span><br><span class="line">        start = time.time()</span><br><span class="line">        tasks = [asyncio.create_task(make_request(client)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">        <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line">        end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;发送100次请求，耗时：<span class="subst">&#123;end - start&#125;</span>&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><blockquote><p>发送 100 次请求，耗时：2.235464334487915</p></blockquote><h4 id="aiohttp：每次都创建-aiohttp-ClientSession"><a href="#aiohttp：每次都创建-aiohttp-ClientSession" class="headerlink" title="aiohttp：每次都创建 aiohttp.ClientSession"></a>aiohttp：每次都创建 aiohttp.ClientSession</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">make_request</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> client:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> client.get(url, headers=headers) <span class="keyword">as</span> resp:</span><br><span class="line">            <span class="built_in">print</span>(resp.status)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    tasks = [asyncio.ensure_future(make_request()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;发送100次请求，耗时：<span class="subst">&#123;end - start&#125;</span>&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><hr><blockquote><p>发送 100 次请求，耗时：2.6662471294403076</p></blockquote><h3 id="请求-100-次速度排名"><a href="#请求-100-次速度排名" class="headerlink" title="请求 100 次速度排名"></a>请求 100 次速度排名</h3><p>aiohttp（只创建一次 client）&gt; aiohttp（每次都创建 client）&gt; httpx 异步 只创建一次只创建一次client &gt; requests.session &gt; httpx 异步 每次都创建每次都创建client &gt; requests &gt; http 异步</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>如果你只发几条请求。那么使用 requests 或者 httpx 的同步模式，代码最简单。</li><li>requests 是否创建一个 session 保持连接，速度差别比较大，在没有反爬的情况下，只追求速度，建议用 requests.session </li><li>如果你要发送很多请求，但是有些地方要发送同步请求，有些地方要发送异步请求，那么使用 httpx 最省事。</li><li>如果你要发送很多请求，并且越快越好，那么使用 aiohttp 最快。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker run 使用v参数时，容器文件不复制到宿主机的情况</title>
      <link href="/2021/8/Docker%20run%20%E4%BD%BF%E7%94%A8v%E5%8F%82%E6%95%B0%E6%97%B6%EF%BC%8C%E5%AE%B9%E5%99%A8%E6%96%87%E4%BB%B6%E4%B8%8D%E5%A4%8D%E5%88%B6%E5%88%B0%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E6%83%85%E5%86%B5/"/>
      <url>/2021/8/Docker%20run%20%E4%BD%BF%E7%94%A8v%E5%8F%82%E6%95%B0%E6%97%B6%EF%BC%8C%E5%AE%B9%E5%99%A8%E6%96%87%E4%BB%B6%E4%B8%8D%E5%A4%8D%E5%88%B6%E5%88%B0%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/moby/moby/issues/17470">https://github.com/moby/moby/issues/17470</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python并发执行循环任务</title>
      <link href="/2021/8/Python%E5%B9%B6%E5%8F%91%E6%89%A7%E8%A1%8C%E5%BE%AA%E7%8E%AF%E4%BB%BB%E5%8A%A1/"/>
      <url>/2021/8/Python%E5%B9%B6%E5%8F%91%E6%89%A7%E8%A1%8C%E5%BE%AA%E7%8E%AF%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>来源:<a href="https://blog.csdn.net/qq_23869697/article/details/84798614">https://blog.csdn.net/qq_23869697/article/details/84798614</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span>(<span class="params">item</span>):</span></span><br><span class="line">    log = _get_logger(item)</span><br><span class="line">    log.info(<span class="string">&quot;item: %s&quot;</span> % item)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line">items = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;bananan&#x27;</span>, <span class="string">&#x27;cake&#x27;</span>, <span class="string">&#x27;dumpling&#x27;</span>]</span><br><span class="line">pool = ThreadPool()</span><br><span class="line">results = pool.<span class="built_in">map</span>(process, items)</span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp中TreeView绑定JSON数据</title>
      <link href="/2021/8/CSharp%E4%B8%ADTreeView%E7%BB%91%E5%AE%9AJSON%E6%95%B0%E6%8D%AE/"/>
      <url>/2021/8/CSharp%E4%B8%ADTreeView%E7%BB%91%E5%AE%9AJSON%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>JSON数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;accepttime&quot;</span>: <span class="number">1600966807</span>,</span><br><span class="line">    <span class="attr">&quot;certificate&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;completetext&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;completetime&quot;</span>: <span class="number">1601010419</span>,</span><br><span class="line">    <span class="attr">&quot;createtime&quot;</span>: <span class="number">1600966807</span>,</span><br><span class="line">    <span class="attr">&quot;deleteflag&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;endtimestr&quot;</span>: <span class="string">&quot;12:00&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gid&quot;</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">&quot;netbarCameraList&quot;</span>: [&#123;</span><br><span class="line">        <span class="attr">&quot;account&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;172.16.36.17&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cameraid&quot;</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="attr">&quot;gid&quot;</span>: <span class="number">42</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;36&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;52358&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;port&quot;</span>: <span class="number">554</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">&quot;netbarname&quot;</span>: <span class="string">&quot;长沙&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;uniacid&quot;</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">&quot;userid&quot;</span>: <span class="number">66</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 绑定树形控件</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;treeView&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strJson&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BindTreeView</span>(<span class="params">TreeView treeView, <span class="built_in">string</span> strJson</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            treeView.Nodes.Clear();</span><br><span class="line">            <span class="keyword">if</span> (IsJsonObject(strJson))<span class="comment">//判断是否字典类型</span></span><br><span class="line">            &#123;</span><br><span class="line">                JObject jo = (JObject)JsonConvert.DeserializeObject(strJson);</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> jo)</span><br><span class="line">                &#123;</span><br><span class="line">                    TreeNode tree;</span><br><span class="line">                    <span class="keyword">if</span> (item.Value.GetType() == <span class="keyword">typeof</span>(JObject))<span class="comment">//判断是否为字典类型</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        tree = <span class="keyword">new</span> TreeNode(item.Key);<span class="comment">//以字典的键为节点名</span></span><br><span class="line">                        AddTreeChildNode(<span class="keyword">ref</span> tree, item.Value.ToString());</span><br><span class="line">                        treeView.Nodes.Add(tree);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (item.Value.GetType() == <span class="keyword">typeof</span>(JArray))</span><br><span class="line">                    &#123;</span><br><span class="line">                        tree = <span class="keyword">new</span> TreeNode(item.Key);</span><br><span class="line">                        AddTreeChildNode(<span class="keyword">ref</span> tree, item.Value.ToString());</span><br><span class="line">                        treeView.Nodes.Add(tree);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        tree = <span class="keyword">new</span> TreeNode(item.Key + <span class="string">&quot;:&quot;</span> + item.Value.ToString());</span><br><span class="line">                        treeView.Nodes.Add(tree);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (IsArray(strJson))<span class="comment">//判断是否为列表类型</span></span><br><span class="line">            &#123;</span><br><span class="line">                JArray ja = (JArray)JsonConvert.DeserializeObject(strJson);</span><br><span class="line">                <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">foreach</span> (JObject item <span class="keyword">in</span> ja)</span><br><span class="line">                &#123;</span><br><span class="line">                    TreeNode tree = <span class="keyword">new</span> TreeNode();</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> itemOb <span class="keyword">in</span> item)</span><br><span class="line">                    &#123;</span><br><span class="line">                        TreeNode treeOb;</span><br><span class="line">                        <span class="keyword">if</span> (itemOb.Value.GetType() == <span class="keyword">typeof</span>(JObject))</span><br><span class="line">                        &#123;</span><br><span class="line">                            treeOb = <span class="keyword">new</span> TreeNode(itemOb.Key);</span><br><span class="line">                            AddTreeChildNode(<span class="keyword">ref</span> treeOb, itemOb.Value.ToString());</span><br><span class="line">                            tree.Nodes.Add(treeOb);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (itemOb.Value.GetType() == <span class="keyword">typeof</span>(JArray))</span><br><span class="line">                        &#123;</span><br><span class="line">                            treeOb = <span class="keyword">new</span> TreeNode(itemOb.Key);</span><br><span class="line">                            AddTreeChildNode(<span class="keyword">ref</span> treeOb, itemOb.Value.ToString());</span><br><span class="line">                            tree.Nodes.Add(treeOb);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            treeOb = <span class="keyword">new</span> TreeNode(itemOb.Key + <span class="string">&quot;:&quot;</span> + itemOb.Value.ToString());</span><br><span class="line">                            tree.Nodes.Add(treeOb);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    treeView.Nodes.Add(tree);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            treeView.ExpandAll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 添加子节点</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;parantNode&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddTreeChildNode</span>(<span class="params"><span class="keyword">ref</span> TreeNode parantNode, <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (IsJsonObject(<span class="keyword">value</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                JObject jo = (JObject)JsonConvert.DeserializeObject(<span class="keyword">value</span>);</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> jo)</span><br><span class="line">                &#123;</span><br><span class="line">                    TreeNode tree;</span><br><span class="line">                    <span class="keyword">if</span> (item.Value.GetType() == <span class="keyword">typeof</span>(JObject))</span><br><span class="line">                    &#123;</span><br><span class="line">                        tree = <span class="keyword">new</span> TreeNode(item.Key);</span><br><span class="line">                        AddTreeChildNode(<span class="keyword">ref</span> tree, item.Value.ToString());</span><br><span class="line">                        parantNode.Nodes.Add(tree);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (item.Value.GetType() == <span class="keyword">typeof</span>(JArray))</span><br><span class="line">                    &#123;</span><br><span class="line">                        tree = <span class="keyword">new</span> TreeNode(item.Key);</span><br><span class="line">                        AddTreeChildNode(<span class="keyword">ref</span> tree, item.Value.ToString());</span><br><span class="line">                        parantNode.Nodes.Add(tree);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        tree = <span class="keyword">new</span> TreeNode(item.Key + <span class="string">&quot;:&quot;</span> + item.Value.ToString());</span><br><span class="line">                        parantNode.Nodes.Add(tree);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (IsArray(<span class="keyword">value</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                JArray ja = (JArray)JsonConvert.DeserializeObject(<span class="keyword">value</span>);</span><br><span class="line">                <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">foreach</span> (JObject item <span class="keyword">in</span> ja)</span><br><span class="line">                &#123;</span><br><span class="line">                    TreeNode tree = <span class="keyword">new</span> TreeNode();</span><br><span class="line">                    parantNode.Nodes.Add(tree);</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> itemOb <span class="keyword">in</span> item)</span><br><span class="line">                    &#123;</span><br><span class="line">                        TreeNode treeOb;</span><br><span class="line">                        <span class="keyword">if</span> (itemOb.Value.GetType() == <span class="keyword">typeof</span>(JObject))</span><br><span class="line">                        &#123;</span><br><span class="line">                            treeOb = <span class="keyword">new</span> TreeNode(itemOb.Key);</span><br><span class="line">                            AddTreeChildNode(<span class="keyword">ref</span> treeOb, itemOb.Value.ToString());</span><br><span class="line">                            tree.Nodes.Add(treeOb);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (itemOb.Value.GetType() == <span class="keyword">typeof</span>(JArray))</span><br><span class="line">                        &#123;</span><br><span class="line">                            treeOb = <span class="keyword">new</span> TreeNode(itemOb.Key);</span><br><span class="line">                            AddTreeChildNode(<span class="keyword">ref</span> treeOb, itemOb.Value.ToString());</span><br><span class="line">                            tree.Nodes.Add(treeOb);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            treeOb = <span class="keyword">new</span> TreeNode(itemOb.Key + <span class="string">&quot;:&quot;</span> + itemOb.Value.ToString());</span><br><span class="line">                            tree.Nodes.Add(treeOb);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>  判断是否JOjbect类型</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsJsonObject</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                JObject ja = JObject.Parse(<span class="keyword">value</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 判断是否JArray类型</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsArray</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                JArray ja = JArray.Parse(<span class="keyword">value</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>效果：<br><img src="2622728873.png" alt="2021-07-19T02:57:58.png" style="zoom:80%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp网络请求</title>
      <link href="/2021/8/CSharp%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
      <url>/2021/8/CSharp%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>已测试成功的<br>使用到的库<code>using System.Net.Http;</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">            client.BaseAddress = <span class="keyword">new</span> Uri(<span class="string">&quot;http://restapi.amap.com&quot;</span>);</span><br><span class="line">            <span class="comment">//client.DefaultRequestHeaders.Add(&quot;User-Agent&quot;, &quot;C# console program&quot;);</span></span><br><span class="line">            client.DefaultRequestHeaders.Accept.Add(<span class="keyword">new</span> MediaTypeWithQualityHeaderValue(<span class="string">&quot;application/json&quot;</span>));</span><br><span class="line">            <span class="keyword">var</span> url = <span class="string">&quot;/v3/geocode/geo?key=5d47448e3c3aceff5db10319829c5450&amp;address=长沙市芙蓉区解放西路长沙市公安局&amp;city=changsha&quot;</span>;</span><br><span class="line">            HttpResponseMessage response = <span class="keyword">await</span> client.GetAsync(url);</span><br><span class="line">            response.EnsureSuccessStatusCode();</span><br><span class="line">            <span class="keyword">var</span> resp = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line">            <span class="comment">//将json字符串解析为json对象</span></span><br><span class="line">            JObject jobj = (JObject)JsonConvert.DeserializeObject(resp);  </span><br><span class="line">            <span class="comment">//访问json对象中的成员</span></span><br><span class="line">            <span class="built_in">string</span> name2 = jobj[<span class="string">&quot;geocodes&quot;</span>][<span class="number">0</span>][<span class="string">&quot;location&quot;</span>].ToString();    </span><br><span class="line">            Console.WriteLine(name2);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>异步：<a href="https://blog.csdn.net/zzulishulei/article/details/77751436">https://blog.csdn.net/zzulishulei/article/details/77751436</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp解析读取JSON</title>
      <link href="/2021/8/CSharp%E8%A7%A3%E6%9E%90%E8%AF%BB%E5%8F%96JSON/"/>
      <url>/2021/8/CSharp%E8%A7%A3%E6%9E%90%E8%AF%BB%E5%8F%96JSON/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/dslobo/article/details/108815969">https://blog.csdn.net/dslobo/article/details/108815969</a></p><h2 id="要读取的json文件内容"><a href="#要读取的json文件内容" class="headerlink" title="要读取的json文件内容"></a>要读取的json文件内容</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;accepttime&quot;</span>: <span class="number">1600966807</span>,</span><br><span class="line">    <span class="attr">&quot;certificate&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;completetext&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;completetime&quot;</span>: <span class="number">1601010419</span>,</span><br><span class="line">    <span class="attr">&quot;createtime&quot;</span>: <span class="number">1600966807</span>,</span><br><span class="line">    <span class="attr">&quot;deleteflag&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;endtimestr&quot;</span>: <span class="string">&quot;12:00&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gid&quot;</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">&quot;netbarCameraList&quot;</span>: [&#123;</span><br><span class="line">        <span class="attr">&quot;account&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;172.16.36.17&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cameraid&quot;</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="attr">&quot;gid&quot;</span>: <span class="number">42</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;36&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;52358&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;port&quot;</span>: <span class="number">554</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">&quot;netbarname&quot;</span>: <span class="string">&quot;36新亚网吧&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;uniacid&quot;</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">&quot;userid&quot;</span>: <span class="number">66</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用到的关键库"><a href="#使用到的关键库" class="headerlink" title="使用到的关键库"></a>使用到的关键库</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json.Linq;</span><br></pre></td></tr></table></figure><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json.Linq;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 读取外部json格式文件</span></span><br><span class="line">            <span class="built_in">string</span> text = File.ReadAllText(<span class="string">@&quot;C:\Users\Administrator\Desktop\111.txt&quot;</span>);</span><br><span class="line">            <span class="built_in">byte</span>[] mybyte = Encoding.UTF8.GetBytes(text);</span><br><span class="line">            <span class="built_in">string</span> aaa = Encoding.UTF8.GetString(mybyte);</span><br><span class="line">            <span class="comment">//Console.WriteLine(aaa); aaa为字符串类型</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            <span class="comment">//将JSON反序列化为.NET对象。</span></span><br><span class="line">            JObject jo1 = (JObject)JsonConvert.DeserializeObject(aaa);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            <span class="comment">//第一层</span></span><br><span class="line">            <span class="built_in">string</span> name = jo1[<span class="string">&quot;netbarname&quot;</span>].ToString();</span><br><span class="line">            Console.WriteLine(name);</span><br><span class="line"> </span><br><span class="line">            <span class="built_in">string</span> netbarCameraList = jo1[<span class="string">&quot;netbarCameraList&quot;</span>].ToString();</span><br><span class="line">            Console.WriteLine(netbarCameraList);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            <span class="comment">//第二层</span></span><br><span class="line">            <span class="built_in">string</span> account = jo1[<span class="string">&quot;netbarCameraList&quot;</span>][<span class="number">0</span>][<span class="string">&quot;account&quot;</span>].ToString();</span><br><span class="line">            Console.WriteLine(account);</span><br><span class="line"> </span><br><span class="line">            <span class="built_in">string</span> address = jo1[<span class="string">&quot;netbarCameraList&quot;</span>][<span class="number">0</span>][<span class="string">&quot;address&quot;</span>].ToString();</span><br><span class="line">            Console.WriteLine(address);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署巡风[xunfeng]</title>
      <link href="/2021/8/%E9%83%A8%E7%BD%B2%E5%B7%A1%E9%A3%8E%5Bxunfeng%5D/"/>
      <url>/2021/8/%E9%83%A8%E7%BD%B2%E5%B7%A1%E9%A3%8E%5Bxunfeng%5D/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/ysrc/xunfeng/blob/master/docs/install/Docker.md">https://github.com/ysrc/xunfeng/blob/master/docs/install/Docker.md</a></p><p>dokcer容器实验摸索结果：</p><ol><li>/opt/xunfeng目录下含配置文件，其中<code>Config.py</code>定义web前端的登录账号密码及数据库端口、账号密码，内容如下</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    ACCOUNT = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">    PASSWORD = <span class="string">&#x27;xunfeng321&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    DB = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">    PORT = <span class="number">65521</span></span><br><span class="line">    DBUSERNAME = <span class="string">&#x27;scan&#x27;</span></span><br><span class="line">    DBPASSWORD = <span class="string">&#x27;scanlol66&#x27;</span></span><br><span class="line">    DBNAME = <span class="string">&#x27;xunfeng&#x27;</span></span><br></pre></td></tr></table></figure><ol><li>/data用于存放MongoDB数据库文件，扫描历史结果、POC漏洞插件设置情况等等都在此。</li></ol><p>为了持久化扫描结果数据，建议将<code>/data</code>目录映射到宿主机</p><p>故启动参数如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=xunfeng \</span><br><span class="line">-p 8118:80 \</span><br><span class="line">-p 2717:65521 \</span><br><span class="line">-v /userdatas/Sandisk/xunfeng:/data \</span><br><span class="line">ysrc/xunfeng:latest</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 安全 </tag>
            
            <tag> 扫描器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWVS扫描器的部署</title>
      <link href="/2021/8/AWVS%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/8/AWVS%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="AWVS14-Docker-https-blog-zygd-site-go-html-u-https-blog-zygd-site-AWVS14-Docker-html"><a href="#AWVS14-Docker-https-blog-zygd-site-go-html-u-https-blog-zygd-site-AWVS14-Docker-html" class="headerlink" title="[AWVS14 Docker](https://blog.zygd.site/go.html?u=https://blog.zygd.site/AWVS14 Docker.html)"></a>[AWVS14 Docker](<a href="https://blog.zygd.site/go.html?u=https://blog.zygd.site/AWVS14">https://blog.zygd.site/go.html?u=https://blog.zygd.site/AWVS14</a> Docker.html)</h1><blockquote><p>注：如认为本破解补丁存在某些后门或转载删版权者，请勿使用！</p><p>由于传播、利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者不为此承担任何责任。</p><p>XRSec 拥有对此文章的修改和解释权如欲转载或传播此文章，必须保证此文章的完整性，包括版权声明等全部内容。未经作者允许，不得任意修改或者增减此文章内容，不得以任何方式将其用于商业目的</p></blockquote><h2 id="INFO"><a href="#INFO" class="headerlink" title="INFO"></a>INFO</h2><p>Version 14 build 14.3.210628104 for Windows, Linux and macOS – 28th June 2021</p><h3 id="Updates"><a href="#Updates" class="headerlink" title="Updates"></a>Updates</h3><ul><li>Target Knowledgebase will be reset when Target Settings are changed</li><li>Updated SSL/TLS Certificate expiry threshold notification from 30 days to 60 days</li></ul><h3 id="Fixes"><a href="#Fixes" class="headerlink" title="Fixes"></a>Fixes</h3><ul><li>Fixed: OWASP compliance report template to not be available in some Editions</li><li>Fixed: Some scripts where not observing Excluded paths configured in Target settings</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip:3443</span><br><span class="line">awvs@awvs.com</span><br><span class="line">Awvs@awvs.com</span><br></pre></td></tr></table></figure><h2 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h2><img src="20210505201037686297.png" alt="image-20210505193332022" style="zoom:80%;" /><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d \</span><br><span class="line">--name awvs \</span><br><span class="line">-p 3443:3443 \</span><br><span class="line">xrsec/awvs:v14</span><br><span class="line"><span class="comment"># registry.cn-hangzhou.aliyuncs.com/xrsec/awvs:v14</span></span><br></pre></td></tr></table></figure><h2 id="BuildFile"><a href="#BuildFile" class="headerlink" title="BuildFile"></a><a href="https://blog.zygd.site/go.html?u=https://github.com/XRSec/AWVS14-Docker">BuildFile</a></h2><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;xrsec&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> mail=<span class="string">&quot;troy@zygd.site&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /awvs</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> awvs.sh /awvs</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> Dockerfile /awvs</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> xaa /awvs</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> xab /awvs</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> xac /awvs</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> xad /awvs</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> xae /awvs</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> xaf /awvs</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> awvs_listen.zip /awvs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># init</span></span><br><span class="line"><span class="comment"># RUN cp /etc/apt/sources.list /etc/apt/sources.list.bak \</span></span><br><span class="line"><span class="comment">#     &amp;&amp; sed -i &quot;s/archive.ubuntu/mirrors.aliyun/g&quot; /etc/apt/sources.list \</span></span><br><span class="line"><span class="comment">#     &amp;&amp; sed -i &quot;s/security.ubuntu/mirrors.aliyun/g&quot; /etc/apt/sources.list \</span></span><br><span class="line"><span class="comment">#     &amp;&amp; apt update -y \</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update -y \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt upgrade -y \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install wget libxdamage1 libgtk-3-0 libasound2 libnss3 libxss1 libx11-xcb-dev sudo libgbm-dev curl ncurses-bin unzip -y</span></span><br><span class="line">    <span class="comment"># &amp;&amp; apt-get install wget libxdamage1 libgtk-3-0 libasound2 libnss3 libxss1 libx11-xcb-dev sudo libgbm-dev curl ncurses-bin unzip -y \</span></span><br><span class="line">    <span class="comment"># &amp;&amp; mv /etc/apt/sources.list.bak /etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># init_install</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cat /awvs/xaa /awvs/xab /awvs/xac /awvs/xad /awvs/xae /awvs/xaf &gt; /awvs/awvs_x86.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod 777 /awvs/awvs_x86.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s/read -r dummy/#read -r dummy/g&quot;</span> /awvs/awvs_x86.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s/pager=\&quot;more\&quot;/pager=\&quot;cat\&quot;/g&quot;</span> /awvs/awvs_x86.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s/read -r ans/ans=yes/g&quot;</span> /awvs/awvs_x86.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s/read -p \&quot;    Hostname \[\$host_name\]:\&quot; hn/hn=awvs/g&quot;</span> /awvs/awvs_x86.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s/host_name=\$(hostname)/host_name=awvs/g&quot;</span> /awvs/awvs_x86.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s/read -p \&quot;    Hostname \[\$host_name\]:\&quot; hn/awvs/g&quot;</span> /awvs/awvs_x86.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s/read -p &#x27;    Email: &#x27; master_user/master_user=awvs@awvs.com/g&quot;</span> /awvs/awvs_x86.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s/read -sp &#x27;    Password: &#x27; master_password/master_password=Awvs@awvs.com/g&quot;</span> /awvs/awvs_x86.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s/read -sp &#x27;    Password again: &#x27; master_password2/master_password2=Awvs@awvs.com/g&quot;</span> /awvs/awvs_x86.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s/systemctl/\# systemctl/g&quot;</span>  /awvs/awvs_x86.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; /bin/bash /awvs/awvs_x86.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># init_listen</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod 777 /awvs/awvs.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; unzip -d /awvs/awvs_listen /awvs/awvs_listen.zip \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod 444 /awvs/awvs_listen/license_info.json \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cp /awvs/awvs_listen/wvsc /home/acunetix/.acunetix/v_210628104/scanner/ \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cp /awvs/awvs_listen/license_info.json /home/acunetix/.acunetix/data/license/ \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cp /awvs/awvs_listen/wa_data.dat /home/acunetix/.acunetix/data/license/ \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chown acunetix:acunetix /home/acunetix/.acunetix/data/license/wa_data.dat</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [ <span class="string">&quot;/awvs/awvs.sh&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3443</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ENV TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="comment"># ENV LANG &#x27;zh_CN.UTF-8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">STOPSIGNAL</span> SIGQUIT</span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/awvs/awvs.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="awvs-sh"><a href="#awvs-sh" class="headerlink" title="awvs.sh"></a>awvs.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">clear</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m  ______           _    _           _  \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;32m |  ____|         | |  | |         (_) \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;33m | |__      __ _  | |__| |   __ _   _  \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;34m |  __|    / _\` | |  __  |  / _\` | | | \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;35m | |      | (_| | | |  | | | (_| | | | \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;36m |_|       \__,_| |_|  |_|  \__,_| |_| \033[0m&quot;</span>                                </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;34m -------------- \033[0m&quot;</span>                           </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m __  __  ____                      \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;32m \ \/ / |  _ \   ___    ___    ___  \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;33m  \  /  | |_) | / __|  / _ \  / __| \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;34m  /  \  |  _ &lt;  \__ \ |  __/ | (__  \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;35m /_/\_\ |_| \_\ |___/  \___|  \___| \n\033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m Thank&#x27;s fahai &amp;&amp; TimeLine Sec \n\033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;32m [ help ] \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;35m [ https://www.fahai.org/index.php/archives/128/ ] \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;33m [ https://blog.zygd.site/AWVS14%20Docker.html ] \n\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">su -l acunetix -c /home/acunetix/.acunetix/start.sh</span><br></pre></td></tr></table></figure><h3 id="awvs-x86-sh"><a href="#awvs-x86-sh" class="headerlink" title="awvs_x86.sh"></a><a href="https://blog.zygd.site/go.html?u=https://www.fahai.org/index.php/archives/128/">awvs_x86.sh</a></h3><p><a href="https://blog.zygd.site/go.html?u=https://www.fahai.org/index.php/archives/128/">https://www.fahai.org/index.php/archives/128/</a></p><p><strong>转载自–（进入查看博主此文的更新版本）</strong> [<a href="https://blog.zygd.site/AWVS14">https://blog.zygd.site/AWVS14</a> Docker.html](<a href="https://blog.zygd.site/go.html?u=https://blog.zygd.site/AWVS14">https://blog.zygd.site/go.html?u=https://blog.zygd.site/AWVS14</a> Docker.html)</p><p><strong>版权声明:</strong> 本博客所有文章除特别声明外，均采用 <a href="https://blog.zygd.site/go.html?u=https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来自 <a href="https://blog.zygd.site/go.html?u=https://blog.zygd.site">XR-SEC</a>！</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> AWVS </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建Jupyter服务</title>
      <link href="/2021/8/Docker%E6%90%AD%E5%BB%BAJupyter%E6%9C%8D%E5%8A%A1/"/>
      <url>/2021/8/Docker%E6%90%AD%E5%BB%BAJupyter%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="一、运行容器"><a href="#一、运行容器" class="headerlink" title="一、运行容器"></a>一、运行容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name=jupyter -v /userdatas/Sandisk/Jupyter:/home/jovyan -p 10000:8888 --restart=unless-stopped jupyter/minimal-notebook:latest</span><br></pre></td></tr></table></figure><p>映射目录到宿主机：/userdatas/Sandisk/Jupyter<br>此容器的更多运行参数：<a href="https://jupyter-docker-stacks.readthedocs.io/en/latest/using/common.html#docker-options">https://jupyter-docker-stacks.readthedocs.io/en/latest/using/common.html#docker-options</a></p><h3 id="二、修改宿主机目录权限"><a href="#二、修改宿主机目录权限" class="headerlink" title="二、修改宿主机目录权限"></a>二、修改宿主机目录权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown 1000:1000 /userdatas/Sandisk/Jupyter -R</span><br></pre></td></tr></table></figure><h3 id="三、生成密码的sha1值"><a href="#三、生成密码的sha1值" class="headerlink" title="三、生成密码的sha1值"></a>三、生成密码的sha1值</h3><p>在线生成<a href="https://tool.oschina.net/encrypt?type=2">https://tool.oschina.net/encrypt?type=2</a></p><h3 id="四、修改配置文件"><a href="#四、修改配置文件" class="headerlink" title="四、修改配置文件"></a>四、修改配置文件</h3><p>修改之前先进入容器里执行<code>jupyter notebook --generate-config</code>命令，就会在宿主机/userdatas/Sandisk/Jupyter/.jupyter目录下生成<code>jupyter_notebook_config.py</code>文件</p><p>或者<br>直接touch生成该文件，文件内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.password = <span class="string">u&#x27;sha1:第三步生成的密码sha1值&#x27;</span></span><br><span class="line">c.NotebookApp.password_required = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="最后，修改jupyter-notebook-config-py文件的权限"><a href="#最后，修改jupyter-notebook-config-py文件的权限" class="headerlink" title="最后，修改jupyter_notebook_config.py文件的权限"></a>最后，修改<code>jupyter_notebook_config.py</code>文件的权限</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown <span class="number">1000</span>:<span class="number">1000</span> jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP范围转CIDR</title>
      <link href="/2021/8/IP%E8%8C%83%E5%9B%B4%E8%BD%ACCIDR/"/>
      <url>/2021/8/IP%E8%8C%83%E5%9B%B4%E8%BD%ACCIDR/</url>
      
        <content type="html"><![CDATA[<p><a href="http://ip.bczs.net/city">http://ip.bczs.net/city</a><br><a href="https://stackoverflow.com/questions/24214441/ip-range-to-cidr-conversion-in-python/42371026">https://stackoverflow.com/questions/24214441/ip-range-to-cidr-conversion-in-python/42371026</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install netaddr</span></span><br><span class="line"><span class="keyword">import</span> netaddr</span><br><span class="line">startips=[<span class="string">&quot;36.111.200.0&quot;</span>,<span class="string">&quot;36.157.192.0&quot;</span>,<span class="string">&quot;36.158.32.0&quot;</span>,<span class="string">&quot;36.158.46.0&quot;</span>,<span class="string">&quot;36.158.146.0&quot;</span>,<span class="string">&quot;36.158.176.0&quot;</span>,<span class="string">&quot;36.158.208.0&quot;</span>,<span class="string">&quot;36.158.216.0&quot;</span>,<span class="string">&quot;36.193.27.0&quot;</span>,<span class="string">&quot;39.134.252.0&quot;</span>,<span class="string">&quot;42.48.0.0&quot;</span>,<span class="string">&quot;42.48.16.0&quot;</span>,<span class="string">&quot;42.48.25.0&quot;</span>,<span class="string">&quot;42.48.100.0&quot;</span>,<span class="string">&quot;42.48.120.0&quot;</span>,<span class="string">&quot;42.48.142.0&quot;</span>,<span class="string">&quot;42.49.78.0&quot;</span>,<span class="string">&quot;42.49.135.0&quot;</span>,<span class="string">&quot;43.224.160.0&quot;</span>,<span class="string">&quot;43.237.24.0&quot;</span>,<span class="string">&quot;43.238.144.0&quot;</span>,<span class="string">&quot;43.242.148.0&quot;</span>,<span class="string">&quot;43.242.156.0&quot;</span>,<span class="string">&quot;43.250.200.0&quot;</span>,<span class="string">&quot;45.113.252.0&quot;</span>,<span class="string">&quot;45.116.36.0&quot;</span>,<span class="string">&quot;45.250.12.0&quot;</span>,<span class="string">&quot;49.123.64.0&quot;</span>,<span class="string">&quot;49.220.0.0&quot;</span>,<span class="string">&quot;58.20.0.0&quot;</span>,<span class="string">&quot;58.20.193.0&quot;</span>,<span class="string">&quot;58.20.199.0&quot;</span>,<span class="string">&quot;58.20.204.0&quot;</span>,<span class="string">&quot;59.43.69.0&quot;</span>,<span class="string">&quot;59.71.64.0&quot;</span>,<span class="string">&quot;59.71.100.0&quot;</span>,<span class="string">&quot;59.71.114.0&quot;</span>,<span class="string">&quot;59.71.126.0&quot;</span>,<span class="string">&quot;59.81.86.0&quot;</span>,<span class="string">&quot;61.137.0.0&quot;</span>,<span class="string">&quot;61.137.9.0&quot;</span>,<span class="string">&quot;61.137.11.0&quot;</span>,<span class="string">&quot;61.137.32.0&quot;</span>,<span class="string">&quot;61.137.39.0&quot;</span>,<span class="string">&quot;61.137.56.0&quot;</span>,<span class="string">&quot;61.137.69.0&quot;</span>,<span class="string">&quot;61.137.74.0&quot;</span>,<span class="string">&quot;61.137.79.0&quot;</span>,<span class="string">&quot;61.137.86.0&quot;</span>,<span class="string">&quot;61.137.99.0&quot;</span>,<span class="string">&quot;61.137.115.0&quot;</span>,<span class="string">&quot;61.137.120.0&quot;</span>,<span class="string">&quot;61.137.125.0&quot;</span>,<span class="string">&quot;61.150.128.0&quot;</span>,<span class="string">&quot;61.150.178.0&quot;</span>,<span class="string">&quot;61.150.229.0&quot;</span>,<span class="string">&quot;61.150.239.0&quot;</span>,<span class="string">&quot;61.186.80.0&quot;</span>,<span class="string">&quot;61.186.99.0&quot;</span>,<span class="string">&quot;61.187.0.0&quot;</span>,<span class="string">&quot;61.187.84.0&quot;</span>,<span class="string">&quot;61.187.104.0&quot;</span>,<span class="string">&quot;61.187.225.0&quot;</span>,<span class="string">&quot;61.187.255.0&quot;</span>,<span class="string">&quot;61.232.142.0&quot;</span>,<span class="string">&quot;61.232.146.0&quot;</span>,<span class="string">&quot;61.234.250.0&quot;</span>,<span class="string">&quot;61.236.64.0&quot;</span>,<span class="string">&quot;61.236.78.0&quot;</span>,<span class="string">&quot;61.237.128.0&quot;</span>,<span class="string">&quot;61.237.130.0&quot;</span>,<span class="string">&quot;61.237.136.0&quot;</span>,<span class="string">&quot;61.237.139.0&quot;</span>,<span class="string">&quot;61.237.140.0&quot;</span>,<span class="string">&quot;61.240.200.0&quot;</span>,<span class="string">&quot;61.240.204.0&quot;</span>,<span class="string">&quot;61.240.212.0&quot;</span>,<span class="string">&quot;61.240.233.0&quot;</span>,<span class="string">&quot;61.241.224.0&quot;</span>,<span class="string">&quot;101.126.128.0&quot;</span>,<span class="string">&quot;101.130.0.0&quot;</span>,<span class="string">&quot;103.22.68.0&quot;</span>,<span class="string">&quot;103.33.24.0&quot;</span>,<span class="string">&quot;103.34.144.0&quot;</span>,<span class="string">&quot;103.38.32.0&quot;</span>,<span class="string">&quot;103.38.40.0&quot;</span>,<span class="string">&quot;103.43.192.0&quot;</span>,<span class="string">&quot;103.53.204.0&quot;</span>,<span class="string">&quot;103.56.72.0&quot;</span>,<span class="string">&quot;103.73.168.0&quot;</span>,<span class="string">&quot;103.78.124.0&quot;</span>,<span class="string">&quot;103.86.32.0&quot;</span>,<span class="string">&quot;103.91.108.0&quot;</span>,<span class="string">&quot;103.92.132.0&quot;</span>,<span class="string">&quot;103.93.152.0&quot;</span>,<span class="string">&quot;103.96.216.0&quot;</span>,<span class="string">&quot;103.103.72.0&quot;</span>,<span class="string">&quot;103.109.248.0&quot;</span>,<span class="string">&quot;103.203.164.0&quot;</span>,<span class="string">&quot;103.204.236.0&quot;</span>,<span class="string">&quot;103.218.20.0&quot;</span>,<span class="string">&quot;103.246.8.0&quot;</span>,<span class="string">&quot;103.250.249.0&quot;</span>,<span class="string">&quot;106.16.0.0&quot;</span>,<span class="string">&quot;106.16.82.0&quot;</span>,<span class="string">&quot;106.16.88.0&quot;</span>,<span class="string">&quot;106.17.186.0&quot;</span>,<span class="string">&quot;106.18.128.0&quot;</span>,<span class="string">&quot;106.18.196.0&quot;</span>,<span class="string">&quot;106.18.199.0&quot;</span>,<span class="string">&quot;106.18.203.0&quot;</span>,<span class="string">&quot;106.18.232.0&quot;</span>,<span class="string">&quot;106.19.12.0&quot;</span>,<span class="string">&quot;106.19.66.0&quot;</span>,<span class="string">&quot;106.19.224.0&quot;</span>,<span class="string">&quot;110.52.10.0&quot;</span>,<span class="string">&quot;110.52.192.0&quot;</span>,<span class="string">&quot;110.53.108.0&quot;</span>,<span class="string">&quot;110.53.131.0&quot;</span>,<span class="string">&quot;110.53.133.0&quot;</span>,<span class="string">&quot;110.53.141.0&quot;</span>,<span class="string">&quot;110.53.150.0&quot;</span>,<span class="string">&quot;110.53.160.0&quot;</span>,<span class="string">&quot;110.53.176.0&quot;</span>,<span class="string">&quot;110.53.232.0&quot;</span>,<span class="string">&quot;110.53.234.0&quot;</span>,<span class="string">&quot;110.53.236.0&quot;</span>,<span class="string">&quot;110.203.0.0&quot;</span>,<span class="string">&quot;110.207.32.0&quot;</span>,<span class="string">&quot;111.8.0.0&quot;</span>,<span class="string">&quot;111.8.3.0&quot;</span>,<span class="string">&quot;111.8.17.0&quot;</span>,<span class="string">&quot;111.8.28.0&quot;</span>,<span class="string">&quot;111.8.32.0&quot;</span>,<span class="string">&quot;111.22.0.0&quot;</span>,<span class="string">&quot;111.23.0.0&quot;</span>,<span class="string">&quot;111.23.27.0&quot;</span>,<span class="string">&quot;111.23.38.0&quot;</span>,<span class="string">&quot;111.23.41.0&quot;</span>,<span class="string">&quot;111.23.44.0&quot;</span>,<span class="string">&quot;111.23.50.0&quot;</span>,<span class="string">&quot;111.23.137.0&quot;</span>,<span class="string">&quot;111.23.144.0&quot;</span>,<span class="string">&quot;111.23.159.0&quot;</span>,<span class="string">&quot;111.23.164.0&quot;</span>,<span class="string">&quot;111.23.170.0&quot;</span>,<span class="string">&quot;111.23.173.0&quot;</span>,<span class="string">&quot;111.23.181.0&quot;</span>,<span class="string">&quot;111.23.190.0&quot;</span>,<span class="string">&quot;111.23.232.0&quot;</span>,<span class="string">&quot;111.23.238.0&quot;</span>,<span class="string">&quot;111.23.243.0&quot;</span>,<span class="string">&quot;111.23.253.0&quot;</span>,<span class="string">&quot;112.33.250.0&quot;</span>,<span class="string">&quot;113.218.128.0&quot;</span>,<span class="string">&quot;113.219.192.0&quot;</span>,<span class="string">&quot;113.240.128.0&quot;</span>,<span class="string">&quot;113.246.0.0&quot;</span>,<span class="string">&quot;115.157.192.0&quot;</span>,<span class="string">&quot;115.157.240.0&quot;</span>,<span class="string">&quot;115.168.49.0&quot;</span>,<span class="string">&quot;115.168.81.0&quot;</span>,<span class="string">&quot;116.129.244.0&quot;</span>,<span class="string">&quot;116.161.0.0&quot;</span>,<span class="string">&quot;116.199.128.0&quot;</span>,<span class="string">&quot;116.199.133.0&quot;</span>,<span class="string">&quot;117.136.24.0&quot;</span>,<span class="string">&quot;117.136.88.0&quot;</span>,<span class="string">&quot;118.206.192.0&quot;</span>,<span class="string">&quot;118.249.0.0&quot;</span>,<span class="string">&quot;119.39.0.0&quot;</span>,<span class="string">&quot;119.39.146.0&quot;</span>,<span class="string">&quot;119.39.150.0&quot;</span>,<span class="string">&quot;119.39.204.0&quot;</span>,<span class="string">&quot;119.39.227.0&quot;</span>,<span class="string">&quot;119.39.248.0&quot;</span>,<span class="string">&quot;119.44.0.0&quot;</span>,<span class="string">&quot;119.44.128.0&quot;</span>,<span class="string">&quot;119.44.192.0&quot;</span>,<span class="string">&quot;119.45.48.0&quot;</span>,<span class="string">&quot;120.226.19.0&quot;</span>,<span class="string">&quot;120.226.48.0&quot;</span>,<span class="string">&quot;120.226.51.0&quot;</span>,<span class="string">&quot;120.226.64.0&quot;</span>,<span class="string">&quot;120.226.67.0&quot;</span>,<span class="string">&quot;120.226.80.0&quot;</span>,<span class="string">&quot;120.226.83.0&quot;</span>,<span class="string">&quot;120.226.99.0&quot;</span>,<span class="string">&quot;120.226.115.0&quot;</span>,<span class="string">&quot;120.226.128.0&quot;</span>,<span class="string">&quot;120.226.131.0&quot;</span>,<span class="string">&quot;120.226.147.0&quot;</span>,<span class="string">&quot;120.226.160.0&quot;</span>,<span class="string">&quot;120.226.163.0&quot;</span>,<span class="string">&quot;120.226.179.0&quot;</span>,<span class="string">&quot;120.226.195.0&quot;</span>,<span class="string">&quot;120.226.248.0&quot;</span>,<span class="string">&quot;120.227.1.0&quot;</span>,<span class="string">&quot;120.227.6.0&quot;</span>,<span class="string">&quot;120.227.10.0&quot;</span>,<span class="string">&quot;120.227.28.0&quot;</span>,<span class="string">&quot;120.227.56.0&quot;</span>,<span class="string">&quot;120.228.0.0&quot;</span>,<span class="string">&quot;120.228.128.0&quot;</span>,<span class="string">&quot;122.48.16.0&quot;</span>,<span class="string">&quot;122.72.28.0&quot;</span>,<span class="string">&quot;122.72.88.0&quot;</span>,<span class="string">&quot;122.72.123.0&quot;</span>,<span class="string">&quot;122.207.0.0&quot;</span>,<span class="string">&quot;122.207.16.0&quot;</span>,<span class="string">&quot;123.68.0.0&quot;</span>,<span class="string">&quot;123.84.252.0&quot;</span>,<span class="string">&quot;123.94.19.0&quot;</span>,<span class="string">&quot;124.232.0.0&quot;</span>,<span class="string">&quot;124.232.192.0&quot;</span>,<span class="string">&quot;124.233.20.0&quot;</span>,<span class="string">&quot;124.233.68.0&quot;</span>,<span class="string">&quot;124.233.180.0&quot;</span>,<span class="string">&quot;124.233.196.0&quot;</span>,<span class="string">&quot;124.233.208.0&quot;</span>,<span class="string">&quot;124.233.214.0&quot;</span>,<span class="string">&quot;124.233.224.0&quot;</span>,<span class="string">&quot;124.233.238.0&quot;</span>,<span class="string">&quot;125.221.160.0&quot;</span>,<span class="string">&quot;125.221.218.0&quot;</span>,<span class="string">&quot;125.221.242.0&quot;</span>,<span class="string">&quot;125.221.250.0&quot;</span>,<span class="string">&quot;159.226.147.0&quot;</span>,<span class="string">&quot;159.226.152.0&quot;</span>,<span class="string">&quot;175.0.0.0&quot;</span>,<span class="string">&quot;175.6.0.0&quot;</span>,<span class="string">&quot;175.8.0.0&quot;</span>,<span class="string">&quot;175.13.0.0&quot;</span>,<span class="string">&quot;183.169.0.0&quot;</span>,<span class="string">&quot;183.214.0.0&quot;</span>,<span class="string">&quot;183.214.10.0&quot;</span>,<span class="string">&quot;183.214.42.0&quot;</span>,<span class="string">&quot;183.214.55.0&quot;</span>,<span class="string">&quot;183.214.58.0&quot;</span>,<span class="string">&quot;183.214.63.0&quot;</span>,<span class="string">&quot;183.214.77.0&quot;</span>,<span class="string">&quot;183.214.83.0&quot;</span>,<span class="string">&quot;183.214.99.0&quot;</span>,<span class="string">&quot;183.214.107.0&quot;</span>,<span class="string">&quot;183.214.120.0&quot;</span>,<span class="string">&quot;183.214.127.0&quot;</span>,<span class="string">&quot;183.214.138.0&quot;</span>,<span class="string">&quot;183.214.139.0&quot;</span>,<span class="string">&quot;183.214.152.0&quot;</span>,<span class="string">&quot;183.214.154.0&quot;</span>,<span class="string">&quot;183.214.159.0&quot;</span>,<span class="string">&quot;183.214.161.0&quot;</span>,<span class="string">&quot;183.214.170.0&quot;</span>,<span class="string">&quot;183.214.210.0&quot;</span>,<span class="string">&quot;183.214.215.0&quot;</span>,<span class="string">&quot;183.214.235.0&quot;</span>,<span class="string">&quot;183.214.243.0&quot;</span>,<span class="string">&quot;183.214.254.0&quot;</span>,<span class="string">&quot;183.215.29.0&quot;</span>,<span class="string">&quot;183.215.64.0&quot;</span>,<span class="string">&quot;183.215.95.0&quot;</span>,<span class="string">&quot;183.215.99.0&quot;</span>,<span class="string">&quot;183.215.101.0&quot;</span>,<span class="string">&quot;183.215.118.0&quot;</span>,<span class="string">&quot;183.215.159.0&quot;</span>,<span class="string">&quot;183.215.172.0&quot;</span>,<span class="string">&quot;183.215.175.0&quot;</span>,<span class="string">&quot;183.215.198.0&quot;</span>,<span class="string">&quot;183.215.202.0&quot;</span>,<span class="string">&quot;183.215.214.0&quot;</span>,<span class="string">&quot;183.215.218.0&quot;</span>,<span class="string">&quot;183.215.225.0&quot;</span>,<span class="string">&quot;183.215.230.0&quot;</span>,<span class="string">&quot;183.215.234.0&quot;</span>,<span class="string">&quot;183.215.240.0&quot;</span>,<span class="string">&quot;183.215.242.0&quot;</span>,<span class="string">&quot;202.103.64.0&quot;</span>,<span class="string">&quot;202.103.95.0&quot;</span>,<span class="string">&quot;202.103.106.0&quot;</span>,<span class="string">&quot;202.103.114.0&quot;</span>,<span class="string">&quot;202.103.116.0&quot;</span>,<span class="string">&quot;202.103.120.0&quot;</span>,<span class="string">&quot;202.103.124.0&quot;</span>,<span class="string">&quot;202.127.249.0&quot;</span>,<span class="string">&quot;203.2.112.0&quot;</span>,<span class="string">&quot;203.3.112.0&quot;</span>,<span class="string">&quot;203.93.210.0&quot;</span>,<span class="string">&quot;203.93.214.0&quot;</span>,<span class="string">&quot;210.13.224.0&quot;</span>,<span class="string">&quot;210.13.233.0&quot;</span>,<span class="string">&quot;210.13.238.0&quot;</span>,<span class="string">&quot;210.14.170.0&quot;</span>,<span class="string">&quot;210.15.30.0&quot;</span>,<span class="string">&quot;210.15.144.0&quot;</span>,<span class="string">&quot;210.22.48.0&quot;</span>,<span class="string">&quot;210.22.60.0&quot;</span>,<span class="string">&quot;210.22.63.0&quot;</span>,<span class="string">&quot;210.42.176.0&quot;</span>,<span class="string">&quot;210.43.40.0&quot;</span>,<span class="string">&quot;210.43.96.0&quot;</span>,<span class="string">&quot;210.43.152.0&quot;</span>,<span class="string">&quot;210.43.176.0&quot;</span>,<span class="string">&quot;210.43.224.0&quot;</span>,<span class="string">&quot;210.52.81.0&quot;</span>,<span class="string">&quot;210.52.145.0&quot;</span>,<span class="string">&quot;210.53.53.0&quot;</span>,<span class="string">&quot;211.67.232.0&quot;</span>,<span class="string">&quot;211.69.48.0&quot;</span>,<span class="string">&quot;211.69.72.0&quot;</span>,<span class="string">&quot;211.69.208.0&quot;</span>,<span class="string">&quot;211.85.232.0&quot;</span>,<span class="string">&quot;211.91.224.0&quot;</span>,<span class="string">&quot;211.91.226.0&quot;</span>,<span class="string">&quot;211.91.228.0&quot;</span>,<span class="string">&quot;211.91.240.0&quot;</span>,<span class="string">&quot;211.91.244.0&quot;</span>,<span class="string">&quot;211.91.249.0&quot;</span>,<span class="string">&quot;211.91.254.0&quot;</span>,<span class="string">&quot;211.98.62.0&quot;</span>,<span class="string">&quot;211.98.65.0&quot;</span>,<span class="string">&quot;211.98.75.0&quot;</span>,<span class="string">&quot;211.98.166.0&quot;</span>,<span class="string">&quot;211.138.224.0&quot;</span>,<span class="string">&quot;211.138.236.0&quot;</span>,<span class="string">&quot;211.142.208.0&quot;</span>,<span class="string">&quot;211.142.216.0&quot;</span>,<span class="string">&quot;211.161.116.0&quot;</span>,<span class="string">&quot;211.164.38.0&quot;</span>,<span class="string">&quot;218.76.0.0&quot;</span>,<span class="string">&quot;218.77.40.0&quot;</span>,<span class="string">&quot;218.77.104.0&quot;</span>,<span class="string">&quot;218.104.144.0&quot;</span>,<span class="string">&quot;218.196.16.0&quot;</span>,<span class="string">&quot;218.196.40.0&quot;</span>,<span class="string">&quot;218.196.57.0&quot;</span>,<span class="string">&quot;218.196.64.0&quot;</span>,<span class="string">&quot;219.243.244.0&quot;</span>,<span class="string">&quot;220.168.0.0&quot;</span>,<span class="string">&quot;220.168.240.0&quot;</span>,<span class="string">&quot;220.168.255.0&quot;</span>,<span class="string">&quot;220.169.208.0&quot;</span>,<span class="string">&quot;220.192.152.0&quot;</span>,<span class="string">&quot;220.202.97.0&quot;</span>,<span class="string">&quot;220.202.103.0&quot;</span>,<span class="string">&quot;220.202.108.0&quot;</span>,<span class="string">&quot;220.202.124.0&quot;</span>,<span class="string">&quot;220.202.143.0&quot;</span>,<span class="string">&quot;220.202.152.0&quot;</span>,<span class="string">&quot;220.202.156.0&quot;</span>,<span class="string">&quot;220.203.226.0&quot;</span>,<span class="string">&quot;220.205.176.0&quot;</span>,<span class="string">&quot;220.207.220.0&quot;</span>,<span class="string">&quot;220.248.160.0&quot;</span>,<span class="string">&quot;220.248.180.0&quot;</span>,<span class="string">&quot;221.174.127.0&quot;</span>,<span class="string">&quot;221.176.27.0&quot;</span>,<span class="string">&quot;221.177.172.0&quot;</span>,<span class="string">&quot;221.183.63.0&quot;</span>,<span class="string">&quot;222.22.224.0&quot;</span>,<span class="string">&quot;222.51.0.0&quot;</span>,<span class="string">&quot;222.51.32.0&quot;</span>,<span class="string">&quot;222.51.52.0&quot;</span>,<span class="string">&quot;222.51.248.0&quot;</span>,<span class="string">&quot;222.58.240.0&quot;</span>,<span class="string">&quot;222.240.0.0&quot;</span>,<span class="string">&quot;222.243.40.0&quot;</span>,<span class="string">&quot;222.244.64.0&quot;</span>,<span class="string">&quot;222.246.128.0&quot;</span>,<span class="string">&quot;222.246.180.0&quot;</span>,<span class="string">&quot;222.246.188.0&quot;</span>,<span class="string">&quot;222.247.0.0&quot;</span>,<span class="string">&quot;223.103.21.0&quot;</span>,<span class="string">&quot;223.104.21.0&quot;</span>,<span class="string">&quot;223.104.128.0&quot;</span>]</span><br><span class="line">endips=[<span class="string">&quot;36.111.207.255&quot;</span>,<span class="string">&quot;36.157.231.255&quot;</span>,<span class="string">&quot;36.158.43.255&quot;</span>,<span class="string">&quot;36.158.46.255&quot;</span>,<span class="string">&quot;36.158.146.255&quot;</span>,<span class="string">&quot;36.158.198.255&quot;</span>,<span class="string">&quot;36.158.210.255&quot;</span>,<span class="string">&quot;36.158.218.255&quot;</span>,<span class="string">&quot;36.193.31.255&quot;</span>,<span class="string">&quot;39.134.254.255&quot;</span>,<span class="string">&quot;42.48.7.255&quot;</span>,<span class="string">&quot;42.48.23.255&quot;</span>,<span class="string">&quot;42.48.87.255&quot;</span>,<span class="string">&quot;42.48.117.255&quot;</span>,<span class="string">&quot;42.48.121.255&quot;</span>,<span class="string">&quot;42.48.143.255&quot;</span>,<span class="string">&quot;42.49.79.255&quot;</span>,<span class="string">&quot;42.49.143.255&quot;</span>,<span class="string">&quot;43.224.160.255&quot;</span>,<span class="string">&quot;43.237.27.255&quot;</span>,<span class="string">&quot;43.238.147.255&quot;</span>,<span class="string">&quot;43.242.151.255&quot;</span>,<span class="string">&quot;43.242.159.255&quot;</span>,<span class="string">&quot;43.250.203.255&quot;</span>,<span class="string">&quot;45.113.255.255&quot;</span>,<span class="string">&quot;45.116.39.255&quot;</span>,<span class="string">&quot;45.250.15.255&quot;</span>,<span class="string">&quot;49.123.127.255&quot;</span>,<span class="string">&quot;49.220.127.255&quot;</span>,<span class="string">&quot;58.20.127.255&quot;</span>,<span class="string">&quot;58.20.193.255&quot;</span>,<span class="string">&quot;58.20.199.255&quot;</span>,<span class="string">&quot;58.20.210.255&quot;</span>,<span class="string">&quot;59.43.69.255&quot;</span>,<span class="string">&quot;59.71.97.255&quot;</span>,<span class="string">&quot;59.71.105.255&quot;</span>,<span class="string">&quot;59.71.121.255&quot;</span>,<span class="string">&quot;59.71.127.255&quot;</span>,<span class="string">&quot;59.81.87.255&quot;</span>,<span class="string">&quot;61.137.4.255&quot;</span>,<span class="string">&quot;61.137.9.255&quot;</span>,<span class="string">&quot;61.137.14.255&quot;</span>,<span class="string">&quot;61.137.32.255&quot;</span>,<span class="string">&quot;61.137.39.255&quot;</span>,<span class="string">&quot;61.137.63.255&quot;</span>,<span class="string">&quot;61.137.71.255&quot;</span>,<span class="string">&quot;61.137.77.255&quot;</span>,<span class="string">&quot;61.137.81.255&quot;</span>,<span class="string">&quot;61.137.96.255&quot;</span>,<span class="string">&quot;61.137.99.255&quot;</span>,<span class="string">&quot;61.137.115.255&quot;</span>,<span class="string">&quot;61.137.120.255&quot;</span>,<span class="string">&quot;61.137.127.255&quot;</span>,<span class="string">&quot;61.150.162.255&quot;</span>,<span class="string">&quot;61.150.179.255&quot;</span>,<span class="string">&quot;61.150.231.255&quot;</span>,<span class="string">&quot;61.150.239.255&quot;</span>,<span class="string">&quot;61.186.97.255&quot;</span>,<span class="string">&quot;61.186.119.255&quot;</span>,<span class="string">&quot;61.187.77.255&quot;</span>,<span class="string">&quot;61.187.88.255&quot;</span>,<span class="string">&quot;61.187.143.255&quot;</span>,<span class="string">&quot;61.187.231.255&quot;</span>,<span class="string">&quot;61.187.255.255&quot;</span>,<span class="string">&quot;61.232.145.255&quot;</span>,<span class="string">&quot;61.232.146.255&quot;</span>,<span class="string">&quot;61.234.255.255&quot;</span>,<span class="string">&quot;61.236.64.255&quot;</span>,<span class="string">&quot;61.236.79.255&quot;</span>,<span class="string">&quot;61.237.128.255&quot;</span>,<span class="string">&quot;61.237.131.255&quot;</span>,<span class="string">&quot;61.237.136.255&quot;</span>,<span class="string">&quot;61.237.139.255&quot;</span>,<span class="string">&quot;61.237.140.255&quot;</span>,<span class="string">&quot;61.240.202.255&quot;</span>,<span class="string">&quot;61.240.209.255&quot;</span>,<span class="string">&quot;61.240.216.255&quot;</span>,<span class="string">&quot;61.240.234.255&quot;</span>,<span class="string">&quot;61.241.227.255&quot;</span>,<span class="string">&quot;101.126.255.255&quot;</span>,<span class="string">&quot;101.130.127.255&quot;</span>,<span class="string">&quot;103.22.71.255&quot;</span>,<span class="string">&quot;103.33.27.255&quot;</span>,<span class="string">&quot;103.34.147.255&quot;</span>,<span class="string">&quot;103.38.35.255&quot;</span>,<span class="string">&quot;103.38.43.255&quot;</span>,<span class="string">&quot;103.43.195.255&quot;</span>,<span class="string">&quot;103.53.207.255&quot;</span>,<span class="string">&quot;103.56.75.255&quot;</span>,<span class="string">&quot;103.73.171.255&quot;</span>,<span class="string">&quot;103.78.127.255&quot;</span>,<span class="string">&quot;103.86.35.255&quot;</span>,<span class="string">&quot;103.91.111.255&quot;</span>,<span class="string">&quot;103.92.135.255&quot;</span>,<span class="string">&quot;103.93.155.255&quot;</span>,<span class="string">&quot;103.96.219.255&quot;</span>,<span class="string">&quot;103.103.75.255&quot;</span>,<span class="string">&quot;103.109.251.255&quot;</span>,<span class="string">&quot;103.203.167.255&quot;</span>,<span class="string">&quot;103.204.239.255&quot;</span>,<span class="string">&quot;103.218.23.255&quot;</span>,<span class="string">&quot;103.246.11.255&quot;</span>,<span class="string">&quot;103.250.249.255&quot;</span>,<span class="string">&quot;106.16.79.255&quot;</span>,<span class="string">&quot;106.16.82.255&quot;</span>,<span class="string">&quot;106.17.183.255&quot;</span>,<span class="string">&quot;106.17.255.255&quot;</span>,<span class="string">&quot;106.18.194.255&quot;</span>,<span class="string">&quot;106.18.197.255&quot;</span>,<span class="string">&quot;106.18.199.255&quot;</span>,<span class="string">&quot;106.18.229.255&quot;</span>,<span class="string">&quot;106.19.8.255&quot;</span>,<span class="string">&quot;106.19.63.255&quot;</span>,<span class="string">&quot;106.19.215.255&quot;</span>,<span class="string">&quot;106.31.255.255&quot;</span>,<span class="string">&quot;110.52.11.255&quot;</span>,<span class="string">&quot;110.52.223.255&quot;</span>,<span class="string">&quot;110.53.111.255&quot;</span>,<span class="string">&quot;110.53.131.255&quot;</span>,<span class="string">&quot;110.53.133.255&quot;</span>,<span class="string">&quot;110.53.142.255&quot;</span>,<span class="string">&quot;110.53.150.255&quot;</span>,<span class="string">&quot;110.53.167.255&quot;</span>,<span class="string">&quot;110.53.229.255&quot;</span>,<span class="string">&quot;110.53.233.255&quot;</span>,<span class="string">&quot;110.53.235.255&quot;</span>,<span class="string">&quot;110.53.255.255&quot;</span>,<span class="string">&quot;110.203.191.255&quot;</span>,<span class="string">&quot;110.207.47.255&quot;</span>,<span class="string">&quot;111.8.0.255&quot;</span>,<span class="string">&quot;111.8.15.255&quot;</span>,<span class="string">&quot;111.8.26.255&quot;</span>,<span class="string">&quot;111.8.29.255&quot;</span>,<span class="string">&quot;111.8.65.255&quot;</span>,<span class="string">&quot;111.22.15.255&quot;</span>,<span class="string">&quot;111.23.15.255&quot;</span>,<span class="string">&quot;111.23.27.255&quot;</span>,<span class="string">&quot;111.23.39.255&quot;</span>,<span class="string">&quot;111.23.41.255&quot;</span>,<span class="string">&quot;111.23.47.255&quot;</span>,<span class="string">&quot;111.23.51.255&quot;</span>,<span class="string">&quot;111.23.140.255&quot;</span>,<span class="string">&quot;111.23.155.255&quot;</span>,<span class="string">&quot;111.23.161.255&quot;</span>,<span class="string">&quot;111.23.167.255&quot;</span>,<span class="string">&quot;111.23.171.255&quot;</span>,<span class="string">&quot;111.23.176.255&quot;</span>,<span class="string">&quot;111.23.188.255&quot;</span>,<span class="string">&quot;111.23.191.255&quot;</span>,<span class="string">&quot;111.23.236.255&quot;</span>,<span class="string">&quot;111.23.238.255&quot;</span>,<span class="string">&quot;111.23.247.255&quot;</span>,<span class="string">&quot;111.23.255.255&quot;</span>,<span class="string">&quot;112.33.255.255&quot;</span>,<span class="string">&quot;113.218.255.255&quot;</span>,<span class="string">&quot;113.219.255.255&quot;</span>,<span class="string">&quot;113.240.255.255&quot;</span>,<span class="string">&quot;113.247.255.255&quot;</span>,<span class="string">&quot;115.157.223.255&quot;</span>,<span class="string">&quot;115.157.255.255&quot;</span>,<span class="string">&quot;115.168.49.255&quot;</span>,<span class="string">&quot;115.168.81.255&quot;</span>,<span class="string">&quot;116.129.248.255&quot;</span>,<span class="string">&quot;116.161.255.255&quot;</span>,<span class="string">&quot;116.199.129.255&quot;</span>,<span class="string">&quot;116.199.138.255&quot;</span>,<span class="string">&quot;117.136.24.255&quot;</span>,<span class="string">&quot;117.136.89.255&quot;</span>,<span class="string">&quot;118.206.255.255&quot;</span>,<span class="string">&quot;118.250.191.255&quot;</span>,<span class="string">&quot;119.39.127.255&quot;</span>,<span class="string">&quot;119.39.146.255&quot;</span>,<span class="string">&quot;119.39.150.255&quot;</span>,<span class="string">&quot;119.39.205.255&quot;</span>,<span class="string">&quot;119.39.227.255&quot;</span>,<span class="string">&quot;119.39.252.255&quot;</span>,<span class="string">&quot;119.44.63.255&quot;</span>,<span class="string">&quot;119.44.191.255&quot;</span>,<span class="string">&quot;119.44.255.255&quot;</span>,<span class="string">&quot;119.45.63.255&quot;</span>,<span class="string">&quot;120.226.19.255&quot;</span>,<span class="string">&quot;120.226.49.255&quot;</span>,<span class="string">&quot;120.226.51.255&quot;</span>,<span class="string">&quot;120.226.64.255&quot;</span>,<span class="string">&quot;120.226.67.255&quot;</span>,<span class="string">&quot;120.226.80.255&quot;</span>,<span class="string">&quot;120.226.83.255&quot;</span>,<span class="string">&quot;120.226.99.255&quot;</span>,<span class="string">&quot;120.226.115.255&quot;</span>,<span class="string">&quot;120.226.128.255&quot;</span>,<span class="string">&quot;120.226.131.255&quot;</span>,<span class="string">&quot;120.226.147.255&quot;</span>,<span class="string">&quot;120.226.160.255&quot;</span>,<span class="string">&quot;120.226.167.255&quot;</span>,<span class="string">&quot;120.226.179.255&quot;</span>,<span class="string">&quot;120.226.195.255&quot;</span>,<span class="string">&quot;120.226.248.255&quot;</span>,<span class="string">&quot;120.227.1.255&quot;</span>,<span class="string">&quot;120.227.6.255&quot;</span>,<span class="string">&quot;120.227.11.255&quot;</span>,<span class="string">&quot;120.227.31.255&quot;</span>,<span class="string">&quot;120.227.57.255&quot;</span>,<span class="string">&quot;120.228.7.255&quot;</span>,<span class="string">&quot;120.228.135.255&quot;</span>,<span class="string">&quot;122.48.23.255&quot;</span>,<span class="string">&quot;122.72.28.255&quot;</span>,<span class="string">&quot;122.72.91.255&quot;</span>,<span class="string">&quot;122.72.123.255&quot;</span>,<span class="string">&quot;122.207.7.255&quot;</span>,<span class="string">&quot;122.207.127.255&quot;</span>,<span class="string">&quot;123.68.197.255&quot;</span>,<span class="string">&quot;123.84.255.255&quot;</span>,<span class="string">&quot;123.94.19.255&quot;</span>,<span class="string">&quot;124.232.167.255&quot;</span>,<span class="string">&quot;124.233.15.255&quot;</span>,<span class="string">&quot;124.233.63.255&quot;</span>,<span class="string">&quot;124.233.175.255&quot;</span>,<span class="string">&quot;124.233.194.255&quot;</span>,<span class="string">&quot;124.233.203.255&quot;</span>,<span class="string">&quot;124.233.211.255&quot;</span>,<span class="string">&quot;124.233.219.255&quot;</span>,<span class="string">&quot;124.233.235.255&quot;</span>,<span class="string">&quot;124.233.251.255&quot;</span>,<span class="string">&quot;125.221.215.255&quot;</span>,<span class="string">&quot;125.221.223.255&quot;</span>,<span class="string">&quot;125.221.247.255&quot;</span>,<span class="string">&quot;125.221.255.255&quot;</span>,<span class="string">&quot;159.226.147.255&quot;</span>,<span class="string">&quot;159.226.152.255&quot;</span>,<span class="string">&quot;175.0.255.255&quot;</span>,<span class="string">&quot;175.6.223.255&quot;</span>,<span class="string">&quot;175.11.255.255&quot;</span>,<span class="string">&quot;175.13.255.255&quot;</span>,<span class="string">&quot;183.169.127.255&quot;</span>,<span class="string">&quot;183.214.3.255&quot;</span>,<span class="string">&quot;183.214.11.255&quot;</span>,<span class="string">&quot;183.214.45.255&quot;</span>,<span class="string">&quot;183.214.56.255&quot;</span>,<span class="string">&quot;183.214.60.255&quot;</span>,<span class="string">&quot;183.214.63.255&quot;</span>,<span class="string">&quot;183.214.77.255&quot;</span>,<span class="string">&quot;183.214.93.255&quot;</span>,<span class="string">&quot;183.214.99.255&quot;</span>,<span class="string">&quot;183.214.115.255&quot;</span>,<span class="string">&quot;183.214.125.255&quot;</span>,<span class="string">&quot;183.214.137.255&quot;</span>,<span class="string">&quot;183.214.138.255&quot;</span>,<span class="string">&quot;183.214.147.255&quot;</span>,<span class="string">&quot;183.214.152.255&quot;</span>,<span class="string">&quot;183.214.157.255&quot;</span>,<span class="string">&quot;183.214.159.255&quot;</span>,<span class="string">&quot;183.214.167.255&quot;</span>,<span class="string">&quot;183.214.207.255&quot;</span>,<span class="string">&quot;183.214.212.255&quot;</span>,<span class="string">&quot;183.214.232.255&quot;</span>,<span class="string">&quot;183.214.235.255&quot;</span>,<span class="string">&quot;183.214.243.255&quot;</span>,<span class="string">&quot;183.214.254.255&quot;</span>,<span class="string">&quot;183.215.42.255&quot;</span>,<span class="string">&quot;183.215.92.255&quot;</span>,<span class="string">&quot;183.215.95.255&quot;</span>,<span class="string">&quot;183.215.99.255&quot;</span>,<span class="string">&quot;183.215.101.255&quot;</span>,<span class="string">&quot;183.215.140.255&quot;</span>,<span class="string">&quot;183.215.159.255&quot;</span>,<span class="string">&quot;183.215.173.255&quot;</span>,<span class="string">&quot;183.215.191.255&quot;</span>,<span class="string">&quot;183.215.199.255&quot;</span>,<span class="string">&quot;183.215.203.255&quot;</span>,<span class="string">&quot;183.215.215.255&quot;</span>,<span class="string">&quot;183.215.219.255&quot;</span>,<span class="string">&quot;183.215.227.255&quot;</span>,<span class="string">&quot;183.215.231.255&quot;</span>,<span class="string">&quot;183.215.235.255&quot;</span>,<span class="string">&quot;183.215.240.255&quot;</span>,<span class="string">&quot;183.215.243.255&quot;</span>,<span class="string">&quot;202.103.73.255&quot;</span>,<span class="string">&quot;202.103.100.255&quot;</span>,<span class="string">&quot;202.103.112.255&quot;</span>,<span class="string">&quot;202.103.114.255&quot;</span>,<span class="string">&quot;202.103.116.255&quot;</span>,<span class="string">&quot;202.103.120.255&quot;</span>,<span class="string">&quot;202.103.124.255&quot;</span>,<span class="string">&quot;202.127.249.255&quot;</span>,<span class="string">&quot;203.2.119.255&quot;</span>,<span class="string">&quot;203.3.119.255&quot;</span>,<span class="string">&quot;203.93.211.255&quot;</span>,<span class="string">&quot;203.93.223.255&quot;</span>,<span class="string">&quot;210.13.231.255&quot;</span>,<span class="string">&quot;210.13.235.255&quot;</span>,<span class="string">&quot;210.13.239.255&quot;</span>,<span class="string">&quot;210.14.175.255&quot;</span>,<span class="string">&quot;210.15.30.255&quot;</span>,<span class="string">&quot;210.15.144.255&quot;</span>,<span class="string">&quot;210.22.51.255&quot;</span>,<span class="string">&quot;210.22.60.255&quot;</span>,<span class="string">&quot;210.22.63.255&quot;</span>,<span class="string">&quot;210.42.207.255&quot;</span>,<span class="string">&quot;210.43.63.255&quot;</span>,<span class="string">&quot;210.43.111.255&quot;</span>,<span class="string">&quot;210.43.159.255&quot;</span>,<span class="string">&quot;210.43.207.255&quot;</span>,<span class="string">&quot;210.43.239.255&quot;</span>,<span class="string">&quot;210.52.82.255&quot;</span>,<span class="string">&quot;210.52.145.255&quot;</span>,<span class="string">&quot;210.53.57.255&quot;</span>,<span class="string">&quot;211.67.239.255&quot;</span>,<span class="string">&quot;211.69.63.255&quot;</span>,<span class="string">&quot;211.69.95.255&quot;</span>,<span class="string">&quot;211.69.215.255&quot;</span>,<span class="string">&quot;211.85.247.255&quot;</span>,<span class="string">&quot;211.91.224.255&quot;</span>,<span class="string">&quot;211.91.226.255&quot;</span>,<span class="string">&quot;211.91.228.255&quot;</span>,<span class="string">&quot;211.91.242.255&quot;</span>,<span class="string">&quot;211.91.246.255&quot;</span>,<span class="string">&quot;211.91.250.255&quot;</span>,<span class="string">&quot;211.91.255.255&quot;</span>,<span class="string">&quot;211.98.63.255&quot;</span>,<span class="string">&quot;211.98.65.255&quot;</span>,<span class="string">&quot;211.98.75.255&quot;</span>,<span class="string">&quot;211.98.166.255&quot;</span>,<span class="string">&quot;211.138.231.255&quot;</span>,<span class="string">&quot;211.138.238.255&quot;</span>,<span class="string">&quot;211.142.213.255&quot;</span>,<span class="string">&quot;211.142.225.255&quot;</span>,<span class="string">&quot;211.161.119.255&quot;</span>,<span class="string">&quot;211.164.41.255&quot;</span>,<span class="string">&quot;218.76.63.255&quot;</span>,<span class="string">&quot;218.77.63.255&quot;</span>,<span class="string">&quot;218.77.127.255&quot;</span>,<span class="string">&quot;218.104.155.255&quot;</span>,<span class="string">&quot;218.196.23.255&quot;</span>,<span class="string">&quot;218.196.47.255&quot;</span>,<span class="string">&quot;218.196.58.255&quot;</span>,<span class="string">&quot;218.196.127.255&quot;</span>,<span class="string">&quot;219.243.244.255&quot;</span>,<span class="string">&quot;220.168.127.255&quot;</span>,<span class="string">&quot;220.168.251.255&quot;</span>,<span class="string">&quot;220.169.79.255&quot;</span>,<span class="string">&quot;220.169.223.255&quot;</span>,<span class="string">&quot;220.192.159.255&quot;</span>,<span class="string">&quot;220.202.97.255&quot;</span>,<span class="string">&quot;220.202.103.255&quot;</span>,<span class="string">&quot;220.202.122.255&quot;</span>,<span class="string">&quot;220.202.127.255&quot;</span>,<span class="string">&quot;220.202.143.255&quot;</span>,<span class="string">&quot;220.202.153.255&quot;</span>,<span class="string">&quot;220.202.255.255&quot;</span>,<span class="string">&quot;220.203.226.255&quot;</span>,<span class="string">&quot;220.205.183.255&quot;</span>,<span class="string">&quot;220.207.227.255&quot;</span>,<span class="string">&quot;220.248.162.255&quot;</span>,<span class="string">&quot;220.248.180.255&quot;</span>,<span class="string">&quot;221.174.127.255&quot;</span>,<span class="string">&quot;221.176.27.255&quot;</span>,<span class="string">&quot;221.177.172.255&quot;</span>,<span class="string">&quot;221.183.63.255&quot;</span>,<span class="string">&quot;222.22.255.255&quot;</span>,<span class="string">&quot;222.51.29.255&quot;</span>,<span class="string">&quot;222.51.47.255&quot;</span>,<span class="string">&quot;222.51.57.255&quot;</span>,<span class="string">&quot;222.51.248.255&quot;</span>,<span class="string">&quot;222.58.255.255&quot;</span>,<span class="string">&quot;222.240.255.255&quot;</span>,<span class="string">&quot;222.243.63.255&quot;</span>,<span class="string">&quot;222.244.255.255&quot;</span>,<span class="string">&quot;222.246.175.255&quot;</span>,<span class="string">&quot;222.246.182.255&quot;</span>,<span class="string">&quot;222.246.190.255&quot;</span>,<span class="string">&quot;222.247.255.255&quot;</span>,<span class="string">&quot;223.103.21.255&quot;</span>,<span class="string">&quot;223.104.21.255&quot;</span>,<span class="string">&quot;223.104.143.255&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(startips)):</span><br><span class="line">    startip=startips[i]</span><br><span class="line">    endip=endips[i]</span><br><span class="line">    cidrs = netaddr.iprange_to_cidrs(startip, endip)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(cidrs):</span><br><span class="line">        <span class="built_in">print</span>(v)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CIDR </tag>
            
            <tag> ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESXI-打开端口</title>
      <link href="/2021/8/ESXI-%E6%89%93%E5%BC%80%E7%AB%AF%E5%8F%A3/"/>
      <url>/2021/8/ESXI-%E6%89%93%E5%BC%80%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://blog.51cto.com/68240021/1970732">https://blog.51cto.com/68240021/1970732</a><br>VMWare esxi中打开端口的实现</p><p>步骤1. 新增ESXi主机的firewall配置文件</p><p>在ESXi主机的/etc/vmware/firewall目录下增加name.xml的防火墙配置文件，内容格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- FirewallRule for  yourname--&gt;</span> #yourname将会是在shell中显示的名称</span><br><span class="line"><span class="tag">&lt;<span class="name">ConfigRoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>yourname<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span> <span class="attr">id</span> = <span class="string">&#x27;0000&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">direction</span>&gt;</span>inbound<span class="tag">&lt;/<span class="name">direction</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>tcp<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">porttype</span>&gt;</span>dst<span class="tag">&lt;/<span class="name">porttype</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">begin</span>&gt;</span>1280<span class="tag">&lt;/<span class="name">begin</span>&gt;</span> #端口</span><br><span class="line">                <span class="tag">&lt;<span class="name">end</span>&gt;</span>1280<span class="tag">&lt;/<span class="name">end</span>&gt;</span> #端口</span><br><span class="line">            <span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">required</span>&gt;</span>false<span class="tag">&lt;/<span class="name">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ConfigRoot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>步骤2. 刷新防火墙规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esxcli network firewall refresh</span><br></pre></td></tr></table></figure><p>检查规则是否生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esxcli network firewall ruleset list | grep yourname</span><br></pre></td></tr></table></figure><p>结果看到提示yourname ,状态true即开启，说明成功：</p><blockquote><p>yourname true</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> esxi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esxi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS“连接被对方重设”的解决方法</title>
      <link href="/2021/8/CentOS%E2%80%9C%E8%BF%9E%E6%8E%A5%E8%A2%AB%E5%AF%B9%E6%96%B9%E9%87%8D%E8%AE%BE%E2%80%9D%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2021/8/CentOS%E2%80%9C%E8%BF%9E%E6%8E%A5%E8%A2%AB%E5%AF%B9%E6%96%B9%E9%87%8D%E8%AE%BE%E2%80%9D%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>curl: 56 Recv failure: 连接被对方重设<br>curl56 Recv failure: Connection reset by peer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld  </span><br><span class="line">systemctl stop firewalld  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos8修改网络配置</title>
      <link href="/2021/8/centos8%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/8/centos8%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>centos8已经发布了，下载了一个体验一下，新安装好的centos8默认网卡是没有启动的，安装好后需要先配置网络。在/etc/sysconfig/network-scripts目录下存放着网卡的配置文件，文件名称是ifcfg- 网卡名称。</p><p>一 修改配置文件</p><p>设置网络时首先打开配置文件，配置文件默认如下所示，如果使用dhcp自动获取ip，只需将ONBOOT=no修改为ONBOOT=yes即可。</p><h1 id="网卡配置文件按默认配置"><a href="#网卡配置文件按默认配置" class="headerlink" title="网卡配置文件按默认配置"></a>网卡配置文件按默认配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=e4987998-a4ce-4cef-96f5-a3106a97f5bf</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=no  <span class="comment">#如果使用dhcp分配ip的话，只需要将这里no改为yes，然后重启网络服务就行</span></span><br></pre></td></tr></table></figure><p>如果需要配置静态ip，则按照以下修改方法修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static   <span class="comment">#将dhcp修改为stati表示使用静态ip</span></span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPADDR=192.168.128.129   <span class="comment">#设置IP地址</span></span><br><span class="line">NETMASK=255.255.255.0    <span class="comment">#设置子网掩码</span></span><br><span class="line">GATEWAY=192.168.128.1    <span class="comment">#设置网关</span></span><br><span class="line">DNS1=114.114.114.114     <span class="comment">#设置dns</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=e4987998-a4ce-4cef-96f5-a3106a97f5bf</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes  <span class="comment">#将no改为yes</span></span><br></pre></td></tr></table></figure><p>二 重启网络服务</p><p>使用nmcli c reload命令重启网络服务，网络这块算是centos8改动较大的一块了，nmcli命令的参数如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[hk@localhost network-scripts]$ nmcli  -h</span><br><span class="line">Usage: nmcli [OPTIONS] OBJECT &#123; COMMAND | <span class="built_in">help</span> &#125;</span><br><span class="line"></span><br><span class="line">OPTIONS</span><br><span class="line">  -o[verview]                                    overview mode (hide default values)</span><br><span class="line">  -t[erse]                                       terse output</span><br><span class="line">  -p[retty]                                      pretty output</span><br><span class="line">  -m[ode] tabular|multiline                      output mode</span><br><span class="line">  -c[olors] auto|yes|no                          whether to use colors <span class="keyword">in</span> output</span><br><span class="line">  -f[ields] &lt;field1,field2,...&gt;|all|common       specify fields to output</span><br><span class="line">  -g[et-values] &lt;field1,field2,...&gt;|all|common   shortcut <span class="keyword">for</span> -m tabular -t -f</span><br><span class="line">  -e[scape] yes|no                               escape columns separators <span class="keyword">in</span> values</span><br><span class="line">  -a[sk]                                         ask <span class="keyword">for</span> missing parameters</span><br><span class="line">  -s[how-secrets]                                allow displaying passwords</span><br><span class="line">  -w[ait] &lt;seconds&gt;                              <span class="built_in">set</span> timeout waiting <span class="keyword">for</span> finishing operations</span><br><span class="line">  -v[ersion]                                     show program version</span><br><span class="line">  -h[elp]                                        <span class="built_in">print</span> this <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">OBJECT</span><br><span class="line">  g[eneral]       NetworkManager<span class="string">&#x27;s general status and operations</span></span><br><span class="line"><span class="string">  n[etworking]    overall networking control</span></span><br><span class="line"><span class="string">  r[adio]         NetworkManager radio switches</span></span><br><span class="line"><span class="string">  c[onnection]    NetworkManager&#x27;</span>s connections  <span class="comment"># 网络管理一般使用 nmcli c</span></span><br><span class="line">  d[evice]        devices managed by NetworkManager</span><br><span class="line">  a[gent]         NetworkManager secret agent or polkit agent</span><br><span class="line">  m[onitor]       monitor NetworkManager changes</span><br><span class="line"></span><br><span class="line">[hk@localhost network-scripts]$ </span><br></pre></td></tr></table></figure><p>网络管理一般使用 nmcli c，用法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[hk@localhost network-scripts]$ nmcli c -h</span><br><span class="line">Usage: nmcli connection &#123; COMMAND | <span class="built_in">help</span> &#125;</span><br><span class="line"></span><br><span class="line">COMMAND := &#123; show | up | down | add | modify | <span class="built_in">clone</span> | edit | delete | monitor | reload | load | import | <span class="built_in">export</span> &#125;</span><br><span class="line"></span><br><span class="line">  show [--active] [--order &lt;order spec&gt;]</span><br><span class="line">  show [--active] [id | uuid | path | apath] &lt;ID&gt; ...</span><br><span class="line"></span><br><span class="line">  up [[id | uuid | path] &lt;ID&gt;] [ifname &lt;ifname&gt;] [ap &lt;BSSID&gt;] [passwd-file &lt;file with passwords&gt;]</span><br><span class="line"></span><br><span class="line">  down [id | uuid | path | apath] &lt;ID&gt; ...</span><br><span class="line"></span><br><span class="line">  add COMMON_OPTIONS TYPE_SPECIFIC_OPTIONS SLAVE_OPTIONS IP_OPTIONS [-- ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+]</span><br><span class="line"></span><br><span class="line">  modify [--temporary] [id | uuid | path] &lt;ID&gt; ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+</span><br><span class="line"></span><br><span class="line">  <span class="built_in">clone</span> [--temporary] [id | uuid | path ] &lt;ID&gt; &lt;new name&gt;</span><br><span class="line"></span><br><span class="line">  edit [id | uuid | path] &lt;ID&gt;</span><br><span class="line">  edit [<span class="built_in">type</span> &lt;new_con_type&gt;] [con-name &lt;new_con_name&gt;]</span><br><span class="line"></span><br><span class="line">  delete [id | uuid | path] &lt;ID&gt;</span><br><span class="line"></span><br><span class="line">  monitor [id | uuid | path] &lt;ID&gt; ...</span><br><span class="line"></span><br><span class="line">  reload</span><br><span class="line"></span><br><span class="line">  load &lt;filename&gt; [ &lt;filename&gt;... ]</span><br><span class="line"></span><br><span class="line">  import [--temporary] <span class="built_in">type</span> &lt;<span class="built_in">type</span>&gt; file &lt;file to import&gt;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> [id | uuid | path] &lt;ID&gt; [&lt;output file&gt;]</span><br><span class="line"></span><br><span class="line">[hk@localhost network-scripts]$ </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装zsh及其插件</title>
      <link href="/2021/8/centos%E5%AE%89%E8%A3%85zsh%E5%8F%8A%E5%85%B6%E6%8F%92%E4%BB%B6/"/>
      <url>/2021/8/centos%E5%AE%89%E8%A3%85zsh%E5%8F%8A%E5%85%B6%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dnf install util-linux-user -y</span><br><span class="line">yum update &amp;&amp; yum install -y zsh git</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br><span class="line">sed -i <span class="string">&#x27;/^ZSH_THEME=/c\ZSH_THEME=&quot;ys&quot;&#x27;</span> ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-syntax-highlighting</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-completions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-completions</span><br><span class="line">[ -z <span class="string">&quot;`grep &quot;</span><span class="built_in">autoload</span> -U compinit &amp;&amp; compinit<span class="string">&quot; ~/.zshrc`&quot;</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;autoload -U compinit &amp;&amp; compinit&quot;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">sed -i <span class="string">&#x27;/^plugins=/c\plugins=(git sudo z zsh-syntax-highlighting zsh-autosuggestions zsh-completions)&#x27;</span> ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESXI安装KoolShare软路由并安装魔法插件</title>
      <link href="/2021/8/ESXI%E5%AE%89%E8%A3%85KoolShare%E8%BD%AF%E8%B7%AF%E7%94%B1%E5%B9%B6%E5%AE%89%E8%A3%85%E9%AD%94%E6%B3%95%E6%8F%92%E4%BB%B6/"/>
      <url>/2021/8/ESXI%E5%AE%89%E8%A3%85KoolShare%E8%BD%AF%E8%B7%AF%E7%94%B1%E5%B9%B6%E5%AE%89%E8%A3%85%E9%AD%94%E6%B3%95%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>固件下载地址：<br><a href="https://firmware.koolshare.cn/LEDE_X64_fw867/">https://firmware.koolshare.cn/LEDE_X64_fw867/</a><br>转盘~<br>安装完毕后。<br>SSH连接输入以下命令，不然无法安装魔法插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/\tdetect_package/\t# detect_package/g&#x27; /koolshare/scripts/ks_tar_install.sh</span><br></pre></td></tr></table></figure><p>魔法插件下载地址<br><a href="https://github.com/hq450/fancyss_history_package/tree/master/fancyss_X64">https://github.com/hq450/fancyss_history_package/tree/master/fancyss_X64</a></p>]]></content>
      
      
      <categories>
          
          <category> esxi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esxi </tag>
            
            <tag> koolshare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】基于alpine镜像构建自己的flask镜像</title>
      <link href="/2021/8/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E5%9F%BA%E4%BA%8Ealpine%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84flask%E9%95%9C%E5%83%8F/"/>
      <url>/2021/8/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E5%9F%BA%E4%BA%8Ealpine%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84flask%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<p>python官方镜像地址：</p><p><a href="http://hub.docker.com/_/python">http://hub.docker.com/_/python</a></p><p>拉取官方的python镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull python:3.7-alpine</span><br></pre></td></tr></table></figure><p>交互式方式生成一个python容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name python37 --rm python:3.7-alpine /bin/sh</span><br></pre></td></tr></table></figure><p>进入交互式容器，查看当前python版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>设置pip的阿里云镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="variable">$HOME</span>/.pip/</span><br><span class="line"> </span><br><span class="line">tee <span class="variable">$HOME</span>/.pip/pip.conf &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">[global]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br><span class="line">index-url=https://mirrors.aliyun.com/pypi/simple</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>确认一下是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="variable">$HOME</span>/.pip/pip.conf</span><br></pre></td></tr></table></figure><p>我们的python使用的是alpine系统</p><p><code>alpine</code>使用的是<code>apk</code>包管理器</p><p>命令如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apk add</span><br><span class="line"> </span><br><span class="line">apk update</span><br><span class="line"> </span><br><span class="line">apk del</span><br></pre></td></tr></table></figure><p><code>alpine</code>默认的镜像源也比较慢，我们也换成国内的</p><p>设置alpine镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> http://mirrors.ustc.edu.cn/alpine/v3.7/main &gt; /etc/apk/repositories</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> http://mirrors.ustc.edu.cn/alpine/v3.7/community &gt;&gt; /etc/apk/repositories</span><br></pre></td></tr></table></figure><p>设置后要执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk update &amp;&amp; apk upgrade</span><br></pre></td></tr></table></figure><p>安装flask</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install -U flask</span><br></pre></td></tr></table></figure><p>编写test.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/abc&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abc</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello abc&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="第一种执行这个py文件方式"><a href="#第一种执行这个py文件方式" class="headerlink" title="第一种执行这个py文件方式"></a>第一种执行这个py文件方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py</span><br></pre></td></tr></table></figure><p>然后在另一个终端以交互式方式进入这个python容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it python37 /bin/sh</span><br></pre></td></tr></table></figure><p>下载<code>curl</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add curl</span><br></pre></td></tr></table></figure><p>使用<code>curl</code>访问<code>flask</code>服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:5000</span><br><span class="line"> </span><br><span class="line">curl localhost:5000/abc</span><br></pre></td></tr></table></figure><h3 id="第二种执行这个py文件的方式"><a href="#第二种执行这个py文件的方式" class="headerlink" title="第二种执行这个py文件的方式"></a>第二种执行这个py文件的方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="built_in">export</span> FLASK_APP=/test.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># flask运行起来</span></span><br><span class="line">flask run</span><br></pre></td></tr></table></figure><h3 id="第三种执行这个py文件的方式"><a href="#第三种执行这个py文件的方式" class="headerlink" title="第三种执行这个py文件的方式"></a>第三种执行这个py文件的方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLASK_APP=test.py flask run</span><br></pre></td></tr></table></figure><h2 id="根据上面的操作步骤，我们可以来编写Dockerfile生成自己的flask镜像"><a href="#根据上面的操作步骤，我们可以来编写Dockerfile生成自己的flask镜像" class="headerlink" title="根据上面的操作步骤，我们可以来编写Dockerfile生成自己的flask镜像"></a>根据上面的操作步骤，我们可以来编写Dockerfile生成自己的flask镜像</h2><h3 id="先退出上面的交互式容器，按：ctrl-D"><a href="#先退出上面的交互式容器，按：ctrl-D" class="headerlink" title="先退出上面的交互式容器，按：ctrl+D"></a>先退出上面的交互式容器，按：ctrl+D</h3><p>创建一个flask目录，并进入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir flask</span><br><span class="line"><span class="built_in">cd</span> flask</span><br></pre></td></tr></table></figure><p>创建一个pip.conf文件，将pip镜像源写进去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tee pip.conf &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">[global]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br><span class="line">index-url=https://mirrors.aliyun.com/pypi/simple</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>编写Dockerfile文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-alpine</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> http://mirrors.ustc.edu.cn/alpine/v3.7/main &gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> http://mirrors.ustc.edu.cn/alpine/v3.7/community &gt;&gt; /etc/apk/repositories</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; apk upgrade</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir <span class="variable">$HOME</span>/.pip/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./pip.conf <span class="variable">$HOME</span>/.pip/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install flask</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>执行docker build命令进行镜像构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myflask:1.0 .</span><br></pre></td></tr></table></figure><p>确认是否构建成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>ok！镜像构建成功！</p><p>怎么运行？？</p><p>创建一个myapp目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir myapp</span><br></pre></td></tr></table></figure><p>放入上面的test.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/abc&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abc</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello abc&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>然后通过刚刚构建的镜像生成我们的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myapp --rm -d -p 8080:5000 -v ~/myapp:/app -e FLASK_APP=/app/test.py myflask:1.0</span><br></pre></td></tr></table></figure><p>确认容器是否启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>恩，启动了！</p><p>但是我们无法通过外网访问服务器ip的8080端口访问到容器里面</p><p>为什么？</p><p><code>flash</code>默认只允许本机访问！</p><p>怎么办？</p><p>停掉刚刚生成的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop myapp</span><br></pre></td></tr></table></figure><p>重新生成容器，指定允许ip为0.0.0.0，然外部可以访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myapp --rm -d -p 8080:5000 -v ~/myapp:/app -e FLASK_APP=/app/test.py myflask:1.0 flask run -h 0.0.0.0</span><br></pre></td></tr></table></figure><p>通过外网浏览器访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://服务器ip:8080</span><br></pre></td></tr></table></figure><p>ok，可以访问到flask搭建的程序了！</p><p>原文链接：<a href="http://www.mi360.cn/articles/34">http://www.mi360.cn/articles/34</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> alpine </tag>
            
            <tag> flask </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>验证码识别服务安装过程</title>
      <link href="/2021/8/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/"/>
      <url>/2021/8/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>1、按官方步骤安装muggle-ocr</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com muggle-ocr</span><br></pre></td></tr></table></figure><p>2、安装相应依赖库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt install libgl1-mesa-glx</span><br></pre></td></tr></table></figure><p>3、降低tf版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade tensor</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手摸手带你Docker从入门到实践</title>
      <link href="/2021/8/%E6%89%8B%E6%91%B8%E6%89%8B%E5%B8%A6%E4%BD%A0%20Docker%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
      <url>/2021/8/%E6%89%8B%E6%91%B8%E6%89%8B%E5%B8%A6%E4%BD%A0%20Docker%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="手摸手带你-Docker-从入门到实践"><a href="#手摸手带你-Docker-从入门到实践" class="headerlink" title="手摸手带你 Docker 从入门到实践"></a>手摸手带你 Docker 从入门到实践</h1><p>在下最近遇到要在服务器上安装 Mysql、Nginx、EasyMock 等工具的场景，这里记录一下我使用 Docker 安装的过程，希望也能在类似的场景中帮助到大家～</p><p>本文前备知识需要一些 Linux 的一些基本命令，推介先看一下 <a href="https://juejin.im/post/6844904080972709901">&lt;半小时搞会 CentOS 入门必备基础知识&gt;</a> 这篇文章。</p><p>CentOS 版本： <code>7.6</code></p><p>Nginx 版本： <code>1.16.1</code></p><p>Docker 版本： <code>19.03.12</code></p><blockquote><p>你多学一样本事，就少说一句求人的话</p></blockquote><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><h3 id="1-1-出现的原因"><a href="#1-1-出现的原因" class="headerlink" title="1.1 出现的原因"></a>1.1 出现的原因</h3><p>前后端开发到测试到生产的过程中，经常会遇到一个问题，明明我在本地跑没问题，为什么到测试环境或者生产环境就报错了了呢，常常这是因为开发、测试、生产的环境与配置不同导致的。</p><p>折腾过环境配置的人都明白其中麻烦，换一台系统、虚拟机、机器，就又要重来一次，费力费时。由于环境和配置的原因，各种奇奇怪怪因为环境和配置的 Bug，总是像打地鼠游戏里面的地鼠一样不断冒出来 🐹</p><p>![](c9ce28e3e43e4bb292b92fd1a4786fe9tplv-k3u1fbpfcp-zoom-1.image#vwid=1586&amp;vhei=600” alt=”Docker” style=”zoom:80%;” /&gt;</p><p>Docker 对这个问题给出了一个很好的解决方案，通过镜像将除了系统之外所需要的系统环境由下而上打包，达到服务跨平台的无缝运作。也就是说，安装的时候，把特定的环境一模一样地搬过来，从而解决「在我的电脑上能跑，在 xx 环境就跑不了」的情况。</p><p>另外一个重要的原因，就是轻量，基于容器的虚拟化，Docker 的镜像仅包含业务运行所需的 runtime 环境，一个 CentOS/Ubuntu 基础镜像仅 170M，因为轻量一个宿主机可以轻松安装数百个容器。</p><h3 id="1-2-是什么"><a href="#1-2-是什么" class="headerlink" title="1.2 是什么"></a>1.2 是什么</h3><p>Docker 是基于 Go 语言实现的云开源项目，从 2013 年发布到现在一直广受关注。Docker 可以让你像使用集装箱一样快速的组合成应用，并且可以像运输标准集装箱一样，尽可能的屏蔽代码层面的差异。它将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。</p><p>程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p><p>本文就不对比虚拟机跟 Docker 的区别和优劣了，每个文章都有，说烂了，想了解的话可以百度一下 😂，我这里就不多说了，下面直接看看怎么安装怎么用起来吧。</p><h2 id="2-安装-amp-配置"><a href="#2-安装-amp-配置" class="headerlink" title="2. 安装 &amp; 配置"></a>2. 安装 &amp; 配置</h2><h3 id="2-1-Mac-下安装"><a href="#2-1-Mac-下安装" class="headerlink" title="2.1 Mac 下安装"></a>2.1 Mac 下安装</h3><p>在下直接使用 Homebrew Cask 来安装，Mac 下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Homebrew 安装</span></span><br><span class="line">braw cask install docker</span><br></pre></td></tr></table></figure><p>即可，安装完输入命令，直接报错！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker</span><br><span class="line">zsh: <span class="built_in">command</span> not found: docker  <span class="comment"># 报错</span></span><br></pre></td></tr></table></figure><p>遇到这个报错别担心，安装完之后要在应用列表里面双击 Docker 应用，输入密码之后就可以使用这个命令了 😅。</p><h3 id="2-2-CentOS-下安装"><a href="#2-2-CentOS-下安装" class="headerlink" title="2.2 CentOS 下安装"></a>2.2 CentOS 下安装</h3><p>Docker 要求 CentOS 版本必须在 6.5 及以上才可以安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo yum install yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum install docker-ce</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 开启 Docker</span></span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>在 Windows 上可以直接<a href="https://docs.docker.com/docker-for-windows/install/">下载安装包</a>来安装，或者 Mac 上不使用 Homebrew 也可以去<a href="https://docs.docker.com/get-docker/">官网</a>直接下载安装包来安装，百度一下到处都是安装方法，其他的就不用多说。</p><h2 id="3-简单配置并跑起来"><a href="#3-简单配置并跑起来" class="headerlink" title="3. 简单配置并跑起来"></a>3. 简单配置并跑起来</h2><h3 id="3-1-配置镜像加速"><a href="#3-1-配置镜像加速" class="headerlink" title="3.1 配置镜像加速"></a>3.1 配置镜像加速</h3><p>在 MacOS 的 Docker 配置 <code>Perferences -&gt; Docker Engine</code> 或者 Windows 的 <code>Settings -&gt; Deamon</code> 中的 JSON 中增加一项 <code>registry-mirrors</code> 如下</p><p><img src="468e1547b4e549f28f140f30ca49c431tplv-k3u1fbpfcp-zoom-1.jpg"></p><p>配置完之后在命令行中 <code>docker info</code> 就可以查看到我们配置的镜像加速地址了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo docker info</span><br><span class="line">...</span><br><span class="line"> Registry Mirrors:</span><br><span class="line">  https://reg-mirror.qiniu.com/</span><br><span class="line">  http://hub-mirror.c.163.com/</span><br><span class="line">  https://registry.docker-cn.com/</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果你的系统的 Docker 没有客户端，比如 CentOS 中，可以直接修改 deamon 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改/创建 docker 的 deamon 配置文件</span></span><br><span class="line">sudo vi /etc/docker/daemon.json</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改为如下配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;experimental&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://reg-mirror.qiniu.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改完 :wq 重启</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="3-2-Hello-World-！"><a href="#3-2-Hello-World-！" class="headerlink" title="3.2 Hello World ！"></a>3.2 Hello World ！</h3><p>然后就可以快乐跑起来我们第一个 Docker 指令 Hello World 了</p><p><img src="7bfcde346b5f4fc18d36b5cb7b822bb1tplv-k3u1fbpfcp-zoom-1.jpg"></p><p>Good start ！ 🎉</p><h2 id="4-镜像-amp-容器-amp-仓库"><a href="#4-镜像-amp-容器-amp-仓库" class="headerlink" title="4. 镜像 &amp; 容器 &amp; 仓库"></a>4. 镜像 &amp; 容器 &amp; 仓库</h2><p>镜像和容器的关系就像类和类的实例，一个镜像可以同时跑多个容器，单个容器实例又可以创建新的镜像。如下图：</p><p><img src="8e0525e7f3944ca089e94d1dcc04a95dtplv-k3u1fbpfcp-zoom-1.jpg"></p><p>下面解释一下这个图里面出现的元素</p><table><thead><tr><th align="left">概念</th><th>说明</th></tr></thead><tbody><tr><td align="left">Docker 镜像 Images</td><td>用于创建 Docker 容器的只读<strong>模板</strong>，比如 Ubuntu 16.04系统、Nginx 1.16.0 等，是一个特殊的文件系统，包括容器运行时需要的程序、库、资源、参数等，但不包含任何动态数据，内容在构建后也不会被改变，一个镜像可以创建多个容器</td></tr><tr><td align="left">Docker 容器 Container</td><td>容器是独立运行、相互隔离的一个或一组应用，是镜像创建的运行实例，实质是进程，可以看作为一个<strong>简易版的 Linux 环境 + 运行在其中的应用程序</strong></td></tr><tr><td align="left">Docker 客户端 Client</td><td>客户端通过命令行或者其他工具使用 Docker SDK (<a href="https://docs.docker.com/develop/sdk/">docs.docker.com/develop/sdk…</a>) 与 Docker 的守护进程通信</td></tr><tr><td align="left">Docker 主机 Host</td><td>一个物理或者虚拟的机器用于执行 Docker 守护进程和容器</td></tr><tr><td align="left">Docker 仓库 Repository</td><td>集中存放镜像文件的地方，分为公有仓库和私有仓库。</td></tr><tr><td align="left">Docker 注册服务器 Registry</td><td>是一个集中存储、分发镜像的服务，官方的叫 <a href="https://hub.docker.com/">Docker Hub</a>。一个 Docker Registry 中可包含多个仓库，每个仓库可以包含多个标签 Tag 的镜像，不同的标签对应不同的版本</td></tr><tr><td align="left">Docker Machine</td><td>Docker Machine 是一个简化 Docker 安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如 VirtualBox、 Digital Ocean、Microsoft Azure</td></tr></tbody></table><p>容器的生命周期图示</p><p><img src="e1fcfb56ecc7472da5c3ef35657c4329tplv-k3u1fbpfcp-zoom-1.jpg"></p><p>容器的五个核心状态，也就是图中色块表示的：Created、Running、Paused、Stopped、Deleted：</p><ol><li><strong>Created</strong>：容器已经被创建，容器所需的相关资源已经准备就绪，但容器中的程序还未处于运行状态。</li><li><strong>Running</strong>：容器正在运行，也就是容器中的应用正在运行。</li><li><strong>Paused</strong>：容器已暂停，表示容器中的所有程序都处于暂停 不是停止不是停止 状态。</li><li><strong>Stopped</strong>：容器处于停止状态，占用的资源和沙盒环境都依然存在，只是容器中的应用程序均已停止。</li><li><strong>Deleted</strong>：容器已删除，相关占用的资源及存储在 Docker 中的管理信息也都已释放和移除。</li></ol><p>本文主要关注于使用，就不太赘述这些状态的切换等，下面直接上手。</p><h2 id="5-基本使用"><a href="#5-基本使用" class="headerlink" title="5. 基本使用"></a>5. 基本使用</h2><h3 id="5-1-操作命令"><a href="#5-1-操作命令" class="headerlink" title="5.1 操作命令"></a>5.1 操作命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 Docker 开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭 Docker 开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> docker</span><br></pre></td></tr></table></figure><h3 id="5-2-镜像命令"><a href="#5-2-镜像命令" class="headerlink" title="5.2 镜像命令"></a>5.2 镜像命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去下载镜像，先从本地找，没有去镜像，最后没有去 hub，标签不写默认为 lastest</span></span><br><span class="line">docker pull [镜像名]:[标签Tag]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 列出本机的所有 image 文件，-a 显示本地所有镜像（包括中间镜像），-q 只显示镜像ID，--digests 显示镜像的摘要信息</span></span><br><span class="line">docker image ls</span><br><span class="line">docker images</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除 image 文件, -f 强制删除镜像</span></span><br><span class="line">docker rmi [镜像名][:标签Tag]</span><br><span class="line">docker rmi [镜像名1][:标签Tag] [镜像名2][:标签Tag]    <span class="comment"># 删多个</span></span><br><span class="line">docker rmi $(docker ps -a -q)    <span class="comment"># 删全部，后面是子命令</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查询镜像名称，--no-trunc 显示完整的镜像描述，--filter=stars=30 列出star不少于指定值的镜像，--filter=is-automated=true 列出自动构建类型的镜像</span></span><br><span class="line">docker search [关键字]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下载镜像，标签 tag 不写默认为 lastest，也可以自己加比如 :3.2.0</span></span><br><span class="line">docker pull [镜像名][:标签Tag]</span><br></pre></td></tr></table></figure><h3 id="5-3-容器命令"><a href="#5-3-容器命令" class="headerlink" title="5.3 容器命令"></a>5.3 容器命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出本机正在运行的容器，-a 列出本机所有容器包括终止运行的容器，-q 静默模式只显示容器编号，-l 显示最近创建的容器</span></span><br><span class="line">docker container ls     <span class="comment"># 等价于下面这个命令</span></span><br><span class="line">docker ps</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建并启动容器</span></span><br><span class="line">docker run [option] [容器名] </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker start [容器ID]/[容器Names]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart [容器ID]/[容器Names]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 终止容器运行</span></span><br><span class="line">docker <span class="built_in">kill</span> [容器ID]  <span class="comment"># 强行终止，相当于向容器里面的主进程发出 SIGKILL 信号，那些正在进行中的操作会全部丢失</span></span><br><span class="line">docker <span class="built_in">kill</span> $(docker ps -a -q) <span class="comment"># 强行终止所有容器</span></span><br><span class="line">docker stop [容器ID]  <span class="comment"># 从容终止，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号</span></span><br><span class="line">docker stop $(docker ps -a -q) <span class="comment"># 终止所有容器</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 终止运行的容器文件，依然会占据硬盘空间，可以使用 docker container rm 命令删除，-f 强制删除可以删除正在运行的容器</span></span><br><span class="line">docker rm [容器ID]</span><br><span class="line">docker rm `docker ps -aq`    <span class="comment"># 删除所有已经停止的容器，因为没停止的rm删不了需要加-f</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看容器的输出，-t加入时间戳，-f跟随最新日志打印，--tail数字显示最后多少条，如果docker run时，没有使用-it，就要用这个命令查看输出</span></span><br><span class="line">docker logs [容器ID]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看容器进程信息</span></span><br><span class="line">docker top [容器ID]/[容器Names]</span><br><span class="line">docker port [容器ID]/[容器Names]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 退出容器</span></span><br><span class="line"><span class="built_in">exit</span>           <span class="comment"># 容器退出</span></span><br><span class="line">ctrl + p + q     <span class="comment"># 容器退出，快捷键</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker attach [容器ID]      <span class="comment"># 退出容器时会让容器停止，本机的输入直接输到容器中</span></span><br><span class="line">docker <span class="built_in">exec</span> -it [容器ID]    <span class="comment"># 退出容器时不会让容器停止，在已运行的容器中执行命令，不创建和启动新的容器</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置容器在docker启动时自动启动</span></span><br><span class="line">docker container update --restart=always [容器名字]</span><br></pre></td></tr></table></figure><p>这里要特别说一下 <code>docker run</code> 的 <code>option</code>，因为最常用：</p><ol><li><code>--name</code> 为容器指定一个名称；</li><li><code>-d</code> 容器启动后进入后台，并返回容器 ID，即启动守护式容器；</li><li><code>-P</code> 随机端口映射；</li><li><code>-p 80:8080</code> 将本地 80 端口映射到容器的 8080 端口；</li><li><code>bash</code> 容器启动以后，内部第一个执行的命令。这里启动 bash，保证用户可以使用 Shell；</li><li><code>-i</code> 以交互模式运行容器，通常与 <code>-t</code> 同时使用；</li><li><code>-t</code> 为容器重新分配一个伪输入终端，容器的 Shell 会映射到当前的 Shell，然后在本机窗口输入的命令，就会传入容器，通常与 <code>-i</code> 同时使用；</li><li><code>--rm</code> 在容器终止运行后自动删除容器文件；</li><li><code>--restart=always</code> 设置容器自启动；</li><li><code>-v /xxx:/yyy</code> 映射命令，把本机的 xxx 目录映射到容器中的 yyy 目录，也就是说改变本机的 xxx 目录下的内容， 容器 yyy 目录中的内容也会改变；</li></ol><p>比如我在 CentOS 下跑起来一个 CentOS 的 Docker 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">docker pull centos</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 在上面下载的 centos 镜像基础上，新建一个容器名为 mycentos0901 的 centos 实例，并进入这个容器的 bash</span></span><br><span class="line">docker run -it --name mycentos0901 0d120b6ccaa8</span><br><span class="line"> </span><br><span class="line">[root@169c9fffeecd /]   <span class="comment"># 进入容器，下面输入命令，注意这里 root 后面的一串 ID</span></span><br><span class="line">ls       <span class="comment"># 可以看到centos的根目录文件列表</span></span><br><span class="line">docker   <span class="comment"># bash: docker: command not found 这个容器没有安装docker</span></span><br></pre></td></tr></table></figure><p>是不是很神奇，我们可以在一开始的 CentOS 下面执行 <code>docker ps</code> 来查看容器列表：</p><p><img src="da7f84acfd0b498596bffe68016aa52ctplv-k3u1fbpfcp-zoom-1.jpg"></p><p>你会发现上面那个 ID，正是下面列表中跑起来的这个容器的 ID，镜像的 ID 也是我们前面 <code>pull</code> 下来的 CentOS 镜像 ID，名字也是我们起的 <code>mycentos0901</code>。</p><p>如果 <code>docker run</code> 之后报 <code>Conflict. The container name &quot;xxxx&quot; is already in use by container</code> 就直接运行 <code>docker rm $(docker ps -a -q)</code> 删除已停止的容器，或者精确删除 <code>docker rm [containerID]</code> 也可以，就可以了。</p><h3 id="5-4-几个常见场景的命令使用"><a href="#5-4-几个常见场景的命令使用" class="headerlink" title="5.4 几个常见场景的命令使用"></a>5.4 几个常见场景的命令使用</h3><h4 id="守护式启动容器"><a href="#守护式启动容器" class="headerlink" title="守护式启动容器"></a>守护式启动容器</h4><p>使用 <code>centos</code> 以后台模式启动一个容器 <code>docker run -d --name mycentos0903 0d120b6ccaa8</code>，启动之后 <code>docker ps -a</code> 查看，发现容器并不在运行中，这是因为 Docker 的运行机制：<strong>Docker 容器后台运行，必须有一个前台进程</strong>。</p><p>容器运行的命令如果不是那些一直挂起的命令，比如 <code>top</code>、<code>tail</code> ，运行结束会自动退出。所以为了让容器持续在后台运行，那么需要将运行的程序以前台进程的形式运行。</p><p>比如这里在后台运行一个命令，这个命令一直在打印 <code>docker run -d centos /bin/sh -c &quot;while true; do echo hello zzyy; sleep 2; done&quot;</code>，然后我们 <code>logs</code> 查看一下：</p><p><img src="d34cc8a5aca14344aaca3d534b61ab76tplv-k3u1fbpfcp-zoom-1.jpg"></p><h4 id="退出容器后对容器操作"><a href="#退出容器后对容器操作" class="headerlink" title="退出容器后对容器操作"></a>退出容器后对容器操作</h4><p>退出容器后可以通过 <code>exec</code> 方法对正在运行的容器进行操作：</p><p><img src="9f407e78173b486b9767f30c03dfe1actplv-k3u1fbpfcp-zoom-1.jpg"></p><h4 id="在容器中拷贝文件到外部"><a href="#在容器中拷贝文件到外部" class="headerlink" title="在容器中拷贝文件到外部"></a>在容器中拷贝文件到外部</h4><p>拷贝文件使用 <code>cp</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp [容器ID]/[容器Names]:[要拷贝的文件目录] [本机目录]   <span class="comment"># 容器文件拷贝到本机</span></span><br><span class="line">docker cp [本机目录] [容器ID]/[容器Names]:[要拷贝的文件目录]   <span class="comment"># 本机文件拷贝到容器</span></span><br></pre></td></tr></table></figure><p><code>cp</code> 不仅能把容器中的文件/文件夹拷贝到本机，也可以把本机中的文件/文件夹拷贝到容器。</p><p>演示一下，这里先到容器里面创建一个无聊的文件 <code>xixi.txt</code>，然后拷贝到本机：</p><p><img src="8ba43e85a4bd4cd5b3575487c6416d6btplv-k3u1fbpfcp-zoom-1.jpg"></p><p>实用的时候，我们可以拷贝配置、日志等文件到本地。</p><h2 id="6-安装-MySQL"><a href="#6-安装-MySQL" class="headerlink" title="6. 安装 MySQL"></a>6. 安装 MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询镜像</span></span><br><span class="line">docker search mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载镜像，实测没配置镜像加速的时候会比较慢，配置了就好一些</span></span><br><span class="line">docker pull mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并运行容器</span></span><br><span class="line">docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=888888 -v /Users/sherlocked93/Personal/configs/mysql.d:/etc/mysql/conf.d --name localhost-mysql mysql</span><br></pre></td></tr></table></figure><p>稍微解释一下上面的参数：</p><ol><li><code>-p 3307:3306</code> 将本机的 3307 端口映射到 mysql 容器的 3306 端口，根据需要自行更改；</li><li><code>-e MYSQL_ROOT_PASSWORD=&lt;string&gt;</code> 设置远程登录的 root 用户密码；</li><li><code>--name &lt;string&gt;</code> 可选，设置容器别名；</li><li><code>-v xxx/mysql.d:/etc/mysql/conf.d</code> 将本地目录下设置文件夹映射到容器的 <code>/etc/mysql/conf.d</code></li><li><code>-v xxx/logs:/logs</code> 将本机指定目录下的 <code>logs</code> 目录挂载到容器的 <code>/logs</code></li><li><code>-v xxx/data:/var/lib/mysql</code> 将主机制定目录下的 <code>data</code> 目录挂载到容器的 <code>/var/lib/mysql</code></li></ol><p>运行截图：</p><p><img src="f616290662af446a8fa44be91ca52732tplv-k3u1fbpfcp-zoom-1.jpg"></p><p>然后去 Navicat 中就可以连接到 MySQL 了。</p><p>这也太爽了！真的是几行命令就装好了啊，比之前真是快乐多了 😂</p><h2 id="7-安装-Nginx"><a href="#7-安装-Nginx" class="headerlink" title="7. 安装 Nginx"></a>7. 安装 Nginx</h2><p>Nginx 的安装和其他的类似，如果你还不太了解 Nginx 如何使用，可以参看 这篇文章，看完基本就了解如何使用和配置了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询/下载镜像</span></span><br><span class="line">docker search nginx</span><br><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><img src="/2021/8/%E6%89%8B%E6%91%B8%E6%89%8B%E5%B8%A6%E4%BD%A0%20Docker%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/e7763230c080498d96d5f012581b03cetplv-k3u1fbpfcp-zoom-1.jpg" class=""><p>然后创建一个临时的容器，目的是把默认配置拷贝到本机，我这里把配置文件放到 <code>/mnt</code> 目录下，主要是三个配置文件夹：</p><ol><li><code>/etc/nginx</code> 放置 Nginx 配置文件；</li><li><code>/var/log/nginx/</code> 放置 Nginx 日志文件；</li><li><code>/usr/share/nginx/html/</code> 放置 Nginx 前端静态文件都放在这个文件夹；</li></ol><p>分别把这几个目录都拷贝到本机的 <code>/mnt</code> 文件夹下的 <code>nginx</code>、<code>nginx_logs</code>、<code>html</code> 文件夹。</p><p>刚刚创建的临时容器没用了 <code>docker rm -f [临时容器ID]</code> 把临时容器干掉，然后 <code>docker run</code> 重新创建 Nginx 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name localhost-nginx -p 8082:80 \</span><br><span class="line">-v /mnt/nginx:/etc/nginx \</span><br><span class="line">-v /mnt/nginx_logs:/var/<span class="built_in">log</span>/nginx \</span><br><span class="line">-v /mnt/html:/usr/share/nginx/html \</span><br><span class="line">--privileged=<span class="literal">true</span> nginx</span><br></pre></td></tr></table></figure><p><code>--privileged=true</code> 表示容器内部对挂载的目录拥有读写等特权。</p><p>其他配置刚刚上面之前已经讲过，应该不用讲了。</p><p><img src="9d56d1c678ea4ddaae2df83ccda76072tplv-k3u1fbpfcp-zoom-1.jpg"></p><p>然后在你自己浏览器上就可以访问了，如果是云服务器，记得开放对应端口。</p><h2 id="8-安装-Easy-Mock"><a href="#8-安装-Easy-Mock" class="headerlink" title="8. 安装 Easy Mock"></a>8. 安装 Easy Mock</h2><p>因为 Easy Mock 依赖 Redis 和 MongoDB，因此本地环境使用 docker-compose 来搭建 Easy Mock 应该算是最佳实践了。</p><h3 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker-compose"></a>安装 docker-compose</h3><blockquote><p>官方文档：<a href="https://link.zhihu.com/?target=https://docs.docker.com/compose/install/">docs.docker.com/compose/ins…</a></p></blockquote><p>首先你得确定拥有 docker 环境，如果你是 Windows / Mac 用户，那么安装客户端，就会自带 docker-compose 了。</p><p>因为本次我们是在云服务器 CentOS7.6 上搭建，所以我们需要自行安装 docker-compose，运行如下命令，下载当前稳定版本的 docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>修改文件权限为可执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><h3 id="编写-docker-compose-yml-配置文件"><a href="#编写-docker-compose-yml-配置文件" class="headerlink" title="编写 docker-compose.yml 配置文件"></a>编写 docker-compose.yml 配置文件</h3><p>可以参考<a href="https://github.com/easy-mock/easy-mock-docker">官方文档</a>给出的部署文档，也可以参考我下面的配置过程。</p><p>首先新建文件 <code>docker-compose.yml</code> 并将下面 docker-compose 文件内容复制进入 <code>docker-compose.yml</code>，然后将内容中注释位置替换为自己需要的本地地址</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"> </span><br><span class="line">services:</span><br><span class="line">  mongodb:</span><br><span class="line">    image: mongo:<span class="number">3.4</span>.<span class="number">1</span></span><br><span class="line">    volumes:</span><br><span class="line">      <span class="comment">#  /apps/easy-mock/data/db 是数据库文件存放地址，根据需要修改为本地地址</span></span><br><span class="line">      - <span class="string">&#x27;/apps/easy-mock/data/db:/data/db&#x27;</span></span><br><span class="line">    networks:</span><br><span class="line">      - easy-mock</span><br><span class="line">    restart: always</span><br><span class="line"> </span><br><span class="line">  redis:</span><br><span class="line">    image: redis:<span class="number">4.0</span>.<span class="number">6</span></span><br><span class="line">    command: redis-server --appendonly yes</span><br><span class="line">    volumes:</span><br><span class="line">      <span class="comment">#  /apps/easy-mock/data/redis 是 redis 数据文件存放地址，根据需要修改为本地地址</span></span><br><span class="line">      - <span class="string">&#x27;/apps/easy-mock/data/redis:/data&#x27;</span></span><br><span class="line">    networks:</span><br><span class="line">      - easy-mock</span><br><span class="line">    restart: always</span><br><span class="line"> </span><br><span class="line">  web:</span><br><span class="line">    image: easymock/easymock:<span class="number">1.6</span>.<span class="number">0</span></span><br><span class="line">    <span class="comment"># easy-mock 官方给出的文件，这里是 npm start，这里修改为 npm run dev</span></span><br><span class="line">    command: /bin/bash -c <span class="string">&quot;npm run dev:server&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">7300</span>:<span class="number">7300</span>  <span class="comment"># 改为你自己期望的映射</span></span><br><span class="line">    volumes:</span><br><span class="line">      <span class="comment"># 日志地址，根据需要修改为本地地址</span></span><br><span class="line">      - <span class="string">&#x27;/apps/easy-mock/logs:/home/easy-mock/easy-mock/logs&#x27;</span></span><br><span class="line">    networks:</span><br><span class="line">      - easy-mock</span><br><span class="line">    restart: always</span><br><span class="line"> </span><br><span class="line">networks:</span><br><span class="line">  easy-mock:</span><br></pre></td></tr></table></figure><h3 id="启动-Easy-Mock"><a href="#启动-Easy-Mock" class="headerlink" title="启动 Easy Mock"></a>启动 Easy Mock</h3><p>在 docker-compose 文件目录下，运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>如果遇到 easymock docker 实例报文件权限错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: EACCES: permission denied....</span><br></pre></td></tr></table></figure><p>要在项目根目录执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /yourfile/logs</span><br></pre></td></tr></table></figure><p>然后就可以通过浏览器上的 <code>你的域名.com:7300</code> 访问到 easy-mock 了！</p><p>如果你觉得域名后面跟着端口号挺难看的，你可以通过配置 Nginx 的二级域名来访问你部署的 easy-mock，配置二级域名的方法参见 <a href="https://juejin.im/post/6844904144235413512#heading-16">这篇文章</a></p><h2 id="9-可视化管理"><a href="#9-可视化管理" class="headerlink" title="9. 可视化管理"></a>9. 可视化管理</h2><p>关于可视化查询工具，这里就简单推介一个 <a href="https://github.com/jesseduffield/lazydocker">LazyDocker</a>，由于是在终端运行的，而且支持键盘操作和鼠标点击，就挺骚气的，有了这个一些查询语句可以少打几次了。</p><p>![lzd](/手摸手带你 Docker从入门到实践/520a02d65a9e4ca999013faba0241f7etplv-k3u1fbpfcp-zoom-1.image#vwid=1706&amp;vhei=960)</p><p>安装比较简单，运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -it -v \</span><br><span class="line">/var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">-v ~/.config/lazydocker:/.config/jesseduffield/lazydocker \</span><br><span class="line">lazyteam/lazydocker</span><br></pre></td></tr></table></figure><p>可以设置一个终端的 alias</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> lzd=<span class="string">&#x27;docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock -v ~/.config/lazydocker:/.config/jesseduffield/lazydocker lazyteam/lazydocker&#x27;</span></span><br></pre></td></tr></table></figure><p>然后你在终端输入 <code>lzd</code> 就可以浏览你的镜像、容器、日志、配置、状态等等内容了。</p><h2 id="10-结语"><a href="#10-结语" class="headerlink" title="10. 结语"></a>10. 结语</h2><p>由于在下目前使用 Docker 的主要场景是 MySQL、Nginx 之类工具的安装，所以本文所介绍的内容也大多属于这个场景。</p><p>篇幅原因 Docker 还有一些内容本文没有介绍，但上面的内容已基本满足日常的使用，其他 Docker 的内容可以关注一下在下的后续文章～</p><hr><p>网上的帖子大多深浅不一，甚至有些前后矛盾，在下的文章都是学习过程中的总结，如果发现错误，欢迎留言指出~</p><blockquote><p>参考文档：</p><ol><li><a href="https://www.docker.com/">Empowering App Development for Developers | Docker 官方网站</a></li><li><a href="https://www.bilibili.com/video/BV1Vs411E7AR">Docker核心技术（基础篇）</a></li><li><a href="https://www.cnblogs.com/zhi-leaf/p/10561766.html">Docker安装mysql</a></li><li><a href="https://docs.docker.com/engine/reference/run/">Docker文档</a></li><li><a href="https://docs.docker.com/compose/reference/overview/">Docker-compose文档</a></li><li><a href="https://zhuanlan.zhihu.com/p/91646508">使用 docker 运行 easy-mock - 知乎</a></li><li><a href="https://www.jianshu.com/p/cdadbe2ade44">docker-compose easy-mock - 简书</a></li><li><a href="https://xkcoding.com/2019/10/08/docker-easy-mock.html">使用 docker 运行 easy-mock | CodingDiary</a></li><li><a href="https://github.com/easy-mock/easy-mock-docker">easymock官方docker仓库：easy-mock/easy-mock-docker</a></li><li><a href="https://juejin.im/post/6844904016086827016">使用docker安装nginx</a></li></ol></blockquote><p>作者其他高赞文章：</p><blockquote><ol><li><a href="https://juejin.im/post/6844903641468403726">JS 中可以提升幸福度的小技巧</a></li><li><a href="https://juejin.im/post/6844903598409646088">Vue 使用中的小技巧</a></li><li><a href="https://juejin.im/post/6844904144235413512">Nginx 从入门到实践，万字详解！</a></li><li><a href="https://juejin.im/post/6844904080972709901">半小时搞会 CentOS 入门必备基础知识</a></li><li><a href="https://juejin.im/post/6844903939289120782">手摸手 Webpack 多入口配置实践</a></li><li><a href="https://juejin.im/post/6844903773219848206">前端路由跳转基本原理</a></li></ol></blockquote><p>PS：本文收录在我的博客，地址 <a href="https://github.com/SHERlocked93/blog">Github - SHERlocked93/blog</a>，也欢迎大家关注我的公众号【前端下午茶】，一起加油吧。 如果你感觉文章不错的话，也别忘了给作者点赞支持一下～</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx从入门到实践---万字详解</title>
      <link href="/2021/8/Nginx%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5---%E4%B8%87%E5%AD%97%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/8/Nginx%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5---%E4%B8%87%E5%AD%97%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>最近越来越频繁地遇到需要配置反向代理的场景，在自己搭建博客的时候，也不可避免要用到 Nginx，所以这段时间集中学习了一下 Nginx，同时做了一些笔记，希望也可以帮助到大家～ 😜</p><p>这篇文章会在 CentOS 环境下安装和使用 Nginx，如果对 CentOS 基本操作还不太清楚的，可以先看看 <a href="https://juejin.cn/post/6844904080972709901">&lt;半小时搞会 CentOS 入门必备基础知识&gt;</a> 一文先做了解。</p><p>相信作为开发者，大家都知道 Nginx 的重要，废话不多说，一起来学习吧。</p><p>CentOS 版本： <code>7.6</code></p><p>Nginx 版本： <code>1.16.1</code></p><h2 id="1-Nginx-介绍"><a href="#1-Nginx-介绍" class="headerlink" title="1. Nginx 介绍"></a>1. Nginx 介绍</h2><p>传统的 Web 服务器，每个客户端连接作为一个单独的进程或线程处理，需在切换任务时将 CPU 切换到新的任务并创建一个新的运行时上下文，消耗额外的内存和 CPU 时间，当并发请求增加时，服务器响应变慢，从而对性能产生负面影响。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e967b9714ed~tplv-t2oaga2asx-watermark.awebp" alt="Nginx"></p><p>Nginx 是开源、高性能、高可靠的 Web 和反向代理服务器，而且支持热部署，几乎可以做到 7 * 24 小时不间断运行，即使运行几个月也不需要重新启动，还能在不间断服务的情况下对软件版本进行热更新。性能是 Nginx 最重要的考量，其占用内存少、并发能力强、能支持高达 5w 个并发连接数，最重要的是，Nginx 是免费的并可以商业化，配置使用也比较简单。</p><p>Nginx 的最重要的几个使用场景：</p><ol><li>静态资源服务，通过本地文件系统提供服务；</li><li>反向代理服务，延伸出包括缓存、负载均衡等；</li><li>API 服务，OpenResty ；</li></ol><p>对于前端来说 Node.js 不陌生了，Nginx 和 Node.js 的很多理念类似，HTTP 服务器、事件驱动、异步非阻塞等，且 Nginx 的大部分功能使用 Node.js 也可以实现，但 Nginx 和 Node.js 并不冲突，都有自己擅长的领域。Nginx 擅长于底层服务器端资源的处理（静态资源处理转发、反向代理，负载均衡等），Node.js 更擅长上层具体业务逻辑的处理，两者可以完美组合，共同助力前端开发。</p><p>下面我们着重学习一下 Nginx 的使用。</p><h2 id="2-相关概念"><a href="#2-相关概念" class="headerlink" title="2. 相关概念"></a>2. 相关概念</h2><h3 id="2-1-简单请求和非简单请求"><a href="#2-1-简单请求和非简单请求" class="headerlink" title="2.1 简单请求和非简单请求"></a>2.1 简单请求和非简单请求</h3><p>首先我们来了解一下简单请求和非简单请求，如果同时满足下面两个条件，就属于简单请求：</p><ol><li>请求方法是 <code>HEAD</code>、<code>GET</code>、<code>POST</code> 三种之一；</li><li>HTTP 头信息不超过右边着几个字段：<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code>、<code>Last-Event-ID</code> <code>Content-Type</code> 只限于三个值 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code>；</li></ol><p>凡是不同时满足这两个条件的，都属于非简单请求。</p><p>浏览器处理简单请求和非简单请求的方式不一样：</p><p><strong>简单请求</strong></p><p>对于简单请求，浏览器会在头信息中增加 <code>Origin</code> 字段后直接发出，<code>Origin</code> 字段用来说明，本次请求来自的哪个源（协议+域名+端口）。</p><p>如果服务器发现 <code>Origin</code> 指定的源不在许可范围内，服务器会返回一个正常的 HTTP 回应，浏览器取到回应之后发现回应的头信息中没有包含 <code>Access-Control-Allow-Origin</code> 字段，就抛出一个错误给 XHR 的 <code>error</code> 事件；</p><p>如果服务器发现 <code>Origin</code> 指定的域名在许可范围内，服务器返回的响应会多出几个 <code>Access-Control-</code> 开头的头信息字段。</p><p><strong>非简单请求</strong></p><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 <code>PUT</code> 或 <code>DELETE</code>，或 <code>Content-Type</code> 值为 <code>application/json</code>。浏览器会在正式通信之前，发送一次 HTTP 预检 <code>OPTIONS</code> 请求，先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 请求方法和头信息字段。只有得到肯定答复，浏览器才会发出正式的 <code>XHR</code> 请求，否则报错。</p><h3 id="2-2-跨域"><a href="#2-2-跨域" class="headerlink" title="2.2 跨域"></a>2.2 跨域</h3><p>在浏览器上当前访问的网站向另一个网站发送请求获取数据的过程就是<strong>跨域请求</strong>。</p><p>跨域是浏览器的<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">同源策略</a>决定的，是一个重要的浏览器安全策略，用于限制一个 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Glossary/%E6%BA%90">origin</a> 的文档或者它加载的脚本与另一个源的资源进行交互，它能够帮助阻隔恶意文档，减少可能被攻击的媒介，可以使用 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Glossary/CORS">CORS</a> 配置解除这个限制。</p><p>关于跨域网上已经有很多解释，这里就不啰嗦，也可以直接看 MDN 的 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">&lt;浏览器的同源策略&gt;</a> 文档进一步了解，这里就列举几个同源和不同元的例子，相信程序员都能看得懂。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同源的例子</span></span><br><span class="line">http://example.com/app1/index.html  <span class="comment"># 只是路径不同</span></span><br><span class="line">http://example.com/app2/index.html</span><br><span class="line"></span><br><span class="line">http://Example.com:80  <span class="comment"># 只是大小写差异</span></span><br><span class="line">http://example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同源的例子</span></span><br><span class="line">http://example.com/app1   <span class="comment"># 协议不同</span></span><br><span class="line">https://example.com/app2</span><br><span class="line"></span><br><span class="line">http://example.com        <span class="comment"># host 不同</span></span><br><span class="line">http://www.example.com</span><br><span class="line">http://myapp.example.com</span><br><span class="line"></span><br><span class="line">http://example.com        <span class="comment"># 端口不同</span></span><br><span class="line">http://example.com:8080</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="2-3-正向代理和反向代理"><a href="#2-3-正向代理和反向代理" class="headerlink" title="2.3 正向代理和反向代理"></a>2.3 正向代理和反向代理</h3><p>反向代理（Reverse Proxy）对应的是正向代理（Forward Proxy），他们的区别：</p><p><strong>正向代理：</strong> 一般的访问流程是客户端直接向目标服务器发送请求并获取内容，使用正向代理后，客户端改为向代理服务器发送请求，并指定目标服务器（原始服务器），然后由代理服务器和原始服务器通信，转交请求并获得的内容，再返回给客户端。正向代理隐藏了真实的客户端，为客户端收发请求，使真实客户端对服务器不可见；</p><p>举个具体的例子 🌰，你的浏览器无法直接访问谷哥，这时候可以通过一个代理服务器来帮助你访问谷哥，那么这个服务器就叫正向代理。</p><p><strong>反向代理：</strong> 与一般访问流程相比，使用反向代理后，直接收到请求的服务器是代理服务器，然后将请求转发给内部网络上真正进行处理的服务器，得到的结果返回给客户端。反向代理隐藏了真实的服务器，为服务器收发请求，使真实服务器对客户端不可见。一般在处理跨域请求的时候比较常用。现在基本上所有的大型网站都设置了反向代理。</p><p>举个具体的例子 🌰，去饭店吃饭，可以点川菜、粤菜、江浙菜，饭店也分别有三个菜系的厨师 👨‍🍳，但是你作为顾客不用管哪个厨师给你做的菜，只用点菜即可，小二将你菜单中的菜分配给不同的厨师来具体处理，那么这个小二就是反向代理服务器。</p><p>简单的说，一般给客户端做代理的都是正向代理，给服务器做代理的就是反向代理。</p><p>正向代理和反向代理主要的原理区别可以参见下图：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e96d99eecdc~tplv-t2oaga2asx-watermark.awebp" alt="正向代理与反向代理"></p><h3 id="2-4-负载均衡"><a href="#2-4-负载均衡" class="headerlink" title="2.4 负载均衡"></a>2.4 负载均衡</h3><p>一般情况下，客户端发送多个请求到服务器，服务器处理请求，其中一部分可能要操作一些资源比如数据库、静态资源等，服务器处理完毕后，再将结果返回给客户端。</p><p>这种模式对于早期的系统来说，功能要求不复杂，且并发请求相对较少的情况下还能胜任，成本也低。随着信息数量不断增长，访问量和数据量飞速增长，以及系统业务复杂度持续增加，这种做法已无法满足要求，并发量特别大时，服务器容易崩。</p><p>很明显这是由于服务器性能的瓶颈造成的问题，除了堆机器之外，最重要的做法就是负载均衡。</p><p>请求爆发式增长的情况下，单个机器性能再强劲也无法满足要求了，这个时候集群的概念产生了，单个服务器解决不了的问题，可以使用多个服务器，然后将请求分发到各个服务器上，将负载分发到不同的服务器，这就是<strong>负载均衡</strong>，核心是「分摊压力」。Nginx 实现负载均衡，一般来说指的是将请求转发给服务器集群。</p><p>举个具体的例子 🌰，晚高峰乘坐地铁的时候，入站口经常会有地铁工作人员大喇叭“请走 B 口，B 口人少车空….”，这个工作人员的作用就是负载均衡。</p><p><img src="https://cdn.jsdelivr.net/gh/SHERlocked93/pic@env/uPic/2020-03-09-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png" alt="负载均衡"></p><h3 id="2-5-动静分离"><a href="#2-5-动静分离" class="headerlink" title="2.5 动静分离"></a>2.5 动静分离</h3><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。</p><p><img src="https://cdn.jsdelivr.net/gh/SHERlocked93/pic@env/uPic/2020-03-09-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.png" alt="动静分离"></p><p>一般来说，都需要将动态资源和静态资源分开，由于 Nginx 的高并发和静态资源缓存等特性，经常将静态资源部署在 Nginx 上。如果请求的是静态资源，直接到静态资源目录获取资源，如果是动态资源的请求，则利用反向代理的原理，把请求转发给对应后台应用去处理，从而实现动静分离。</p><p>使用前后端分离后，可以很大程度提升静态资源的访问速度，即使动态服务不可用，静态资源的访问也不会受到影响。</p><h2 id="3-Nginx-快速安装"><a href="#3-Nginx-快速安装" class="headerlink" title="3. Nginx 快速安装"></a>3. Nginx 快速安装</h2><h3 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h3><p>我们可以先看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum list | grep nginx</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>来看看</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e967ad35156~tplv-t2oaga2asx-watermark.awebp" alt="image-20200307180412726"></p><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>来安装 Nginx，然后我们在命令行中 <code>nginx -v</code> 就可以看到具体的 Nginx 版本信息，也就安装完毕了。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e967cd99d22~tplv-t2oaga2asx-watermark.awebp" alt="image-20200307180545816"></p><h3 id="3-2-相关文件夹"><a href="#3-2-相关文件夹" class="headerlink" title="3.2 相关文件夹"></a>3.2 相关文件夹</h3><p>然后我们可以使用 <code>rpm -ql nginx</code> 来查看 Nginx 被安装到了什么地方，有哪些相关目录，其中位于 <code>/etc</code> 目录下的主要是配置文件，还有一些文件见下图：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e969c75753f~tplv-t2oaga2asx-watermark.awebp" alt="Xnip2020-03-07_21-46-11"></p><p>主要关注的文件夹有两个：</p><ol><li><code>/etc/nginx/conf.d/</code> 文件夹，是我们进行子配置的配置项存放处，<code>/etc/nginx/nginx.conf</code> 主配置文件会默认把这个文件夹中所有子配置项都引入；</li><li><code>/usr/share/nginx/html/</code> 文件夹，通常静态文件都放在这个文件夹，也可以根据你自己的习惯放其他地方；</li></ol><h3 id="3-3-跑起来康康"><a href="#3-3-跑起来康康" class="headerlink" title="3.3 跑起来康康"></a>3.3 跑起来康康</h3><p>安装之后开启 Nginx，如果系统开启了防火墙，那么需要设置一下在防火墙中加入需要开放的端口，下面列举几个常用的防火墙操作（没开启的话不用管这个）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld  <span class="comment"># 开启防火墙</span></span><br><span class="line">systemctl stop firewalld   <span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl status firewalld <span class="comment"># 查看防火墙开启状态，显示running则是正在运行</span></span><br><span class="line">firewall-cmd --reload      <span class="comment"># 重启防火墙，永久打开端口需要reload一下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加开启端口，--permanent表示永久打开，不加是临时打开重启之后失效</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=8888/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙，添加的端口也可以看到</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>然后设置 Nginx 的开机启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>启动 Nginx （其他命令后面有详细讲解）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>然后访问你的 IP，这时候就可以看到 Nginx 的欢迎页面了～ <code>Welcome to nginx！</code> 👏</p><h3 id="3-4-安装-nvm-amp-node-amp-git"><a href="#3-4-安装-nvm-amp-node-amp-git" class="headerlink" title="3.4 安装 nvm &amp; node &amp; git"></a>3.4 安装 nvm &amp; node &amp; git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 nvm，或者看官网的步骤 https://github.com/nvm-sh/nvm#install--update-script</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span>   ~/.bashrc    <span class="comment"># 安装完毕后，更新配置文件即可使用 nvm 命令</span></span><br><span class="line">nvm ls-remote         <span class="comment"># 查看远程 node 版本</span></span><br><span class="line">nvm install v12.16.3  <span class="comment"># 选一个你要安装的版本安装，我这里选择 12.16.3</span></span><br><span class="line">nvm list              <span class="comment"># 安装完毕查看安装的 node 版本</span></span><br><span class="line">node -v               <span class="comment"># 查看是否安装好了</span></span><br><span class="line"></span><br><span class="line">yum install git   <span class="comment"># git 安装</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="4-Nginx-操作常用命令"><a href="#4-Nginx-操作常用命令" class="headerlink" title="4. Nginx 操作常用命令"></a>4. Nginx 操作常用命令</h2><p>Nginx 的命令在控制台中输入 <code>nginx -h</code> 就可以看到完整的命令，这里列举几个常用的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload  <span class="comment"># 向主进程发送信号，重新加载配置文件，热重启</span></span><br><span class="line">nginx -s reopen <span class="comment"># 重启 Nginx</span></span><br><span class="line">nginx -s stop    <span class="comment"># 快速关闭</span></span><br><span class="line">nginx -s quit    <span class="comment"># 等待工作进程处理完成后关闭</span></span><br><span class="line">nginx -T         <span class="comment"># 查看当前 Nginx 最终的配置</span></span><br><span class="line">nginx -t -c &lt;配置路径&gt;    <span class="comment"># 检查配置是否有问题，如果已经在配置目录，则不需要-c</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>systemctl</code> 是 Linux 系统应用管理工具 <code>systemd</code> 的主命令，用于管理系统，我们也可以用它来对 Nginx 进行管理，相关命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx    <span class="comment"># 启动 Nginx</span></span><br><span class="line">systemctl stop nginx     <span class="comment"># 停止 Nginx</span></span><br><span class="line">systemctl restart nginx  <span class="comment"># 重启 Nginx</span></span><br><span class="line">systemctl reload nginx   <span class="comment"># 重新加载 Nginx，用于修改配置后</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx   <span class="comment"># 设置开机启动 Nginx</span></span><br><span class="line">systemctl <span class="built_in">disable</span> nginx  <span class="comment"># 关闭开机启动 Nginx</span></span><br><span class="line">systemctl status nginx   <span class="comment"># 查看 Nginx 运行状态</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="5-Nginx-配置语法"><a href="#5-Nginx-配置语法" class="headerlink" title="5. Nginx 配置语法"></a>5. Nginx 配置语法</h2><p>就跟前面文件作用讲解的图所示，Nginx 的主配置文件是 <code>/etc/nginx/nginx.conf</code>，你可以使用 <code>cat -n nginx.conf</code> 来查看配置。</p><p><code>nginx.conf</code> 结构图可以这样概括：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">main        <span class="comment"># 全局配置，对全局生效</span></span><br><span class="line">├── events  <span class="comment"># 配置影响 Nginx 服务器或与用户的网络连接</span></span><br><span class="line">├── http    <span class="comment"># 配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置</span></span><br><span class="line">│   ├── upstream <span class="comment"># 配置后端服务器具体地址，负载均衡配置不可或缺的部分</span></span><br><span class="line">│   ├── server   <span class="comment"># 配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块</span></span><br><span class="line">│   ├── server</span><br><span class="line">│   │   ├── location  <span class="comment"># server 块可以包含多个 location 块，location 指令用于匹配 uri</span></span><br><span class="line">│   │   ├── location</span><br><span class="line">│   │   └── ...</span><br><span class="line">│   └── ...</span><br><span class="line">└── ...</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>一个 Nginx 配置文件的结构就像 <code>nginx.conf</code> 显示的那样，配置文件的语法规则：</p><ol><li>配置文件由指令与指令块构成；</li><li>每条指令以 <code>;</code> 分号结尾，指令与参数间以空格符号分隔；</li><li>指令块以 <code>&#123;&#125;</code> 大括号将多条指令组织在一起；</li><li><code>include</code> 语句允许组合多个配置文件以提升可维护性；</li><li>使用 <code>#</code> 符号添加注释，提高可读性；</li><li>使用 <code>$</code> 符号使用变量；</li><li>部分指令的参数支持正则表达式；</li></ol><h3 id="5-1-典型配置"><a href="#5-1-典型配置" class="headerlink" title="5.1 典型配置"></a>5.1 典型配置</h3><p>Nginx 的典型配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span>  nginx;                        <span class="comment"># 运行用户，默认即是nginx，可以不进行设置</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;                <span class="comment"># Nginx 进程数，一般设置为和 CPU 核数一样</span></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log <span class="literal">warn</span>;   <span class="comment"># Nginx 的错误日志存放目录</span></span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;      <span class="comment"># Nginx 服务启动时的 pid 存放位置</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;     <span class="comment"># 使用epoll的I/O模型(如果你不知道Nginx该使用哪种轮询方法，会自动选择一个最适合你操作系统的)</span></span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;   <span class="comment"># 每个进程允许最大并发数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;   <span class="comment"># 配置使用最频繁的部分，代理、缓存、日志定义等绝大多数功能和第三方模块的配置都在这里设置</span></span><br><span class="line">    <span class="comment"># 设置日志模式</span></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;   <span class="comment"># Nginx访问日志存放位置</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>            <span class="literal">on</span>;   <span class="comment"># 开启高效传输模式</span></span><br><span class="line">    <span class="attribute">tcp_nopush</span>          <span class="literal">on</span>;   <span class="comment"># 减少网络报文段的数量</span></span><br><span class="line">    <span class="attribute">tcp_nodelay</span>         <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>   <span class="number">65</span>;   <span class="comment"># 保持连接的时间，也叫超时时间，单位秒</span></span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span>             /etc/nginx/mime.types;      <span class="comment"># 文件扩展名与类型映射表</span></span><br><span class="line">    <span class="attribute">default_type</span>        application/octet-stream;   <span class="comment"># 默认文件类型</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;   <span class="comment"># 加载子配置项</span></span><br><span class="line">    </span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;       <span class="comment"># 配置监听的端口</span></span><br><span class="line">    <span class="attribute">server_name</span>  localhost;    <span class="comment"># 配置的域名</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>   /usr/share/nginx/html;  <span class="comment"># 网站根目录</span></span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;   <span class="comment"># 默认首页文件</span></span><br><span class="line">    <span class="attribute">deny</span> <span class="number">172.168.22.11</span>;   <span class="comment"># 禁止访问的ip地址，可以为all</span></span><br><span class="line">    <span class="attribute">allow</span> <span class="number">172.168.33.44</span>； <span class="comment"># 允许访问的ip地址，可以为all</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error_page <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;  <span class="comment"># 默认50x对应的访问页面</span></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">400</span> <span class="number">404</span> <span class="literal">error</span>.html;   <span class="comment"># 同上</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>server 块可以包含多个 location 块，location 指令用于匹配 uri，语法：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> [ = | <span class="regexp">~ |</span> <span class="regexp">~* |</span><span class="regexp"> ^~]</span> uri &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>指令后面：</p><ol><li><code>=</code> 精确匹配路径，用于不含正则表达式的 uri 前，如果匹配成功，不再进行后续的查找；</li><li><code>^~</code> 用于不含正则表达式的 uri； 前，表示如果该符号后面的字符是最佳匹配，采用该规则，不再进行后续的查找；</li><li><code>~</code> 表示用该符号后面的正则去匹配路径，区分大小写；</li><li><code>~*</code> 表示用该符号后面的正则去匹配路径，不区分大小写。跟 <code>~</code> 优先级都比较低，如有多个location的正则能匹配的话，则使用正则表达式最长的那个；</li></ol><p>如果 uri 包含正则表达式，则必须要有 <code>~</code> 或 <code>~*</code> 标志。</p><h3 id="5-2-全局变量"><a href="#5-2-全局变量" class="headerlink" title="5.2 全局变量"></a>5.2 全局变量</h3><p>Nginx 有一些常用的全局变量，你可以在配置的任何位置使用它们，如下表：</p><table><thead><tr><th>全局变量名</th><th>功能</th></tr></thead><tbody><tr><td><code>$host</code></td><td>请求信息中的 <code>Host</code>，如果请求中没有 <code>Host</code> 行，则等于设置的服务器名，不包含端口</td></tr><tr><td><code>$request_method</code></td><td>客户端请求类型，如 <code>GET</code>、<code>POST</code></td></tr><tr><td><code>$remote_addr</code></td><td>客户端的 <code>IP</code> 地址</td></tr><tr><td><code>$args</code></td><td>请求中的参数</td></tr><tr><td><code>$arg_PARAMETER</code></td><td><code>GET</code> 请求中变量名 PARAMETER 参数的值，例如：<code>$http_user_agent</code>(Uaer-Agent 值), <code>$http_referer</code>…</td></tr><tr><td><code>$content_length</code></td><td>请求头中的 <code>Content-length</code> 字段</td></tr><tr><td><code>$http_user_agent</code></td><td>客户端agent信息</td></tr><tr><td><code>$http_cookie</code></td><td>客户端cookie信息</td></tr><tr><td><code>$remote_addr</code></td><td>客户端的IP地址</td></tr><tr><td><code>$remote_port</code></td><td>客户端的端口</td></tr><tr><td><code>$http_user_agent</code></td><td>客户端agent信息</td></tr><tr><td><code>$server_protocol</code></td><td>请求使用的协议，如 <code>HTTP/1.0</code>、<code>HTTP/1.1</code></td></tr><tr><td><code>$server_addr</code></td><td>服务器地址</td></tr><tr><td><code>$server_name</code></td><td>服务器名称</td></tr><tr><td><code>$server_port</code></td><td>服务器的端口号</td></tr><tr><td><code>$scheme</code></td><td>HTTP 方法（如http，https）</td></tr></tbody></table><p>还有更多的内置预定义变量，可以直接搜索关键字「nginx内置预定义变量」可以看到一堆博客写这个，这些变量都可以在配置文件中直接使用。</p><h2 id="6-设置二级域名虚拟主机"><a href="#6-设置二级域名虚拟主机" class="headerlink" title="6. 设置二级域名虚拟主机"></a>6. 设置二级域名虚拟主机</h2><p>在某某云 ☁️ 上购买了域名之后，就可以配置虚拟主机了，一般配置的路径在 <code>域名管理 -&gt; 解析 -&gt; 添加记录</code> 中添加二级域名，配置后某某云会把二级域名也解析到我们配置的服务器 IP 上，然后我们在 Nginx 上配置一下虚拟主机的访问监听，就可以拿到从这个二级域名过来的请求了。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e96a168c66a~tplv-t2oaga2asx-watermark.awebp" alt="image-20200426150644768"></p><p>现在我自己的服务器上配置了一个 fe 的二级域名，也就是说在外网访问 <code>fe.sherlocked93.club</code> 的时候，也可以访问到我们的服务器了。</p><p>由于默认配置文件 <code>/etc/nginx/nginx.conf</code> 的 http 模块中有一句 <code>include /etc/nginx/conf.d/*.conf</code> 也就是说 <code>conf.d</code> 文件夹下的所有 <code>*.conf</code> 文件都会作为子配置项被引入配置文件中。为了维护方便，我在 <code>/etc/nginx/conf.d</code> 文件夹中新建一个 <code>fe.sherlocked93.club.conf</code> ：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/conf.d/fe.sherlocked93.club.conf</span></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> fe.sherlocked93.club;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span>  /usr/share/nginx/html/fe;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>然后在 <code>/usr/share/nginx/html</code> 文件夹下新建 fe 文件夹，新建文件 <code>index.html</code>，内容随便写点，改完 <code>nginx -s reload</code> 重新加载，浏览器中输入 <code>fe.sherlocked93.club</code>，发现从二级域名就可以访问到我们刚刚新建的 fe 文件夹：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e96a60a5e51~tplv-t2oaga2asx-watermark.awebp" alt="image-20200426153006505"></p><h2 id="7-配置反向代理"><a href="#7-配置反向代理" class="headerlink" title="7. 配置反向代理"></a>7. 配置反向代理</h2><p>反向代理是工作中最常用的服务器功能，经常被用来解决跨域问题，下面简单介绍一下如何实现反向代理。</p><p>首先进入 Nginx 的主配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>为了看起来方便，把行号显示出来 <code>:set nu</code> （个人习惯），然后我们去 <code>http</code> 模块的 <code>server</code> 块中的 <code>location /</code>，增加一行将默认网址重定向到最大学习网站 Bilibili 的 <code>proxy_pass</code> 配置 🤓 ：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e96a6d7033c~tplv-t2oaga2asx-watermark.awebp" alt="image-20200311153131642"></p><p>改完保存退出，<code>nginx -s reload</code> 重新加载，进入默认网址，那么现在就直接跳转到 B 站了，实现了一个简单的代理。</p><p>实际使用中，可以将请求转发到本机另一个服务器上，也可以根据访问的路径跳转到不同端口的服务中。</p><p>比如我们监听 <code>9001</code> 端口，然后把访问不同路径的请求进行反向代理：</p><ol><li>把访问 <code>http://127.0.0.1:9001/edu</code> 的请求转发到 <code>http://127.0.0.1:8080</code></li><li>把访问 <code>http://127.0.0.1:9001/vod</code> 的请求转发到 <code>http://127.0.0.1:8081</code></li></ol><p>这种要怎么配置呢，首先同样打开主配置文件，然后在 http 模块下增加一个 server 块：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">9001</span>;</span><br><span class="line">  <span class="attribute">server_name</span> <span class="regexp">*.sherlocked</span>93.club;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~ /edu/</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~ /vod/</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8081;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>反向代理还有一些其他的指令，可以了解一下：</p><ol><li><code>proxy_set_header</code>：在将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息。</li><li><code>proxy_connect_timeout</code>：配置Nginx与后端代理服务器尝试建立连接的超时时间。</li><li><code>proxy_read_timeout</code>：配置Nginx向后端服务器组发出read请求后，等待相应的超时时间。</li><li><code>proxy_send_timeout</code>：配置Nginx向后端服务器组发出write请求后，等待相应的超时时间。</li><li><code>proxy_redirect</code>：用于修改后端服务器返回的响应头中的Location和Refresh。</li></ol><h2 id="8-跨域-CORS-配置"><a href="#8-跨域-CORS-配置" class="headerlink" title="8. 跨域 CORS 配置"></a>8. 跨域 CORS 配置</h2><p>关于简单请求、非简单请求、跨域的概念，前面已经介绍过了，还不了解的可以看看前面的讲解。现在前后端分离的项目一统天下，经常本地起了前端服务，需要访问不同的后端地址，不可避免遇到跨域问题。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e96b16214cc~tplv-t2oaga2asx-watermark.awebp" alt="image-20200427220536208"></p><p>要解决跨域问题，我们来制造一个跨域问题。首先和前面设置二级域名的方式一样，先设置好 <code>fe.sherlocked93.club</code> 和 <code>be.sherlocked93.club</code> 二级域名，都指向本云服务器地址，虽然对应 IP 是一样的，但是在 <code>fe.sherlocked93.club</code> 域名发出的请求访问 <code>be.sherlocked93.club</code> 域名的请求还是跨域了，因为访问的 host 不一致（如果不知道啥原因参见前面跨域的内容）。</p><h3 id="8-1-使用反向代理解决跨域"><a href="#8-1-使用反向代理解决跨域" class="headerlink" title="8.1 使用反向代理解决跨域"></a>8.1 使用反向代理解决跨域</h3><p>在前端服务地址为 <code>fe.sherlocked93.club</code> 的页面请求 <code>be.sherlocked93.club</code> 的后端服务导致的跨域，可以这样配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">9001</span>;</span><br><span class="line">  <span class="attribute">server_name</span> fe.sherlocked93.club;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> be.sherlocked93.club;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这样就将对前一个域名 <code>fe.sherlocked93.club</code> 的请求全都代理到了 <code>be.sherlocked93.club</code>，前端的请求都被我们用服务器代理到了后端地址下，绕过了跨域。</p><p>这里对静态文件的请求和后端服务的请求都以 <code>fe.sherlocked93.club</code> 开始，不易区分，所以为了实现对后端服务请求的统一转发，通常我们会约定对后端服务的请求加上 <code>/apis/</code> 前缀或者其他的 path 来和对静态资源的请求加以区分，此时我们可以这样配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求跨域，约定代理后端服务请求path以/apis/开头</span></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~/apis/</span> &#123;</span><br><span class="line">    <span class="comment"># 这里重写了请求，将正则匹配中的第一个分组的path拼接到真正的请求后面，并用break停止后续匹配</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/apis/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> be.sherlocked93.club;</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 两个域名之间cookie的传递与回写</span></span><br><span class="line">    <span class="attribute">proxy_cookie_domain</span> be.sherlocked93.club fe.sherlocked93.club;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这样，静态资源我们使用 <code>fe.sherlocked93.club/xx.html</code>，动态资源我们使用 <code>fe.sherlocked93.club/apis/getAwo</code>，浏览器页面看起来仍然访问的前端服务器，绕过了浏览器的同源策略，毕竟我们看起来并没有跨域。</p><p>也可以统一一点，直接把前后端服务器地址直接都转发到另一个 <code>server.sherlocked93.club</code>，只通过在后面添加的 path 来区分请求的是静态资源还是后端服务，看需求了。</p><h3 id="8-2-配置-header-解决跨域"><a href="#8-2-配置-header-解决跨域" class="headerlink" title="8.2 配置 header 解决跨域"></a>8.2 配置 header 解决跨域</h3><p>当浏览器在访问跨源的服务器时，也可以在跨域的服务器上直接设置 Nginx，从而前端就可以无感地开发，不用把实际上访问后端的地址改成前端服务的地址，这样可适性更高。</p><p>比如前端站点是 <code>fe.sherlocked93.club</code>，这个地址下的前端页面请求 <code>be.sherlocked93.club</code> 下的资源，比如前者的 <code>fe.sherlocked93.club/index.html</code> 内容是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>welcome fe.sherlocked93.club!!<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="javascript">    xmlhttp.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://be.sherlocked93.club/index.html&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    xmlhttp.send();</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>打开浏览器访问 <code>fe.sherlocked93.club/index.html</code> 的结果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e96b99b44b7~tplv-t2oaga2asx-watermark.awebp" alt="image-20200428191153736"></p><p>很明显这里是跨域请求，在浏览器中直接访问 <code>http://be.sherlocked93.club/index.html</code> 是可以访问到的，但是在 <code>fe.sherlocked93.club</code> 的 html 页面访问就会出现跨域。</p><p>在 <code>/etc/nginx/conf.d/</code> 文件夹中新建一个配置文件，对应二级域名 <code>be.sherlocked93.club</code> ：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/conf.d/be.sherlocked93.club.conf</span></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  be.sherlocked93.club;</span><br><span class="line">  </span><br><span class="line"><span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> $http_origin;   <span class="comment"># 全局变量获得当前请求origin，带cookie的请求不支持*</span></span><br><span class="line"><span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;    <span class="comment"># 为 true 可带上 cookie</span></span><br><span class="line"><span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;  <span class="comment"># 允许请求方法</span></span><br><span class="line"><span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> $http_access_control_request_headers;  <span class="comment"># 允许请求的 header，可以为 *</span></span><br><span class="line"><span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span> <span class="string">&#x27;Content-Length,Content-Range&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">if</span> ($request_method = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line"><span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="number">1728000</span>;   <span class="comment"># OPTIONS 请求的有效期，在有效期内不用发出另一条预检请求</span></span><br><span class="line"><span class="attribute">add_header</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>;</span><br><span class="line"><span class="attribute">add_header</span> <span class="string">&#x27;Content-Length&#x27;</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="attribute">return</span> <span class="number">204</span>;                  <span class="comment"># 200 也可以</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span>  /usr/share/nginx/html/be;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>然后 <code>nginx -s reload</code> 重新加载配置。这时再访问 <code>fe.sherlocked93.club/index.html</code> 结果如下，请求中出现了我们刚刚配置的 Header：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e96c8e70d22~tplv-t2oaga2asx-watermark.awebp" alt="image-20200428192028636"></p><p>解决了跨域问题。</p><h2 id="9-开启-gzip-压缩"><a href="#9-开启-gzip-压缩" class="headerlink" title="9. 开启 gzip 压缩"></a>9. 开启 gzip 压缩</h2><p>gzip 是一种常用的网页压缩技术，传输的网页经过 gzip 压缩之后大小通常可以变为原来的一半甚至更小（官网原话），更小的网页体积也就意味着带宽的节约和传输速度的提升，特别是对于访问量巨大大型网站来说，每一个静态资源体积的减小，都会带来可观的流量与带宽的节省。</p><p>百度可以找到很多检测站点来查看目标网页有没有开启 gzip 压缩，在下随便找了一个 <a href="https://link.juejin.cn/?target=http://tool.chinaz.com/Gzips/Default.aspx?q=juejin.im">&lt;网页GZIP压缩检测&gt;</a> 输入掘金 <code>juejin.im</code> 来偷窥下掘金有没有开启 gzip。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e96dc471f0b~tplv-t2oaga2asx-watermark.awebp" alt="image-20200427110415809"></p><p>这里可以看到掘金是开启了 gzip 的，压缩效果还挺不错，达到了 52% 之多，本来 <code>34kb</code> 的网页体积，压缩完只需要 <code>16kb</code>，可以想象网页传输速度提升了不少。</p><h3 id="9-1-Nginx-配置-gzip"><a href="#9-1-Nginx-配置-gzip" class="headerlink" title="9.1 Nginx 配置 gzip"></a>9.1 Nginx 配置 gzip</h3><p>使用 gzip 不仅需要 Nginx 配置，浏览器端也需要配合，需要在请求消息头中包含 <code>Accept-Encoding: gzip</code>（IE5 之后所有的浏览器都支持了，是现代浏览器的默认设置）。一般在请求 html 和 css 等静态资源的时候，支持的浏览器在 request 请求静态资源的时候，会加上 <code>Accept-Encoding: gzip</code> 这个 header，表示自己支持 gzip 的压缩方式，Nginx 在拿到这个请求的时候，如果有相应配置，就会返回经过 gzip 压缩过的文件给浏览器，并在 response 相应的时候加上 <code>content-encoding: gzip</code> 来告诉浏览器自己采用的压缩方式（因为浏览器在传给服务器的时候一般还告诉服务器自己支持好几种压缩方式），浏览器拿到压缩的文件后，根据自己的解压方式进行解析。</p><p>先来看看 Nginx 怎么进行 gzip 配置，和之前的配置一样，为了方便管理，还是在 <code>/etc/nginx/conf.d/</code> 文件夹中新建配置文件 <code>gzip.conf</code> ：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/conf.d/gzip.conf</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>; <span class="comment"># 默认off，是否开启gzip</span></span><br><span class="line"><span class="attribute">gzip_types</span> text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面两个开启基本就能跑起了，下面的愿意折腾就了解一下</span></span><br><span class="line"><span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_proxied</span> any;</span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line"><span class="comment"># gzip_min_length 1k;</span></span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>稍微解释一下：</p><ol><li><strong>gzip_types</strong>：要采用 gzip 压缩的 MIME 文件类型，其中 text/html 被系统强制启用；</li><li><strong>gzip_static</strong>：默认 off，该模块启用后，Nginx 首先检查是否存在请求静态文件的 gz 结尾的文件，如果有则直接返回该 <code>.gz</code> 文件内容；</li><li><strong>gzip_proxied</strong>：默认 off，nginx做为反向代理时启用，用于设置启用或禁用从代理服务器上收到相应内容 gzip 压缩；</li><li><strong>gzip_vary</strong>：用于在响应消息头中添加 <code>Vary：Accept-Encoding</code>，使代理服务器根据请求头中的 <code>Accept-Encoding</code> 识别是否启用 gzip 压缩；</li><li><strong>gzip_comp_level</strong>：gzip 压缩比，压缩级别是 1-9，1 压缩级别最低，9 最高，级别越高压缩率越大，压缩时间越长，建议 4-6；</li><li><strong>gzip_buffers</strong>：获取多少内存用于缓存压缩结果，16 8k 表示以 8k*16 为单位获得；</li><li><strong>gzip_min_length</strong>：允许压缩的页面最小字节数，页面字节数从header头中的 <code>Content-Length</code> 中进行获取。默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大；</li><li><strong>gzip_http_version</strong>：默认 1.1，启用 gzip 所需的 HTTP 最低版本；</li></ol><p>这个配置可以插入到 http 模块整个服务器的配置里，也可以插入到需要使用的虚拟主机的 <code>server</code> 或者下面的 <code>location</code> 模块中，当然像上面我们这样写的话就是被 include 到 http 模块中了。</p><p>其他更全的配置信息可以查看 <a href="https://link.juejin.cn/?target=http://nginx.org/en/docs/http/ngx_http_gzip_module.html">&lt;官网文档ngx_http_gzip_module&gt;</a>，配置前是这样的：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e96dd2b5019~tplv-t2oaga2asx-watermark.awebp" alt="image-20200427161022215"></p><p>配置之后 response 的 header 里面多了一个 <code>Content-Encoding: gzip</code>，返回信息被压缩了：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e96def4db0f~tplv-t2oaga2asx-watermark.awebp" alt="image-20200427164033577"></p><p>注意了，一般 gzip 的配置建议加上 <code>gzip_min_length 1k</code>，不加的话：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e96ee3279e8~tplv-t2oaga2asx-watermark.awebp" alt="image-20200427164408389"></p><p>由于文件太小，gzip 压缩之后得到了 -48% 的体积优化，压缩之后体积还比压缩之前体积大了，所以最好设置低于 <code>1kb</code> 的文件就不要 gzip 压缩了 🤪</p><h3 id="9-2-Webpack-的-gzip-配置"><a href="#9-2-Webpack-的-gzip-配置" class="headerlink" title="9.2 Webpack 的 gzip 配置"></a>9.2 Webpack 的 gzip 配置</h3><p>当前端项目使用 Webpack 进行打包的时候，也可以开启 gzip 压缩：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue-cli3 的 vue.config.js 文件</span></span><br><span class="line"><span class="keyword">const</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;compression-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// gzip 配置</span></span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 生产环境</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [<span class="keyword">new</span> CompressionWebpackPlugin(&#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.js$|\.html$|\.css/</span>,    <span class="comment">// 匹配文件名</span></span><br><span class="line">          threshold: <span class="number">10240</span>,               <span class="comment">// 文件压缩阈值，对超过10k的进行压缩</span></span><br><span class="line">          <span class="attr">deleteOriginalAssets</span>: <span class="literal">false</span>     <span class="comment">// 是否删除源文件</span></span><br><span class="line">        &#125;)]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>由此打包出来的文件如下图：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e96f98708c7~tplv-t2oaga2asx-watermark.awebp" alt="image-20200427144824829"></p><p>这里可以看到某些打包之后的文件下面有一个对应的 <code>.gz</code> 经过 <code>gzip</code> 压缩之后的文件，这是因为这个文件超过了 <code>10kb</code>，有的文件没有超过 <code>10kb</code> 就没有进行 <code>gzip</code> 打包，如果你期望压缩文件的体积阈值小一点，可以在 <code>compression-webpack-plugin</code> 这个插件的配置里进行对应配置。</p><p>那么为啥这里 Nginx 已经有了 gzip 压缩，Webpack 这里又整了个 gzip 呢，因为如果全都是使用 Nginx 来压缩文件，会耗费服务器的计算资源，如果服务器的 <code>gzip_comp_level</code> 配置的比较高，就更增加服务器的开销，相应增加客户端的请求时间，得不偿失。</p><p>如果压缩的动作在前端打包的时候就做了，把打包之后的高压缩等级文件作为静态资源放在服务器上，Nginx 会优先查找这些压缩之后的文件返回给客户端，相当于把压缩文件的动作从 Nginx 提前给 Webpack 打包的时候完成，节约了服务器资源，所以一般推介在生产环境应用 Webpack 配置 gzip 压缩。</p><h2 id="10-配置负载均衡"><a href="#10-配置负载均衡" class="headerlink" title="10. 配置负载均衡"></a>10. 配置负载均衡</h2><p>负载均衡在之前已经介绍了相关概念了，主要思想就是把负载均匀合理地分发到多个服务器上，实现压力分流的目的。</p><p>主要配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">upstream</span> myserver &#123;</span><br><span class="line">  <span class="comment"># ip_hash;  # ip_hash 方式</span></span><br><span class="line">    <span class="comment"># fair;   # fair 方式</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span>;  <span class="comment"># 负载均衡目的服务地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8082</span> weight=<span class="number">10</span>;  <span class="comment"># weight 方式，不写默认为 1</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://myserver;</span><br><span class="line">      <span class="attribute">proxy_connect_timeout</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>Nginx 提供了好几种分配方式，默认为<strong>轮询</strong>，就是轮流来。有以下几种分配方式：</p><ol><li><strong>轮询</strong>，默认方式，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务挂了，能自动剔除；</li><li><strong>weight</strong>，权重分配，指定轮询几率，权重越高，在被访问的概率越大，用于后端服务器性能不均的情况；</li><li><strong>ip_hash</strong>，每个请求按访问 IP 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决动态网页 session 共享问题。负载均衡每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的；</li><li><strong>fair</strong>（第三方），按后端服务器的响应时间分配，响应时间短的优先分配，依赖第三方插件 nginx-upstream-fair，需要先安装；</li></ol><h2 id="11-配置动静分离"><a href="#11-配置动静分离" class="headerlink" title="11. 配置动静分离"></a>11. 配置动静分离</h2><p>动静分离在之前也介绍过了，就是把动态和静态的请求分开。方式主要有两种，一种 是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案。另外一种方法就是动态跟静态文件混合在一起发布， 通过 Nginx 配置来分开。</p><p>通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个URL，发送一个请求，比对服务器该文件最后更新时间没有变化。则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">location</span> /www/ &#123;</span><br><span class="line">  <span class="attribute">root</span> /data/;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> /image/ &#123;</span><br><span class="line">  <span class="attribute">root</span> /data/;</span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="12-配置高可用集群（双机热备）"><a href="#12-配置高可用集群（双机热备）" class="headerlink" title="12. 配置高可用集群（双机热备）"></a>12. 配置高可用集群（双机热备）</h2><p>当主 Nginx 服务器宕机之后，切换到备份 Nginx 服务器</p><p><img src="https://cdn.jsdelivr.net/gh/SHERlocked93/pic@env/uPic/2020-03-13-%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87%20%281%29.png" alt="2020-03-13-双机热备"></p><p>首先安装 keepalived，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install keepalived -y</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>然后编辑 <code>/etc/keepalived/keepalived.conf</code> 配置文件，并在配置文件中增加 <code>vrrp_script</code> 定义一个外围检测机制，并在 <code>vrrp_instance</code> 中通过定义 <code>track_script</code> 来追踪脚本执行过程，实现节点转移：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">global_defs&#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">        acassen@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre@firewall.loc</span><br><span class="line">   smtp_server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span> <span class="comment">// 上面都是邮件配置，没卵用</span></span><br><span class="line">   router_id LVS_DEVEL     <span class="comment">// 当前服务器名字，用hostname命令来查看</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_maintainace &#123; <span class="comment">// 检测机制的脚本名称为chk_maintainace</span></span><br><span class="line">    script <span class="attr">&quot;[[ -e/etc/keepalived/down ]] &amp;&amp; exit 1 || exit 0&quot;</span> <span class="comment">// 可以是脚本路径或脚本命令</span></span><br><span class="line">    <span class="comment">// script &quot;/etc/keepalived/nginx_check.sh&quot;    // 比如这样的脚本路径</span></span><br><span class="line">    interval 2  <span class="comment">// 每隔2秒检测一次</span></span><br><span class="line">    weight -20  <span class="comment">// 当脚本执行成立，那么把当前服务器优先级改为-20</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_instanceVI_1 &#123;   <span class="comment">// 每一个vrrp_instance就是定义一个虚拟路由器</span></span><br><span class="line">    state MASTER      <span class="comment">// 主机为MASTER，备用机为BACKUP</span></span><br><span class="line">    interface eth0    <span class="comment">// 网卡名字，可以从ifconfig中查找</span></span><br><span class="line">    virtual_router_id 51 <span class="comment">// 虚拟路由的id号，一般小于255，主备机id需要一样</span></span><br><span class="line">    priority 100      <span class="comment">// 优先级，master的优先级比backup的大</span></span><br><span class="line">    advert_int 1      <span class="comment">// 默认心跳间隔</span></span><br><span class="line">    authentication &#123;  <span class="comment">// 认证机制</span></span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111   <span class="comment">// 密码</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;  <span class="comment">// 虚拟地址vip</span></span><br><span class="line">       172.16.2.8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中检测脚本 <code>nginx_check.sh</code>，这里提供一个：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">A=`ps -C nginx --no-header | wc -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$A</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    /usr/sbin/nginx <span class="comment"># 尝试重新启动nginx</span></span><br><span class="line">    sleep 2         <span class="comment"># 睡眠2秒</span></span><br><span class="line">    <span class="keyword">if</span> [ `ps -C nginx --no-header | wc -l` -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        killall keepalived <span class="comment"># 启动失败，将keepalived服务杀死。将vip漂移到其它备份节点</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>复制一份到备份服务器，备份 Nginx 的配置要将 <code>state</code> 后改为 <code>BACKUP</code>，<code>priority</code> 改为比主机小。</p><p>设置完毕后各自 <code>service keepalived start</code> 启动，经过访问成功之后，可以把 Master 机的 keepalived 停掉，此时 Master 机就不再是主机了 <code>service keepalived stop</code>，看访问虚拟 IP 时是否能够自动切换到备机 <code>ip addr</code>。</p><p>再次启动 Master 的 keepalived，此时 vip 又变到了主机上。</p><h2 id="13-适配-PC-或移动设备"><a href="#13-适配-PC-或移动设备" class="headerlink" title="13. 适配 PC 或移动设备"></a>13. 适配 PC 或移动设备</h2><p>根据用户设备不同返回不同样式的站点，以前经常使用的是纯前端的自适应布局，但无论是复杂性和易用性上面还是不如分开编写的好，比如我们常见的淘宝、京东……这些大型网站就都没有采用自适应，而是用分开制作的方式，根据用户请求的 <code>user-agent</code> 来判断是返回 PC 还是 H5 站点。</p><p>首先在 <code>/usr/share/nginx/html</code> 文件夹下 <code>mkdir</code> 分别新建两个文件夹 <code>PC</code> 和 <code>mobile</code>，<code>vim</code> 编辑两个 <code>index.html</code> 随便写点内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br><span class="line">mkdir pc mobile</span><br><span class="line"><span class="built_in">cd</span> pc</span><br><span class="line">vim index.html   <span class="comment"># 随便写点比如 hello pc!</span></span><br><span class="line"><span class="built_in">cd</span> ../mobile</span><br><span class="line">vim index.html   <span class="comment"># 随便写点比如 hello mobile!</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>然后和设置二级域名虚拟主机时候一样，去 <code>/etc/nginx/conf.d</code> 文件夹下新建一个配置文件 <code>fe.sherlocked93.club.conf</code> ：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/conf.d/fe.sherlocked93.club.conf</span></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> fe.sherlocked93.club;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span>  /usr/share/nginx/html/pc;</span><br><span class="line">    <span class="attribute">if</span> ($http_user_agent <span class="regexp">~* &#x27;(Android|webOS|iPhone|iPod|BlackBerry)&#x27;)</span> &#123;</span><br><span class="line">      <span class="attribute">root</span> /usr/share/nginx/html/mobile;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>配置基本没什么不一样的，主要多了一个 <code>if</code> 语句，然后使用 <code>$http_user_agent</code> 全局变量来判断用户请求的 <code>user-agent</code>，指向不同的 root 路径，返回对应站点。</p><p>在浏览器访问这个站点，然后 F12 中模拟使用手机访问：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e97062c5124~tplv-t2oaga2asx-watermark.awebp" alt="62haogU3DtwMRiZ"></p><p>可以看到在模拟使用移动端访问的时候，Nginx 返回的站点变成了移动端对应的 html 了。</p><h2 id="14-配置-HTTPS"><a href="#14-配置-HTTPS" class="headerlink" title="14. 配置 HTTPS"></a>14. 配置 HTTPS</h2><p>具体配置过程网上挺多的了，也可以使用你购买的某某云，一般都会有<a href="https://link.juejin.cn/?target=https://cloud.tencent.com/document/product/400/6814">免费申请</a>的服务器证书，安装直接看所在云的操作指南即可。</p><p>我购买的腾讯云提供的亚洲诚信机构颁发的免费证书只能一个域名使用，二级域名什么的需要另外申请，但是申请审批比较快，一般几分钟就能成功，然后下载证书的压缩文件，里面有个 nginx 文件夹，把 <code>xxx.crt</code> 和 <code>xxx.key</code> 文件拷贝到服务器目录，再配置下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl http2 default_server;   <span class="comment"># SSL 访问端口号为 443</span></span><br><span class="line">  <span class="attribute">server_name</span> sherlocked93.club;         <span class="comment"># 填写绑定证书的域名</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">ssl_certificate</span> /etc/nginx/https/1_sherlocked93.club_bundle.crt;   <span class="comment"># 证书文件地址</span></span><br><span class="line">  <span class="attribute">ssl_certificate_key</span> /etc/nginx/https/2_sherlocked93.club.key;      <span class="comment"># 私钥文件地址</span></span><br><span class="line">  <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;      <span class="comment">#请按照以下协议配置</span></span><br><span class="line">  <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; </span><br><span class="line">  <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>         /usr/share/nginx/html;</span><br><span class="line">    <span class="attribute">index</span>        index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>写完 <code>nginx -t -q</code> 校验一下，没问题就 <code>nginx -s reload</code>，现在去访问 <code>https://sherlocked93.club/</code> 就能访问 HTTPS 版的网站了。</p><p>一般还可以加上几个增强安全性的命令：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">add_header</span> X-Frame-Options DENY;           <span class="comment"># 减少点击劫持</span></span><br><span class="line"><span class="attribute">add_header</span> X-Content-Type-Options nosniff; <span class="comment"># 禁止服务器自动解析资源类型</span></span><br><span class="line"><span class="attribute">add_header</span> X-Xss-Protection <span class="number">1</span>;             <span class="comment"># 防XSS攻击</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="15-一些常用技巧"><a href="#15-一些常用技巧" class="headerlink" title="15. 一些常用技巧"></a>15. 一些常用技巧</h2><h3 id="15-1-静态服务"><a href="#15-1-静态服务" class="headerlink" title="15.1 静态服务"></a>15.1 静态服务</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  static.sherlocked93.club;</span><br><span class="line">  <span class="attribute">charset</span> utf-<span class="number">8</span>;    <span class="comment"># 防止中文文件名乱码</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> /download &#123;</span><br><span class="line">    <span class="attribute">alias</span>          /usr/share/nginx/html/static;  <span class="comment"># 静态资源目录</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">autoindex</span>               <span class="literal">on</span>;    <span class="comment"># 开启静态资源列目录</span></span><br><span class="line">    <span class="attribute">autoindex_exact_size</span>    <span class="literal">off</span>;   <span class="comment"># on(默认)显示文件的确切大小，单位是byte；off显示文件大概大小，单位KB、MB、GB</span></span><br><span class="line">    <span class="attribute">autoindex_localtime</span>     <span class="literal">off</span>;   <span class="comment"># off(默认)时显示的文件时间为GMT时间；on显示的文件时间为服务器时间</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="15-2-图片防盗链"><a href="#15-2-图片防盗链" class="headerlink" title="15.2 图片防盗链"></a>15.2 图片防盗链</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;        </span><br><span class="line">  <span class="attribute">server_name</span>  <span class="regexp">*.sherlocked</span>93.club;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 图片防盗链</span></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|jpeg|png|bmp|swf)$</span> &#123;</span><br><span class="line">    <span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> server_names ~\.google\. ~\.baidu\. <span class="regexp">*.qq.com</span>;  <span class="comment"># 只允许本机 IP 外链引用，感谢 @木法传 的提醒，将百度和谷歌也加入白名单</span></span><br><span class="line">    <span class="attribute">if</span> ($invalid_referer)&#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="15-3-请求过滤"><a href="#15-3-请求过滤" class="headerlink" title="15.3 请求过滤"></a>15.3 请求过滤</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非指定请求全返回 403</span></span><br><span class="line"><span class="attribute">if</span> ( $request_method !<span class="regexp">~ ^(GET|POST|HEAD)$</span> ) &#123;</span><br><span class="line">  <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="comment"># IP访问限制（只允许IP是 192.168.0.2 机器访问）</span></span><br><span class="line">  <span class="attribute">allow</span> <span class="number">192.168.0.2</span>;</span><br><span class="line">  <span class="attribute">deny</span> all;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">root</span>   html;</span><br><span class="line">  <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="15-4-配置图片、字体等静态文件缓存"><a href="#15-4-配置图片、字体等静态文件缓存" class="headerlink" title="15.4 配置图片、字体等静态文件缓存"></a>15.4 配置图片、字体等静态文件缓存</h3><p>由于图片、字体、音频、视频等静态文件在打包的时候通常会增加了 hash，所以缓存可以设置的长一点，先设置强制缓存，再设置协商缓存；如果存在没有 hash 值的静态文件，建议不设置强制缓存，仅通过协商缓存判断是否需要使用缓存。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图片缓存时间设置</span></span><br><span class="line">location ~ .*\.(css|js|jpg|png|gif|swf|woff|woff2|eot|svg|ttf|otf|mp3|m4a|aac|txt)$ &#123;</span><br><span class="line">expires 10d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不希望缓存</span></span><br><span class="line">expires -1;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="15-5-单页面项目-history-路由配置"><a href="#15-5-单页面项目-history-路由配置" class="headerlink" title="15.5 单页面项目 history 路由配置"></a>15.5 单页面项目 history 路由配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  fe.sherlocked93.club;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>       /usr/share/nginx/html/dist;  <span class="comment"># vue 打包后的文件夹</span></span><br><span class="line">    <span class="attribute">index</span>      index.html index.htm;</span><br><span class="line">    <span class="attribute">try_files</span>  $uri $uri/ /index.html @rewrites;  </span><br><span class="line">    </span><br><span class="line">    <span class="attribute">expires</span> -<span class="number">1</span>;                          <span class="comment"># 首页一般没有强制缓存</span></span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-cache;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 接口转发，如果需要的话</span></span><br><span class="line">  <span class="comment">#location ~ ^/api &#123;</span></span><br><span class="line">  <span class="comment">#  proxy_pass http://be.sherlocked93.club;</span></span><br><span class="line">  <span class="comment">#&#125;</span></span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> @rewrites &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.+)$</span> /index.html <span class="literal">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="15-6-HTTP-请求转发到-HTTPS"><a href="#15-6-HTTP-请求转发到-HTTPS" class="headerlink" title="15.6 HTTP 请求转发到 HTTPS"></a>15.6 HTTP 请求转发到 HTTPS</h3><p>配置完 HTTPS 后，浏览器还是可以访问 HTTP 的地址 <code>http://sherlocked93.club/</code> 的，可以做一个 301 跳转，把对应域名的 HTTP 请求重定向到 HTTPS 上</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.sherlocked93.club;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单域名重定向</span></span><br><span class="line">    <span class="attribute">if</span> ($host = <span class="string">&#x27;www.sherlocked93.club&#x27;</span>)&#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://www.sherlocked93.club$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 全局非 https 协议时重定向</span></span><br><span class="line">    <span class="attribute">if</span> ($scheme != <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://$server_name$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 或者全部重定向</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://$server_name$request_uri;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以上配置选择自己需要的即可，不用全部加</span></span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="15-7-泛域名路径分离"><a href="#15-7-泛域名路径分离" class="headerlink" title="15.7 泛域名路径分离"></a>15.7 泛域名路径分离</h3><p>这是一个非常实用的技能，经常有时候我们可能需要配置一些二级或者三级域名，希望通过 Nginx 自动指向对应目录，比如：</p><ol><li><code>test1.doc.sherlocked93.club</code> 自动指向 <code>/usr/share/nginx/html/doc/test1</code> 服务器地址；</li><li><code>test2.doc.sherlocked93.club</code> 自动指向 <code>/usr/share/nginx/html/doc/test2</code> 服务器地址；</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  ~^([\w-]+)\.doc\.sherlocked93\.club$;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html/doc/<span class="variable">$1</span>;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="15-8-泛域名转发"><a href="#15-8-泛域名转发" class="headerlink" title="15.8 泛域名转发"></a>15.8 泛域名转发</h3><p>和之前的功能类似，有时候我们希望把二级或者三级域名链接重写到我们希望的路径，让后端就可以根据路由解析不同的规则：</p><ol><li><code>test1.serv.sherlocked93.club/api?name=a</code> 自动转发到 <code>127.0.0.1:8080/test1/api?name=a </code>；</li><li><code>test2.serv.sherlocked93.club/api?name=a</code> 自动转发到 <code>127.0.0.1:8080/test2/api?name=a</code> ；</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> ~^([\w-]+)\.serv\.sherlocked93\.club$;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>        X-Real-IP $remote_addr;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>        Host $http_host;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>        X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>              http://127.0.0.1:8080/<span class="variable">$1</span>$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="16-最佳实践"><a href="#16-最佳实践" class="headerlink" title="16. 最佳实践"></a>16. 最佳实践</h2><ol><li>为了使 Nginx 配置更易于维护，建议为每个服务创建一个单独的配置文件，存储在 <code>/etc/nginx/conf.d</code> 目录，根据需求可以创建任意多个独立的配置文件。</li><li>独立的配置文件，建议遵循以下命名约定 <code>&lt;服务&gt;.conf</code>，比如域名是 <code>sherlocked93.club</code>，那么你的配置文件的应该是这样的 <code>/etc/nginx/conf.d/sherlocked93.club.conf</code>，如果部署多个服务，也可以在文件名中加上 Nginx 转发的端口号，比如 <code>sherlocked93.club.8080.conf</code>，如果是二级域名，建议也都加上 <code>fe.sherlocked93.club.conf</code>。</li><li>常用的、复用频率比较高的配置可以放到 <code>/etc/nginx/snippets</code> 文件夹，在 Nginx 的配置文件中需要用到的位置 include 进去，以功能来命名，并在每个 snippet 配置文件的开头注释标明主要功能和引入位置，方便管理。比如之前的 <code>gzip</code>、<code>cors</code> 等常用配置，我都设置了 snippet。</li><li>Nginx 日志相关目录，内以 <code>域名.type.log</code> 命名（比如 <code>be.sherlocked93.club.access.log</code> 和 <code>be.sherlocked93.club.error.log</code> ）位于 <code>/var/log/nginx/</code> 目录中，为每个独立的服务配置不同的访问权限和错误日志文件，这样查找错误时，会更加方便快捷。</li></ol><p>感谢 @木法传 的提醒，Nginx 设置防盗链的时候，可以将百度和 google 设置为白名单，利于 SEO</p><hr><p>网上的帖子大多深浅不一，甚至有些前后矛盾，在下的文章都是学习过程中的总结，如果发现错误，欢迎留言指出~</p><blockquote><p>参考文档：</p><ol><li><a href="https://link.juejin.cn/?target=https://www.nginx.cn/doc/">Nginx中文文档</a></li><li><a href="https://link.juejin.cn/?target=https://www.cnblogs.com/liang-io/p/9340335.html">Nginx安装，目录结构与配置文件详解</a></li><li><a href="https://link.juejin.cn/?target=https://blog.csdn.net/xyang81/article/details/52554398">Keepalived安装与配置</a></li><li><a href="https://link.juejin.cn/?target=https://blog.csdn.net/xyang81/article/details/52556886">Keepalived+Nginx实现高可用</a></li><li><a href="https://juejin.cn/post/6844903684967825421#comment">Nginx与前端开发</a></li><li><a href="https://link.juejin.cn/?target=http://www.ruanyifeng.com/blog/2016/04/cors.html">跨域资源共享 CORS 详解 - 阮一峰的网络日志</a></li><li><a href="https://link.juejin.cn/?target=http://www.conardli.top/blog/article/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%80%85%E5%BF%85%E5%A4%87%E7%9A%84nginx%E7%9F%A5%E8%AF%86.html%23nginx%E5%9C%A8%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8">前端开发者必备的nginx知识</a></li><li><a href="https://link.juejin.cn/?target=https://blog.csdn.net/envon123/article/details/83270277">我也说说Nginx解决前端跨域问题，正确的Nginx跨域配置</a></li><li><a href="https://link.juejin.cn/?target=https://www.holidaypenguin.com/blob/2019-02-18-vue-router-history-mode-nginx-configuration-and-configuration-of-static-resource-cache/">vue-router history模式nginx配置并配置静态资源缓存 | HolidayPenguin</a></li><li><a href="https://link.juejin.cn/?target=https://blog.xinac.cn/archives/nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83%E5%A4%A7%E5%85%A8">nginx重定向，全局https，SSL配置，反代配置参考</a></li><li><a href="https://link.juejin.cn/?target=https://xuexb.github.io/learn-nginx/">Nginx 入门教程</a></li></ol></blockquote><p>PS：本人博客地址 <a href="https://link.juejin.cn/?target=https://github.com/SHERlocked93/blog">Github - SHERlocked93/blog</a>，也欢迎大家关注我的公众号【前端下午茶】，一起加油吧~</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e9717e7df4b~tplv-t2oaga2asx-watermark.awebp" alt="img"></p><p>另外可以加入「前端下午茶交流群」微信群，长按识别下面二维码即可加我好友，备注<strong>加群</strong>，我拉你入群～</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/29/171c4e97193bd395~tplv-t2oaga2asx-watermark.awebp" alt="img"></p><p>作者：SHERlocked93<br>链接：<a href="https://juejin.cn/post/6844904144235413512">https://juejin.cn/post/6844904144235413512</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建Rclone-WebGui</title>
      <link href="/2021/8/Docker%E6%90%AD%E5%BB%BARclone-WebGui/"/>
      <url>/2021/8/Docker%E6%90%AD%E5%BB%BARclone-WebGui/</url>
      
        <content type="html"><![CDATA[<p>来源：<a href="https://github.com/romancin/rclonebrowser-docker">https://github.com/romancin/rclonebrowser-docker</a></p><h1 id="rclonebrowser-docker"><a href="#rclonebrowser-docker" class="headerlink" title="rclonebrowser-docker"></a>rclonebrowser-docker</h1><p>A repository for creating a docker container including RClone Browser with GUI interface, based on <a href="https://github.com/kapitainsky/RcloneBrowser">kapitainsky fork</a></p><p>Thank you for continue developing this awesome software :)</p><p><a href="https://images.microbadger.com/badges/version/romancin/rclonebrowser.svg"><img src="http://www.sirliu.top:8000/usr/themes/Aria/assets/img/loading.svg" alt="img"></a><br><a href="https://images.microbadger.com/badges/image/romancin/rclonebrowser.svg"><img src="http://www.sirliu.top:8000/usr/themes/Aria/assets/img/loading.svg" alt="img"></a><br><a href="https://img.shields.io/badge/Donate-PayPal-green.svg"><img src="http://www.sirliu.top:8000/usr/themes/Aria/assets/img/loading.svg" alt="Donate"></a></p><p>You can invite me a beer if you want ;)</p><p>This is a completely funcional Docker image with RClone Browser kapytainskyfork.</p><p>Based on Alpine Linux, which provides a very small size.</p><p>Tested and working on Synology and QNAP, but should work on any x86_64 devices.</p><p>Thanks to @jlesage for a great base image for GUI apps.</p><p>Instructions:</p><ul><li>Map any local port to 5800 for web access</li><li>Map any local port to 5900 for VNC access</li><li>Map a local volume to /config Storesconfigurationdata</li><li>Map a local volume to /media Accessmediafiles</li></ul><p>Sample run command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=rclonebrowser \</span><br><span class="line">-v /share/Container/rclonebrowser/config:/config \</span><br><span class="line">-v /share/Container/rclonebrowser/media:/media \</span><br><span class="line">-e GROUP_ID=0 -e USER_ID=0 -e TZ=Europe/Madrid \</span><br><span class="line">-p 5800:5800 \</span><br><span class="line">-p 5900:5900 \</span><br><span class="line">romancin/rclonebrowser:latest</span><br></pre></td></tr></table></figure><p>Browse to <code>http://your-host-ip:5800</code> to access the RClone Browser GUI.</p><h3 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h3><p>To customize some properties of the container, the following environment<br>variables can be passed via the <code>-e</code> parameter oneforeachvariable. Value<br>of this parameter has the format <code>&lt;VARIABLE_NAME&gt;=&lt;VALUE&gt;</code>.</p><table><thead><tr><th align="left">Variable</th><th align="left">Description</th><th align="left">Default</th></tr></thead><tbody><tr><td align="left"><code>USER_ID</code></td><td align="left">ID of the user the application runs as. See <a href="http://www.sirliu.top:8000/archives/38/#usergroup-ids">User/Group IDs</a> to better understand when this should be set.</td><td align="left"><code>1000</code></td></tr><tr><td align="left"><code>GROUP_ID</code></td><td align="left">ID of the group the application runs as. See <a href="http://www.sirliu.top:8000/archives/38/#usergroup-ids">User/Group IDs</a> to better understand when this should be set.</td><td align="left"><code>1000</code></td></tr><tr><td align="left"><code>SUP_GROUP_IDS</code></td><td align="left">Comma-separated list of supplementary group IDs of the application.</td><td align="left">unset</td></tr><tr><td align="left"><code>UMASK</code></td><td align="left">Mask that controls how file permissions are set for newly created files. The value of the mask is in octal notation. By default, this variable is not set and the default umask of <code>022</code> is used, meaning that newly created files are readable by everyone, but only writable by the owner. See the following online umask calculator: <a href="http://wintelguy.com/umask-calc.pl">http://wintelguy.com/umask-calc.pl</a></td><td align="left">unset</td></tr><tr><td align="left"><code>TZ</code></td><td align="left">[TimeZone] of the container. Timezone can also be set by mapping <code>/etc/localtime</code> between the host and the container.</td><td align="left"><code>Etc/UTC</code></td></tr><tr><td align="left"><code>KEEP_APP_RUNNING</code></td><td align="left">When set to <code>1</code>, the application will be automatically restarted if it crashes or if user quits it.</td><td align="left"><code>0</code></td></tr><tr><td align="left"><code>APP_NICENESS</code></td><td align="left">Priority at which the application should run. A niceness value of -20 is the highest priority and 19 is the lowest priority. By default, niceness is not set, meaning that the default niceness of 0 is used. <strong>NOTE</strong>: A negative niceness priorityincrease requires additional permissions. In this case, the container should be run with the docker option <code>--cap-add=SYS_NICE</code>.</td><td align="left">unset</td></tr><tr><td align="left"><code>CLEAN_TMP_DIR</code></td><td align="left">When set to <code>1</code>, all files in the <code>/tmp</code> directory are delete during the container startup.</td><td align="left"><code>1</code></td></tr><tr><td align="left"><code>DISPLAY_WIDTH</code></td><td align="left">Width inpixels of the application’s window.</td><td align="left"><code>1280</code></td></tr><tr><td align="left"><code>DISPLAY_HEIGHT</code></td><td align="left">Height inpixels of the application’s window.</td><td align="left"><code>768</code></td></tr><tr><td align="left"><code>SECURE_CONNECTION</code></td><td align="left">When set to <code>1</code>, an encrypted connection is used to access the application’s GUI eitherviawebbrowserorVNCclient. See the <a href="http://www.sirliu.top:8000/archives/38/#security">Security</a> section for more details.</td><td align="left"><code>0</code></td></tr><tr><td align="left"><code>VNC_PASSWORD</code></td><td align="left">Password needed to connect to the application’s GUI. See the <a href="http://www.sirliu.top:8000/archives/38/#vnc-password">VNC Password</a> section for more details.</td><td align="left">unset</td></tr><tr><td align="left"><code>X11VNC_EXTRA_OPTS</code></td><td align="left">Extra options to pass to the x11vnc server running in the Docker container. <strong>WARNING</strong>: For advanced users. Do not use unless you know what you are doing.</td><td align="left">unset</td></tr><tr><td align="left"><code>ENABLE_CJK_FONT</code></td><td align="left">When set to <code>1</code>, open source computer font <code>WenQuanYi Zen Hei</code> is installed. This font contains a large range of Chinese/Japanese/Korean characters.</td><td align="left"><code>0</code></td></tr></tbody></table><h3 id="Data-Volumes"><a href="#Data-Volumes" class="headerlink" title="Data Volumes"></a>Data Volumes</h3><p>The following table describes data volumes used by the container. The mappings<br>are set via the <code>-v</code> parameter. Each mapping is specified with the following<br>format: <code>&lt;HOST_DIR&gt;:&lt;CONTAINER_DIR&gt;[:PERMISSIONS]</code>.</p><table><thead><tr><th align="left">Container path</th><th align="left">Permissions</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>/config</code></td><td align="left">rw</td><td align="left">This is where the application stores its configuration, log and any files needing persistency.</td></tr><tr><td align="left"><code>/media</code></td><td align="left">rw</td><td align="left">This is where downloaded files are stored, or where you put files in your host for uploading.</td></tr></tbody></table><h3 id="Ports"><a href="#Ports" class="headerlink" title="Ports"></a>Ports</h3><p>Here is the list of ports used by the container. They can be mapped to the host<br>via the <code>-p</code> parameter oneperportmapping. Each mapping is defined in the<br>following format: <code>&lt;HOST_PORT&gt;:&lt;CONTAINER_PORT&gt;</code>. The port number inside the<br>container cannot be changed, but you are free to use any port on the host side.</p><table><thead><tr><th align="left">Port</th><th align="left">Mapping to host</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">5800</td><td align="left">Mandatory</td><td align="left">Port used to access the application’s GUI via the web interface.</td></tr><tr><td align="left">5900</td><td align="left">Optional</td><td align="left">Port used to access the application’s GUI via the VNC protocol. Optional if no VNC client is used.</td></tr></tbody></table><h2 id="User-Group-IDs"><a href="#User-Group-IDs" class="headerlink" title="User/Group IDs"></a>User/Group IDs</h2><p>When using data volumes (<code>-v</code> flags), permissions issues can occur between the<br>host and the container. For example, the user within the container may not<br>exists on the host. This could prevent the host from properly accessing files<br>and folders on the shared volume.</p><p>To avoid any problem, you can specify the user the application should run as.</p><p>This is done by passing the user ID and group ID to the container via the<br><code>USER_ID</code> and <code>GROUP_ID</code> environment variables.</p><p>To find the right IDs to use, issue the following command on the host, with the<br>user owning the data volume on the host:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id &lt;username&gt;</span><br></pre></td></tr></table></figure><p>Which gives an output like this one:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid=1000(myuser) gid=1000(myuser) groups=1000(myuser),4(adm),24(cdrom),27(sudo),46(plugdev),113(lpadmin)</span><br></pre></td></tr></table></figure><p>The value of <code>uid</code> userID and <code>gid</code> groupID are the ones that you should<br>be given the container.</p><h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p>By default, access to the application’s GUI is done over an unencrypted<br>connection HTTPorVNC.</p><p>Secure connection can be enabled via the <code>SECURE_CONNECTION</code> environment<br>variable. See the <a href="http://www.sirliu.top:8000/archives/38/#environment-variables">Environment Variables</a> section for<br>more details on how to set an environment variable.</p><p>When enabled, application’s GUI is performed over an HTTPs connection when<br>accessed with a browser. All HTTP accesses are automatically redirected to<br>HTTPs.</p><p>When using a VNC client, the VNC connection is performed over SSL. Note that<br>few VNC clients support this method. [SSVNC] is one of them.</p><h3 id="Certificates"><a href="#Certificates" class="headerlink" title="Certificates"></a>Certificates</h3><p>Here are the certificate files needed by the container. By default, when they<br>are missing, self-signed certificates are generated and used. All files have<br>PEM encoded, x509 certificates.</p><table><thead><tr><th align="left">Container Path</th><th align="left">Purpose</th><th align="left">Content</th></tr></thead><tbody><tr><td align="left"><code>/config/certs/vnc-server.pem</code></td><td align="left">VNC connection encryption.</td><td align="left">VNC server’s private key and certificate, bundled with any root and intermediate certificates.</td></tr><tr><td align="left"><code>/config/certs/web-privkey.pem</code></td><td align="left">HTTPs connection encryption.</td><td align="left">Web server’s private key.</td></tr><tr><td align="left"><code>/config/certs/web-fullchain.pem</code></td><td align="left">HTTPs connection encryption.</td><td align="left">Web server’s certificate, bundled with any root and intermediate certificates.</td></tr></tbody></table><p><strong>NOTE</strong>: To prevent any certificate validity warnings/errors from the browser<br>or VNC client, make sure to supply your own valid certificates.</p><p><strong>NOTE</strong>: Certificate files are monitored and relevant daemons are automatically<br>restarted when changes are detected.</p><h3 id="VNC-Password"><a href="#VNC-Password" class="headerlink" title="VNC Password"></a>VNC Password</h3><p>To restrict access to your application, a password can be specified. This can<br>be done via two methods:</p><ul><li>By using the <code>VNC_PASSWORD</code> environment variable.</li><li>By creating a <code>.vncpass_clear</code> file at the root of the <code>/config</code> volume.<br>This file should contains the password in clear-text. During the container<br>startup, content of the file is obfuscated and moved to <code>.vncpass</code>.</li></ul><p>The level of security provided by the VNC password depends on two things:</p><ul><li>The type of communication channel encrypted/unencrypted.</li><li>How secure access to the host is.</li></ul><p>When using a VNC password, it is highly desirable to enable the secure<br>connection to prevent sending the password in clear over an unencrypted channel.</p><p><strong>ATTENTION</strong>: Password is limited to 8 characters. This limitation comes from<br>the Remote Framebuffer Protocol <a href="https://tools.ietf.org/html/rfc6143">RFC</a> (see<br>section <a href="https://tools.ietf.org/html/rfc6143#section-7.2.2">7.2.2</a>). Any<br>characters beyhond the limit are ignored.</p><h2 id="Shell-Access"><a href="#Shell-Access" class="headerlink" title="Shell Access"></a>Shell Access</h2><p>To get shell access to a the running container, execute the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -ti CONTAINER sh</span><br></pre></td></tr></table></figure><p>Where <code>CONTAINER</code> is the ID or the name of the container used during its<br>creation (e.g. <code>crashplan-pro</code>).</p><h2 id="Reverse-Proxy"><a href="#Reverse-Proxy" class="headerlink" title="Reverse Proxy"></a>Reverse Proxy</h2><p>The following sections contains NGINX configuration that need to be added in<br>order to reverse proxy to this container.</p><p>A reverse proxy server can route HTTP requests based on the hostname or the URL<br>path.</p><h3 id="Routing-Based-on-Hostname"><a href="#Routing-Based-on-Hostname" class="headerlink" title="Routing Based on Hostname"></a>Routing Based on Hostname</h3><p>In this scenario, each hostname is routed to a different application/container.</p><p>For example, let’s say the reverse proxy server is running on the same machine<br>as this container. The server would proxy all HTTP requests sent to<br><code>rclonebrowser.domain.tld</code> to the container at <code>127.0.0.1:5800</code>.</p><p>Here are the relevant configuration elements that would be added to the NGINX<br>configuration:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    &#x27;&#x27;      close;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">upstream rclonebrowser &#123;</span><br><span class="line">    # If the reverse proxy server is not running on the same machine as the</span><br><span class="line">    # Docker container, use the IP of the Docker host here.</span><br><span class="line">    # Make sure to adjust the port according to how port 5800 of the</span><br><span class="line">    # container has been mapped on the host.</span><br><span class="line">    server 127.0.0.1:5800;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">server &#123;</span><br><span class="line">    [...]</span><br><span class="line"> </span><br><span class="line">    server_name rclonebrowser.domain.tld;</span><br><span class="line"> </span><br><span class="line">    location / &#123;</span><br><span class="line">            proxy_pass http://rclonebrowser;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location /websockify &#123;</span><br><span class="line">        proxy_pass http://rclonebrowser;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection $connection_upgrade;</span><br><span class="line">        proxy_read_timeout 86400;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Routing-Based-on-URL-Path"><a href="#Routing-Based-on-URL-Path" class="headerlink" title="Routing Based on URL Path"></a>Routing Based on URL Path</h3><p>In this scenario, the hostname is the same, but different URL paths are used to<br>route to different applications/containers.</p><p>For example, let’s say the reverse proxy server is running on the same machine<br>as this container. The server would proxy all HTTP requests for<br><code>server.domain.tld/rclonebrowser</code> to the container at <code>127.0.0.1:5800</code>.</p><p>Here are the relevant configuration elements that would be added to the NGINX<br>configuration:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    &#x27;&#x27;      close;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">upstream rclonebrowser &#123;</span><br><span class="line">    # If the reverse proxy server is not running on the same machine as the</span><br><span class="line">    # Docker container, use the IP of the Docker host here.</span><br><span class="line">    # Make sure to adjust the port according to how port 5800 of the</span><br><span class="line">    # container has been mapped on the host.</span><br><span class="line">    server 127.0.0.1:5800;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">server &#123;</span><br><span class="line">    [...]</span><br><span class="line"> </span><br><span class="line">    location = /rclonebrowser &#123;return 301 $scheme://$http_host/rclonebrowser/;&#125;</span><br><span class="line">    location /rclonebrowser/ &#123;</span><br><span class="line">        proxy_pass http://rclonebrowser/;</span><br><span class="line">        location /rclonebrowser/websockify &#123;</span><br><span class="line">            proxy_pass http://rclonebrowser/websockify/;</span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">            proxy_set_header Connection $connection_upgrade;</span><br><span class="line">            proxy_read_timeout 86400;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Support-or-Contact"><a href="#Support-or-Contact" class="headerlink" title="Support or Contact"></a>Support or Contact</h2><p>Having troubles with the container or have questions? Please<br>[create a new issue].</p><h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><p>v3.0.2 09/09/2020: Updated to Alpine 3.12 and Rclone current version<br>v3.0.0 22/03/2019: Updated to RcloneBrowser 1.8.0 version<br>v1.0.1 22/09/2019: Updated to latest image from jlesage and added Jenkinsfile for CI</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建WebDAV服务</title>
      <link href="/2021/8/Docker%E6%90%AD%E5%BB%BAWebDAV%E6%9C%8D%E5%8A%A1/"/>
      <url>/2021/8/Docker%E6%90%AD%E5%BB%BAWebDAV%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>亲测可用的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run --name webdav -d \</span><br><span class="line">--restart=unless-stopped \</span><br><span class="line">-p 369:80 \</span><br><span class="line">-v /mnt/data_part/webdav_server:/media \</span><br><span class="line">-e USERNAME=你的账号 \</span><br><span class="line">-e PASSWORD=你的密码 \</span><br><span class="line">-e TZ=Aisa/Shanghai \</span><br><span class="line">-e UDI=1000 \</span><br><span class="line">-e GID=1000 \</span><br><span class="line">ugeek/webdav:amd64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> webdav </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 多容器</title>
      <link href="/2021/8/nginx%20%E5%A4%9A%E5%AE%B9%E5%99%A8/"/>
      <url>/2021/8/nginx%20%E5%A4%9A%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span> default_server;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">80</span> default_server;</span><br><span class="line">    <span class="attribute">server_name</span>  _;</span><br><span class="line">    <span class="attribute">root</span>         /usr/share/nginx/html;</span><br><span class="line">    <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/default.d/<span class="regexp">*.conf</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">        <span class="attribute">location</span> = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#下面是自定义配置 端口转发</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> www.abc.com;<span class="comment"># 这里配置我们的域名，确定域名已解析到本机</span></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:9000; <span class="comment">#转发到本机9000端口</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题美化样例博客收集</title>
      <link href="/2021/8/hexo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E6%A0%B7%E4%BE%8B%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86/"/>
      <url>/2021/8/hexo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E6%A0%B7%E4%BE%8B%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="很多酷炫效果"><a href="#很多酷炫效果" class="headerlink" title="很多酷炫效果"></a>很多酷炫效果</h3><p><a href="https://jinan6.vip/posts/3112011529/">https://jinan6.vip/posts/3112011529/</a></p><p>###markdown各种特殊语法，彩色横条、folding、容器等<br><a href="https://zykj.js.org/posts/e297feab/">https://zykj.js.org/posts/e297feab/</a></p><p>folding没解决，暂时使用toggle，仅butterfly主题有效<br>效果见：<a href="https://butterfly.js.org/posts/4aa8abbe/#tag-hide">https://butterfly.js.org/posts/4aa8abbe/#tag-hide</a><br>语法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 美化 </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 8 开关端口</title>
      <link href="/2021/8/CentOS%208%20%E5%BC%80%E5%85%B3%E7%AB%AF%E5%8F%A3/"/>
      <url>/2021/8/CentOS%208%20%E5%BC%80%E5%85%B3%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_32656561/article/details/105619911">来源参考</a></p><ol><li>查看防火墙某个端口是否开放<br><code>firewall-cmd --query-port=3306/tcp</code></li><li>开放防火墙端口3306<br><code>firewall-cmd --zone=public --add-port=3306/tcp --permanent</code><br><strong>注意：开放端口后要重启防火墙生效</strong></li><li>重启防火墙<br><code>systemctl restart firewalld</code></li><li>关闭防火墙端口<br><code>firewall-cmd --remove-port=3306/tcp --permanent</code></li><li>查看防火墙状态<br><code>systemctl status firewalld</code></li><li>关闭防火墙<br><code>systemctl stop firewalld</code></li><li>打开防火墙<br><code>systemctl start firewalld</code></li><li>开放一段端口<br><code>firewall-cmd --zone=public --add-port=40000-45000/tcp --permanent</code></li><li>查看开放的端口列表<br><code>firewall-cmd --zone=public --list-ports</code></li><li>查看被监听Listen的端口<br><code>netstat -lntp</code></li><li>检查端口被哪个进程占用<br><code>netstat -lnp|grep 3306</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> firewall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS挂载NTFS分区</title>
      <link href="/2021/8/CentOS%E6%8C%82%E8%BD%BDNTFS%E5%88%86%E5%8C%BA/"/>
      <url>/2021/8/CentOS%E6%8C%82%E8%BD%BDNTFS%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<p>CentOS挂载NTFS分区：<a href="https://my.oschina.net/u/4364192/blog/3326016">https://my.oschina.net/u/4364192/blog/3326016</a></p><h2 id="先安装ntfsprogs"><a href="#先安装ntfsprogs" class="headerlink" title="先安装ntfsprogs"></a>先安装ntfsprogs</h2><p>截止到2021年4月27日，最新版仍是2017.3.23。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载此软件</span></span><br><span class="line">wget http://tuxera.com/opensource/ntfs-3g_ntfsprogs-2017.3.23.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压 </span></span><br><span class="line">tar -zxvf ntfs-3g_ntfsprogs-2017.3.23.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入解压后的目录</span></span><br><span class="line"><span class="built_in">cd</span> ntfs-3g_ntfsprogs-2017.3.23/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一个目录ntfs3g用以安装当前软件</span></span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/ntfs3g/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定编译路径</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/ntfs3g/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始编译和安装</span></span><br><span class="line">make&amp;&amp;make install</span><br></pre></td></tr></table></figure><h2 id="挂载NTFS分区"><a href="#挂载NTFS分区" class="headerlink" title="挂载NTFS分区"></a>挂载NTFS分区</h2><p>挂载命令格式（较非NTFS分区的挂载，其中加入了ntfs-3g参数）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t ntfs-3g /dev/sdb1 /mnt/udisk</span><br></pre></td></tr></table></figure><h2 id="实现开机自动挂载"><a href="#实现开机自动挂载" class="headerlink" title="实现开机自动挂载"></a>实现开机自动挂载</h2><p>要想实现自动开机挂载NTFS格式的USB硬盘，需要进行以下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先备份fstab表</span></span><br><span class="line">cp /etc/fstab /etc/fstabbakup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后打开vi编辑器</span></span><br><span class="line">vi /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在fstab表最后一行添加如下信息 </span></span><br><span class="line">/dev/sdb1   /mnt/udisk    ntfs-3g defaults     0 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="/2021/8/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/8/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="进入正在运行的容器中"><a href="#进入正在运行的容器中" class="headerlink" title="进入正在运行的容器中"></a>进入正在运行的容器中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 1f6091e48979 /bin/sh</span><br></pre></td></tr></table></figure><h3 id="列出本地容器镜像"><a href="#列出本地容器镜像" class="headerlink" title="列出本地容器镜像"></a>列出本地容器镜像</h3><p>（包括运行中的容器使用的镜像和未运行的静态镜像文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><h3 id="查看容器的run参数"><a href="#查看容器的run参数" class="headerlink" title="查看容器的run参数"></a>查看容器的run参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike YOUR-CONTAINER-Name</span><br></pre></td></tr></table></figure><h3 id="重启整个docker服务（非重启容器）"><a href="#重启整个docker服务（非重启容器）" class="headerlink" title="重启整个docker服务（非重启容器）"></a>重启整个docker服务（非重启容器）</h3><p>，可解决容器运行久后，长期占用内存而不释放的问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart  docker</span><br></pre></td></tr></table></figure><h3 id="修改容器重启策略，"><a href="#修改容器重启策略，" class="headerlink" title="修改容器重启策略，"></a>修改容器重启策略，</h3><p>portainer面板中可以修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=on-failure:3 abebf7571666 hopeful_morse</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建VSCODE-Server</title>
      <link href="/2021/8/Docker%E6%90%AD%E5%BB%BAVSCODE-Server/"/>
      <url>/2021/8/Docker%E6%90%AD%E5%BB%BAVSCODE-Server/</url>
      
        <content type="html"><![CDATA[<h3 id="宿主机环境装备"><a href="#宿主机环境装备" class="headerlink" title="宿主机环境装备"></a>宿主机环境装备</h3><p>先在宿主机建立用户数据目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /userdatas/mycode</span><br></pre></td></tr></table></figure><p>给上面目录授权（否则将会出现docker挂载该目录时拒绝访问的错误）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /userdatas/mycode</span><br></pre></td></tr></table></figure><h3 id="启动vscode-server容器"><a href="#启动vscode-server容器" class="headerlink" title="启动vscode-server容器"></a>启动vscode-server容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --name code-server -p 6688:8080 \</span><br><span class="line">  -v <span class="string">&quot;/userdatas/mycode:/home/coder&quot;</span> \</span><br><span class="line">  codercom/code-server:latest</span><br></pre></td></tr></table></figure><h3 id="登录密码的修改"><a href="#登录密码的修改" class="headerlink" title="登录密码的修改"></a>登录密码的修改</h3><p>进入宿主机<code>/userdatas/mycode/.config/code-server</code>目录，其中<code>config.yaml</code>中password后面的值就是密码。</p><blockquote><p>修改密码也是在此文件。<br>修改密码后，需要重启容器<code>docker restart code-server</code>才能生效。</p></blockquote><p>访问xxx.xx:6688即可享用<code>vscode WebIDE</code></p><h2 id="Python开发环境打磨"><a href="#Python开发环境打磨" class="headerlink" title="Python开发环境打磨"></a><code>Python</code>开发环境打磨</h2><h3 id="安装pip管理包"><a href="#安装pip管理包" class="headerlink" title="安装pip管理包"></a>安装pip管理包</h3><p><code>vscode</code>服务端（即docker容器）是基于<code>debian</code>系统，未安装pip，需要进入容器中进行安装，进入容器的方法有两种。</p><h4 id="一、WebIDE界面进入"><a href="#一、WebIDE界面进入" class="headerlink" title="一、WebIDE界面进入"></a>一、<code>WebIDE</code>界面进入</h4><p>登录<code>WebIDE</code>后，在<code>WebIDE</code>的终端中进行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><h4 id="二、在宿主机中进入"><a href="#二、在宿主机中进入" class="headerlink" title="二、在宿主机中进入"></a>二、在宿主机中进入</h4><p>宿主机运行以下命令进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it code-server /bin/bash</span><br></pre></td></tr></table></figure><p>然后执行 一、<code>WebIDE</code>界面安装 步骤中的代码。</p><h3 id="配置远程调试运行环境"><a href="#配置远程调试运行环境" class="headerlink" title="配置远程调试运行环境"></a>配置远程调试运行环境</h3><p>在<code>WebIDE</code>左侧的<code>插件</code>商店中安装<code>python</code>插件<br>重启容器<code>docker restart code-server</code><br>然后再次进入<code>WebIDE</code>,进入左侧的<code>运行和调试</code>，点击<code>创建 launch.json</code>,在编辑界面输入以下内容并保存：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Python: 当前文件&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;console&quot;</span>: <span class="string">&quot;internalConsole&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以按<code>Ctrl+F5</code>愉快的执行。</p><h3 id="设置WebIDE不显示配置文件"><a href="#设置WebIDE不显示配置文件" class="headerlink" title="设置WebIDE不显示配置文件"></a>设置<code>WebIDE</code>不显示配置文件</h3><p>在<code>WebIDE</code>的设置当中搜索<code>files.exclude</code>,添加一条规则<code>**/.*</code></p><p><del>### 安装等宽字体<code>JetBrains Mono</code></del><br><del>下载地址：<code>https://www.jetbrains.com/lp/mono/</code></del><br><del>安装方法见：<code>https://blog.csdn.net/jiaobuchong/article/details/108891406</code></del></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux设置全局代理</title>
      <link href="/2021/8/Linux%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/"/>
      <url>/2021/8/Linux%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="cover"><a href="#cover" class="headerlink" title="cover:"></a>cover:</h2><p>所有shell<br>这种情况可以修改/etc/profile、/etc/environment、、HOME/.bashrc、HOME/.zshrc配置文件，一般来说，只需要修改.bashrc或.zshrc就可以使所有的shell走代理（除非特殊情况）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span></span></span><br><span class="line">export &#123;http,https&#125;_proxy=&quot;http://127.0.0.1:1280&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">unset</span></span></span><br><span class="line">unset &#123;http,https&#125;_proxy</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">test</span></span></span><br><span class="line">curl -v checkip.dyndns.org</span><br><span class="line">curl --head -v www.google.com</span><br></pre></td></tr></table></figure><p>若希望立即见效，则?source 或HOME/.zshrc?或?sourceHOME/.bashrc。</p><p>因为linux终端不支持sock5，需要使用privoxy将HTTP流量转到本地sock5代理端口</p><p>1.安装Privoxy</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install privoxy</span><br></pre></td></tr></table></figure><p>2.配置Privoxy<br>修改/etc/privoxy/config文件（先清空原文件内容，再将以下内容粘贴进去）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">user-manual</span> <span class="string">/usr/share/doc/privoxy/user-manual</span></span><br><span class="line"><span class="string">confdir</span> <span class="string">/etc/privoxy</span></span><br><span class="line"><span class="string">logdir</span> <span class="string">/var/log/privoxy</span></span><br><span class="line"><span class="string">actionsfile</span> <span class="string">match-all.action</span> <span class="comment"># Actions that are applied to all sites and maybe overruled later on.</span></span><br><span class="line"><span class="string">actionsfile</span> <span class="string">default.action</span>   <span class="comment"># Main actions file</span></span><br><span class="line"><span class="string">actionsfile</span> <span class="string">user.action</span>      <span class="comment"># User customizations</span></span><br><span class="line"><span class="string">filterfile</span> <span class="string">default.filter</span></span><br><span class="line"><span class="string">filterfile</span> <span class="string">user.filter</span>      <span class="comment"># User customizations</span></span><br><span class="line"><span class="string">logfile</span> <span class="string">logfile</span></span><br><span class="line"><span class="string">toggle</span>  <span class="number">1</span></span><br><span class="line"><span class="string">enable-remote-toggle</span>  <span class="number">0</span></span><br><span class="line"><span class="string">enable-remote-http-toggle</span>  <span class="number">0</span></span><br><span class="line"><span class="string">enable-edit-actions</span> <span class="number">0</span></span><br><span class="line"><span class="string">enforce-blocks</span> <span class="number">0</span></span><br><span class="line"><span class="string">buffer-limit</span> <span class="number">4096</span></span><br><span class="line"><span class="string">enable-proxy-authentication-forwarding</span> <span class="number">0</span></span><br><span class="line"><span class="string">forwarded-connect-retries</span>  <span class="number">0</span></span><br><span class="line"><span class="string">accept-intercepted-requests</span> <span class="number">0</span></span><br><span class="line"><span class="string">allow-cgi-request-crunching</span> <span class="number">0</span></span><br><span class="line"><span class="string">split-large-forms</span> <span class="number">0</span></span><br><span class="line"><span class="string">keep-alive-timeout</span> <span class="number">5</span></span><br><span class="line"><span class="string">tolerate-pipelining</span> <span class="number">1</span></span><br><span class="line"><span class="string">socket-timeout</span> <span class="number">300</span></span><br><span class="line"><span class="comment">#listen-address  127.0.0.1:8118</span></span><br><span class="line"><span class="comment">#listen-address  [::1]:8118</span></span><br><span class="line"><span class="string">listen-address</span>  <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8118</span></span><br><span class="line"><span class="string">forward-socks5</span> <span class="string">/</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:1280</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><p>3.重载配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service privoxy restart</span><br></pre></td></tr></table></figure><p>二、设置全局代理<br>1.使用Privoxy将Socks5代理转换为http代理<br>详细步骤参考使用树莓派建立公共Http代理服务器<br>2.输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=127.0.0.1:8118</span><br><span class="line">export https_proxy=127.0.0.1:8118</span><br><span class="line">export ftp_proxy=127.0.0.1:1280</span><br></pre></td></tr></table></figure><p>http和https协议走Privoxy的http代理，ftp协议可以走socks代理</p><p>3.设置为默认代理<br>将上述命令添加到/etc/profile 文件末端，就可以使每次开启终端都自动设置代理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile </span><br></pre></td></tr></table></figure><p>在后面添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">export</span> <span class="string">http_proxy=127.0.0.1:8118</span></span><br><span class="line"><span class="string">export</span> <span class="string">https_proxy=127.0.0.1:8118</span></span><br><span class="line"><span class="string">export</span> <span class="string">ftp_proxy=127.0.0.1:1280</span></span><br></pre></td></tr></table></figure><p>添加完成后保存退出，执行以下命令即可生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>4.部分程序需要单独设置，如git</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> proxy </tag>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NextCloud安装、改造，支持视频缩略图和、挂载Samba、上传加速</title>
      <link href="/2021/8/NextCloud%E5%AE%89%E8%A3%85%E3%80%81%E6%94%B9%E9%80%A0%EF%BC%8C%E6%94%AF%E6%8C%81%E8%A7%86%E9%A2%91%E7%BC%A9%E7%95%A5%E5%9B%BE%E5%92%8C%E3%80%81%E6%8C%82%E8%BD%BDSamba%E3%80%81%E4%B8%8A%E4%BC%A0%E5%8A%A0%E9%80%9F/"/>
      <url>/2021/8/NextCloud%E5%AE%89%E8%A3%85%E3%80%81%E6%94%B9%E9%80%A0%EF%BC%8C%E6%94%AF%E6%8C%81%E8%A7%86%E9%A2%91%E7%BC%A9%E7%95%A5%E5%9B%BE%E5%92%8C%E3%80%81%E6%8C%82%E8%BD%BDSamba%E3%80%81%E4%B8%8A%E4%BC%A0%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="nextcloud安装"><a href="#nextcloud安装" class="headerlink" title="nextcloud安装"></a>nextcloud安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name nextcloud -v /userdatas/Sandisk/nextcloud:/var/www/html --link mariadb -p 800:80 nextcloud</span><br></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/353252517">https://zhuanlan.zhihu.com/p/353252517</a></p><h2 id="解除文件上传时“块大小”的限制，"><a href="#解除文件上传时“块大小”的限制，" class="headerlink" title="解除文件上传时“块大小”的限制，"></a>解除文件上传时“块大小”的限制，</h2><p><a href="https://help.nextcloud.com/t/uploads-chug-in-10mb-segments/71238/5">方法来源</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> --user www-data 容器ID php occ config:app:<span class="built_in">set</span> files max_chunk_size --value 0</span><br></pre></td></tr></table></figure><h2 id="重建nextcloud索引"><a href="#重建nextcloud索引" class="headerlink" title="重建nextcloud索引"></a>重建nextcloud索引</h2><p>针对通过非nextcloud客户端（手机、PC、网页端）途径放入nextcloud目录的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -u www-data nextcloud php occ files:scan --all</span><br></pre></td></tr></table></figure><p>使用该命令重建索引，如果报下面错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Starting scan <span class="keyword">for</span> user 1 out of 1 (xxx)</span><br><span class="line">Home storage <span class="keyword">for</span> user xxx not writable</span><br><span class="line">Make sure you<span class="string">&#x27;re running the scan command only as the user the web server runs as</span></span><br><span class="line"><span class="string">+---------+-------+--------------+</span></span><br><span class="line"><span class="string">| Folders | Files | Elapsed time |</span></span><br><span class="line"><span class="string">+---------+-------+--------------+</span></span><br><span class="line"><span class="string">| 0       | 0     | 00:00:00     |</span></span><br><span class="line"><span class="string">+---------+-------+--------------+</span></span><br></pre></td></tr></table></figure><p>那么，你需要将移入的文件（或目录）的所有这改为:<code>33:tape</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R 33:tape *</span><br></pre></td></tr></table></figure><h2 id="生成缩略图"><a href="#生成缩略图" class="headerlink" title="生成缩略图"></a>生成缩略图</h2><p>使用时会发现，Nextcloud 上传的视频不能生成缩略图。其实 Nextcloud 本身支持生成视频缩略图，需要安装 ffmpeg 并修改配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nextcloud bash</span><br><span class="line">apt update</span><br><span class="line">apt install ffmpeg</span><br></pre></td></tr></table></figure><p>停止NextCloud容器，再修改/var/www/html/config/config.php配置文件，添加：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;enable_previews&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line"><span class="string">&#x27;enabledPreviewProviders&#x27;</span> =&gt;</span><br><span class="line"><span class="keyword">array</span> (</span><br><span class="line">  <span class="number">0</span> =&gt; <span class="string">&#x27;OC\\Preview\\Image&#x27;</span>,</span><br><span class="line">  <span class="number">1</span> =&gt; <span class="string">&#x27;OC\\Preview\\Movie&#x27;</span>,</span><br><span class="line">  <span class="number">2</span> =&gt; <span class="string">&#x27;OC\\Preview\\TXT&#x27;</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>再次启动容器即可生效。</p><h2 id="支持挂载Samba"><a href="#支持挂载Samba" class="headerlink" title="支持挂载Samba"></a>支持挂载Samba</h2><p>Nextcloud 不仅是一个私有网盘，它还支持管理其他外部存储。可以把Samba共享，FTP，WebDAV等挂载到目录下统一访问管理。</p><p>Nextcloud默认是没有开启外部存储功能的，需在手动启用插件。<br><img src="2021-08-23T093034.png"></p><p>然后在设置里可以看到：</p><p><img src="2021-08-23T093049.png" alt="2021-08-23T093049"><br>Docker部署的 Nextcloud 默认是无法挂载 Samba 的，这里会显示：<br><img src="2021-08-23T093101.png" alt="2021-08-23T093101"></p><p>需要在容器内安装smbclient：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nextcloud bash</span><br><span class="line">apt install smbclient libsmbclient-dev</span><br><span class="line">pecl install smbclient</span><br><span class="line">docker-php-ext-enable smbclient</span><br></pre></td></tr></table></figure><p>重启Docker服务即可。</p><h2 id="自制Docker镜像"><a href="#自制Docker镜像" class="headerlink" title="自制Docker镜像"></a>自制Docker镜像</h2><p>以上两处调整，在升级 Nextcloud 镜像后又需要重新执行一次。我们可以用原镜像为基础定制一个 Nextcloud 镜像。</p><p>新建文件 Dockerfile ，内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nextcloud:latest</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;engr-z&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update &amp;&amp; apt upgrade -y</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt install ffmpeg smbclient libsmbclient-dev -y</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pecl install smbclient</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> docker-php-ext-enable smbclient</span></span><br></pre></td></tr></table></figure><p>然后在该目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my_nextcloud:latest ./</span><br></pre></td></tr></table></figure><p>执行完后会生成新的镜像：</p><p><img src="2021-08-23T093120.png" alt="2021-08-23T093120"><br>我们只需要用该镜像运行即可。</p><p>Nextcloud 升级<br>1.执行 <code>docker pull nextcloud:latest</code> 下载最新镜像，再构建自己的镜像。</p><p>2.停止正在运行的Nextcloud并删除：<code>docker stop nextcloud</code><br>3.重新运行镜像，参数和原来一样。</p><p>通过 Web 进入 Nextcloud 就会出现：<br><img src="2021-08-23T093129.png" alt="2021-08-23T093129"><br>不推荐在该界面上点击更新。因为在更新内容多的情况，尤其是第三方应用更新，时间较长，浏览器可能会超时，推荐使用 occ 更新。</p><p>occ命令是Nextcloud的命令行界面，Nextcloud管理员可以通过occ执行许多常见的服务器操作。命令格式：<br><code>sudo -u www-data php occ &lt;your_command&gt;</code><br>在Docker中运行的Nextcloud执行occ会出现权限问题：<br><img src="2021-08-23T093135.png" alt="2021-08-23T093135"><br>正确执行：</p><p><code>docker exec --user www-data nextcloud php occ upgrade</code><br>写这篇文章时，Nextcloud 21刚刚发布，性能提升巨大。我自己也一直用 Nextcloud 管理家庭的照片和视频，非常Nice。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nextcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx负载均衡</title>
      <link href="/2021/8/Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2021/8/Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Nginx负载均衡"><a href="#一、Nginx负载均衡" class="headerlink" title="一、Nginx负载均衡"></a>一、Nginx负载均衡</h2><h3 id="1、示意图"><a href="#1、示意图" class="headerlink" title="1、示意图"></a>1、示意图</h3><img src="1064872-20190822222926586-494023196.png" /><h3 id="2、好处"><a href="#2、好处" class="headerlink" title="2、好处"></a>2、好处</h3><p>均摊请求，让服务端整体吞吐率提高，满足不断增长的业务需求。</p><p>相比于单点服务，当其中一台服务器挂掉后，还可以继续让剩下的服务器继续服务，提高了容灾性。</p><h2 id="二、负载均衡的分类"><a href="#二、负载均衡的分类" class="headerlink" title="二、负载均衡的分类"></a>二、负载均衡的分类</h2><h3 id="1、GSLB（全局负载均衡）"><a href="#1、GSLB（全局负载均衡）" class="headerlink" title="1、GSLB（全局负载均衡）"></a>1、GSLB（全局负载均衡）</h3><p>一般是以国家或省为单位进行全局负载的。</p><p>示意图如下：</p><img src="1064872-20190822223632669-2146465718.png" /><h3 id="2、SLB"><a href="#2、SLB" class="headerlink" title="2、SLB"></a>2、SLB</h3><h4 id="示意图："><a href="#示意图：" class="headerlink" title="示意图："></a>示意图：</h4><img src="1064872-20190822223748732-1609962668.png" style="zoom:80%;" /><h2 id="三、基于LVS的中间件架构"><a href="#三、基于LVS的中间件架构" class="headerlink" title="三、基于LVS的中间件架构"></a>三、基于LVS的中间件架构</h2><p>LVS（Linux Virtual Server ）Linux 虚拟服务器</p><h3 id="1、四层负载均衡"><a href="#1、四层负载均衡" class="headerlink" title="1、四层负载均衡"></a>1、四层负载均衡</h3><p>即在OSI七层模型中的传输层。因为第四层支持TCP/IP协议。四层负载均衡只需要对客户端的请求进行TCP/IP协议的包转发就能实现负载均衡。</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>非常快，只需要最底层进行应用处理，不需要进行一些复杂的逻辑，值需要负责包的转发即可。</p><h4 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h4><img src="1064872-20190822223923295-378840731.png" style="zoom:80%;" /><h3 id="2、七层负载均衡"><a href="#2、七层负载均衡" class="headerlink" title="2、七层负载均衡"></a>2、七层负载均衡</h3><p>因为是在应用层，因此可以完成很多应用方面的协议请求，比如HTTP协议的负载均衡可以实现HTTP信息的改写，头信息的改写，安全应用规则的控制，转发，rewrite等等方面的规则控制。因此在七层负载均衡里面可以做的事情就更多一些，Nginx就是一个典型的七层负载均衡的SLB。</p><p>SLB（Server Load Balancing）服务器负载均衡。</p><h4 id="示意图-1"><a href="#示意图-1" class="headerlink" title="示意图"></a>示意图</h4><img src="1064872-20190822224245131-1931059622.png" style="zoom:80%;" /><h3 id="Nginx负载均衡实现原理"><a href="#Nginx负载均衡实现原理" class="headerlink" title="Nginx负载均衡实现原理"></a>Nginx负载均衡实现原理</h3><p>通过 proxy_pass 转发到后端的服务器上，只是不是转发到一台，而是一组虚拟的服务池（即 upstream server）。在upstream 组里面实现了对于多台服务器请求的不断轮询。</p><p>当用户的请求过来后，就会通过 upstream_module 这个模块将用户的请求分发到不同的服务上，从而实现负载均衡。</p><p>故 proxy_pass 和 upstream 是两个核心的配置。</p><h3 id="示意图-2"><a href="#示意图-2" class="headerlink" title="示意图"></a>示意图</h3><img src="1064872-20190822225332595-918442128.png" style="zoom:80%;" /><h3 id="配置语法"><a href="#配置语法" class="headerlink" title="配置语法"></a>配置语法</h3><p>ngx_http_upstream_module官方文档 ：<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html"> </a><a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html">http://nginx.org/en/docs/http/ngx_http_upstream_module.html</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:    <span class="attribute">upstream</span> name &#123; ... &#125;</span><br><span class="line">Default:    —</span><br><span class="line">Context:    http</span><br></pre></td></tr></table></figure><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><h3 id="a、用一台服务器来实现负载均衡，配置如下："><a href="#a、用一台服务器来实现负载均衡，配置如下：" class="headerlink" title="a、用一台服务器来实现负载均衡，配置如下："></a>a、用一台服务器来实现负载均衡，配置如下：</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> chrdai &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8001</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8002</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8003</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/proxy_cache_access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://chrdai;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">include</span> proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b、-另外三台真实服务器的配置如下："><a href="#b、-另外三台真实服务器的配置如下：" class="headerlink" title="b、 另外三台真实服务器的配置如下："></a>b、 另外三台真实服务器的配置如下：</h3><p>我这里是通过同一台服务器的不同端口模拟的。</p><p>第一台（/etc/nginx/conf.d/realserver1.conf）：</p><img src="1064872-20190815223816947-958158317.png" style="zoom:80%;" /><p>第二台（/etc/nginx/conf.d/realserver2.conf）：</p> <img src="1064872-20190815223857577-1323905603.png" style="zoom:80%;" /><p>第三台（/etc/nginx/conf.d/realserver3.conf）：</p><img src="1064872-20190815223946234-1049199222.png" style="zoom:80%;" /><h3 id="c、分别在三台真实服务器（当然我这里是在一台服务器中用三个端口模拟的）的项目目录下建立index-html文件。"><a href="#c、分别在三台真实服务器（当然我这里是在一台服务器中用三个端口模拟的）的项目目录下建立index-html文件。" class="headerlink" title="c、分别在三台真实服务器（当然我这里是在一台服务器中用三个端口模拟的）的项目目录下建立index.html文件。"></a>c、分别在三台真实服务器（当然我这里是在一台服务器中用三个端口模拟的）的项目目录下建立index.html文件。</h3><p>第一台（/opt/app/code1）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>upstream<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Test upstream1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 第二台（/opt/app/code2）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>upstream<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Test upstream2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 第三台（/opt/app/code3）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>upstream<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Test upstream3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="c、刷新页面，发现页面可以在三个站点间轮询显示。‘"><a href="#c、刷新页面，发现页面可以在三个站点间轮询显示。‘" class="headerlink" title="c、刷新页面，发现页面可以在三个站点间轮询显示。‘"></a>c、刷新页面，发现页面可以在三个站点间轮询显示。‘</h3><img src="1064872-20190825121115497-1376805093.png" /><img src="1064872-20190825121127864-1392128562.png" /><img src="1064872-20190825121138941-1076691950.png" /><p>说明我们的负载均衡配置成功。</p><p> <strong>注意</strong>：upstream只能配置在 http 这一层，即 server 层的外面。</p><p>下面我们来模拟其中一台服务器挂掉后，负载均衡是如何工作的。</p><p>如果是真实服务器，可以将nginx进程kill掉，但是由于我这里是在同一台服务器下面的三个端口来模拟的，所以不能直接kill掉Nginx进程。</p><p>我这里通过在 iptables 中添加一条规则来将所有来自 8002 端口的请求都 drop 掉，即不在对外提供 8002 端口的服务。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">iptables</span> -I INPUT -p tcp --dport <span class="number">8002</span> -j DROP</span><br></pre></td></tr></table></figure><p>此时我们在来访问页面，发现只会显示 upstream1 和 upstream3，upstream2已经被略过了。</p><img src="1064872-20190825121115497-1376805093-162893272909716.png" /><img src="1064872-20190825121138941-1076691950-162893273815218.png" /><p><strong>说明当我们的负载均衡发现如果有一台服务器挂掉后，会自动略过这台服务器。打他提高了容灾性。</strong></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>四、负载均衡调度中的状态</p><table><thead><tr><th><strong>状态</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>down</td><td>当前的server暂时不参与负载均衡</td></tr><tr><td>backup</td><td>预留的备份服务器</td></tr><tr><td>max_fails</td><td>允许请求失败的次数</td></tr><tr><td>fail_timeout</td><td>经过max_fails失败后，服务暂停的时间（默认是10秒）</td></tr><tr><td>max_conns</td><td>限制最大的接收连接数</td></tr></tbody></table><p>max_conns的应用场景是，当我们把两个不同配置的服务器加在了同一个upstream下时，比如一个是四核，一个是8核的服务器，总不能让两台服务器承受相同的请求连接数吧，默认的轮询策略会均匀分配，这时我们就可以通过这个参数来限制后端服务最大的请求数。</p><h3 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> chrdai &#123;</span><br><span class="line">    //8001不启用</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8001</span> down;</span><br><span class="line">    //8002设为备份机</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8002</span> backup;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8003</span> max_fails=<span class="number">1</span> fail_timeout=<span class="number">10s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/proxy_cache_access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://chrdai;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">include</span> proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们在访问，发现只有8003 在提供服务。</p><img src="1064872-20190825124436150-312011919.png" /><p>下面我们用iptables规则来限制来自8003的请求，看8002能否从备份状态恢复为提供服务状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 8003 -j DROP</span><br></pre></td></tr></table></figure><p> 服务端经过一段时间的尝试，发现8003挂了，果然将8002转正了。</p><img src="1064872-20190825124930465-387096860.png" /><p>我们再次刷新页面，在8003没有恢复之前，都是访问的8002。</p><p>下面我们来将8003的服务恢复过来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -F</span><br></pre></td></tr></table></figure><p>再次刷新页面，发现又是由8003来提供服务了，8002继续轮为备胎。</p><img src="1064872-20190825125216057-767692264.png" /><h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><ul><li>当我们负载均衡中其中一台服务器挂掉后，会略过该服务器，剩下的服务器继续提供服务。</li><li>当所有的主服务器都挂掉后，备用服务器会转正。</li><li>当主服务器恢复后，继续由主服务器提供服务，备用服务器继续轮为备胎。</li></ul><h2 id="五、Nginx的调度算法"><a href="#五、Nginx的调度算法" class="headerlink" title="五、Nginx的调度算法"></a>五、Nginx的调度算法</h2><h2 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h2><table><thead><tr><th>调度算法名称</th><th>说明</th></tr></thead><tbody><tr><td>轮询</td><td>按时间顺序逐一分配到不同的后端服务器</td></tr><tr><td>加权轮询</td><td>weight值越大，分配到的访问几率越高</td></tr><tr><td>ip_hash</td><td>每个请求按访问IP的的hash结果分配，这样来自同一个IP的固定访问一个后端服务器</td></tr><tr><td>url_hash</td><td>按照访问的url的hash结果来分配请求，使每个url定向到同一个后端服务器</td></tr><tr><td>least_conn</td><td>最少链接数，哪个机器连接数少，就分给哪个机器</td></tr><tr><td>hash关键数值</td><td>hash自定义的key</td></tr></tbody></table><h3 id="1、加权轮询示例："><a href="#1、加权轮询示例：" class="headerlink" title="1、加权轮询示例："></a>1、加权轮询示例：</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> chrdai &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8001</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8002</span> weight=<span class="number">5</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8003</span>;</span><br><span class="line">&#125;</span><br><span class="line">//理论上来讲，如果请求7次，应该有 5 次会请求 8002 所对应的这台服务器</span><br></pre></td></tr></table></figure><h3 id="2、ip-has策略示例："><a href="#2、ip-has策略示例：" class="headerlink" title="2、ip_has策略示例："></a>2、ip_has策略示例：</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> chrdai &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8001</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8002</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8003</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器会根据 REMOTE_ADDR 做hash，同一个ip的请求，不管请求多少次，都会请求相同的一台服务器。</p><p>它的缺点是，如果中间有一层代理，那么取到的就不是客户端真实的ip，这样就无法基于用户真实的ip来做轮询了。而会跟代理服务器的ip来固定走一台服务器。</p><p>如果按照ip来分配，往往取不到用户端真实的ip。还有一个问题就是当服务端使用了缓存，假如一个用户先访问了服务器1，服务器1缓存了一部分资源，下一次访问的时候被轮询到了服务器2，那么上一次的缓存就无效了，Nginx又增加了更加友好的hash策略。</p><h3 id="3、hash关键数值轮询策略"><a href="#3、hash关键数值轮询策略" class="headerlink" title="3、hash关键数值轮询策略"></a>3、hash关键数值轮询策略</h3><h3 id="配置语法："><a href="#配置语法：" class="headerlink" title="配置语法："></a>配置语法：</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//version&gt;1.7.2Syntax：<span class="attribute">hash</span> key [consistent];</span><br><span class="line">Default：-;</span><br><span class="line">Context：upstream;</span><br></pre></td></tr></table></figure><h3 id="4、url-hash-示例："><a href="#4、url-hash-示例：" class="headerlink" title="4、url_hash 示例："></a>4、url_hash 示例：</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> chrdai &#123;</span><br><span class="line">    <span class="attribute">hash</span> $request_uri;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8001</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8002</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.133:8003</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 /opt/app/cod1 目录下新建三个文件。</p><p><strong>url1.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>upstream<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>server1 url1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>url2.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>upstream<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>server1 url2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>url3.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>upstream<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>server1 url3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>/opt/app/code2 和 /opt/app/code3 目录下也创建三个 urlx.html，页面内容和上面同理，修改一下 server的值和url的值即可。</p><p>此时由于我们的hash策略是根据 reques_uri 来的，所以会有如下结果。</p><p>a、当我们访问 <a href="http://192.168.0.133/url1.html">http://192.168.0.133/url1.html</a> 时，由于一开始就进入了 server1 这台服务器，不管怎么刷新，以后也永远进入server1这台服务器，因为它是根据 request_uri来做的hash。</p><img src="1064872-20190826224416325-1184809982.png" style="zoom:100%;" /><p>b、当我们访问 <a href="http://192.168.0.133/url1.html">http://192.168.0.133/url2.html</a> 时，由于一开始就进入了 server3 这台服务器，不管怎么刷新，以后也永远进入server3这台服务器。</p><img src="1064872-20190826225446505-1452035951.png" style="zoom:100%;" /><p>c、当我们访问 <a href="http://192.168.0.133/url1.html">http://192.168.0.133/url3.html</a> 时，由于一开始就进入了 server2 这台服务器，不管怎么刷新，以后也永远进入server3这台服务器。</p> <img src="1064872-20190826225524188-2103759996.png" /><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>加权轮询和轮询都是基于请求来进行分配的。</li><li>ip_hash策略，当中间有代理服务或者有设置缓存都有一定的局限性。</li><li>通常使用自定义的 url_hash策略来控制轮询。</li><li>当加权轮询策略和ip_hash 或者 url_hash 策略混用的时候，因为weight控制的是轮询策略下的权重，ip_hash是根据请求来源的ip加入轮询的算法。所以用了ip_hash或者url_hash的策略，就不需要添加weight的参数了。</li></ul><p>本文为袋鼠学习中的总结，如有转载请注明出处：<a href="https://www.cnblogs.com/chrdai/protected/p/11397397.html">https://www.cnblogs.com/chrdai/protected/p/11397397.html</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Watchtower - 自动更新 Docker 镜像与容器</title>
      <link href="/2021/8/Watchtower%20-%20%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%20Docker%20%E9%95%9C%E5%83%8F%E4%B8%8E%E5%AE%B9%E5%99%A8/"/>
      <url>/2021/8/Watchtower%20-%20%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%20Docker%20%E9%95%9C%E5%83%8F%E4%B8%8E%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>转载自：<a href="https://p3terx.com/archives/docker-watchtower.html">https://p3terx.com/archives/docker-watchtower.html</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Docker 容器的部署有一种在手机上装 App 的感觉，但 Docker 容器并不会像手机 App 那样会自动更新，而如果我们需要更新容器一般需要以下四个步骤：</p><ul><li>停止容器：<code>docker stop &lt;CONTAINER&gt;</code></li><li>删除容器：<code>docker rm &lt;CONTAINER&gt;</code></li><li>更新镜像：<code>docker pull &lt;IMAGE&gt;</code></li><li>启动容器：<code>docker run &lt;ARG&gt; ... &lt;IMAGE&gt;</code></li></ul><p>停止容器这个步骤可以在删除容器时使用 <code>-f</code> 参数来代替，即使这样还是需要三个步骤。如果部署了大量的容器需要更新使用这种传统的方式工作量是巨大的。</p><p><a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL2NvbnRhaW5ycnIvd2F0Y2h0b3dlcg">Watchtower</a> 是一个可以实现自动化更新 Docker 基础镜像与容器的实用工具。它监视正在运行的容器以及相关的镜像，当检测到 reg-istry 中的镜像与本地的镜像有差异时，它会拉取最新镜像并使用最初部署时相同的参数重新启动相应的容器，一切好像什么都没发生过，就像更新手机上的 App 一样。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>Watch-tower 本身被打包为 Docker 镜像，因此可以像运行任何其他容器一样运行它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    containrrr/watchtower</span><br></pre></td></tr></table></figure><p>然后所有容器都会自动更新，也包括 Watch-tower 本身。</p><h2 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h2><details style="display: block; color: rgb(238, 238, 238); font-family: BlinkMacSystemFont, &quot;Microsoft YaHei&quot;, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; font-size: 15.96px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(17, 61, 61); text-decoration-style: initial; text-decoration-color: initial;"><summary style="display: list-item;">点击查看</summary></details><h2 id="自动清除旧镜像"><a href="#自动清除旧镜像" class="headerlink" title="自动清除旧镜像"></a>自动清除旧镜像</h2><p>官方给出的默认启动命令在长期使用后会堆积非常多的标签为 <code>none</code> 的旧镜像，如果放任不管会占用大量的磁盘空间。要避免这种情况可以加入 <code>--cleanup</code> 选项，这样每次更新都会把旧的镜像清理掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    containrrr/watchtower \</span><br><span class="line">    --cleanup</span><br></pre></td></tr></table></figure><p><code>--cleanup</code> 选项可以简写为 <code>-c</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    containrrr/watchtower -c</span><br></pre></td></tr></table></figure><h2 id="选择性自动更新"><a href="#选择性自动更新" class="headerlink" title="选择性自动更新"></a>选择性自动更新</h2><p>某些容器可能需要稳定的运行，经常更新或重启可能会造成一些问题，这时我们可以使用一些选项参数来选择与控制容器的更新。</p><h3 id="容器更新列表"><a href="#容器更新列表" class="headerlink" title="容器更新列表"></a>容器更新列表</h3><p>假设我们只想更新 <code>nginx</code>、<code>redis</code> 这两个容器，我们可以把容器名称追加到启动命令的最后面，就像下面这个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    containrrr/watchtower -c \</span><br><span class="line">    nginx redis</span><br></pre></td></tr></table></figure><p>博主觉得把需要更新的容器名称写在启动命令中不利于管理，于是想了个更好的方法，建立一个更新列表文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.watchtower.list</span><br><span class="line">aria2-pro</span><br><span class="line">unlockmusic</span><br><span class="line">mtg</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过变量的方式去调用这个列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    containrrr/watchtower -c \</span><br><span class="line">    $(cat ~/.watchtower.list)</span><br></pre></td></tr></table></figure><p>这样只需要调整列表后删除 Watch-tower 容器并重新执行上面的命令重新启动 Watch-tower 即可。</p><h3 id="设置单个容器自动更新特征"><a href="#设置单个容器自动更新特征" class="headerlink" title="设置单个容器自动更新特征"></a>设置单个容器自动更新特征</h3><p>给容器中添加 <code>com.centurylinklabs.watchtower.enable</code> 这个 LA-BEL 并设置它的值为 <code>false</code>，或者在启动命令中加入 <code>--label com.centurylinklabs.watchtower.enable=false</code> 参数可以排除相应的容器。下面这个例子是博主的 <code>openwrt-mini</code> 镜像的容器启动命令，Watch-tower 将永远忽略它的更新，即使它包含在自动更新列表中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name openwrt-mini \</span><br><span class="line">    --restart always \</span><br><span class="line">    --network openwrt \</span><br><span class="line">    --privileged \</span><br><span class="line">    --label com.centurylinklabs.watchtower.enable=<span class="literal">false</span> \</span><br><span class="line">    p3terx/openwrt-mini \</span><br><span class="line">    /sbin/init</span><br></pre></td></tr></table></figure><p>当容器启动命令中加入 <code>--label com.centurylinklabs.watchtower.enable=true</code> 参数，并且给 Watch-tower 加上 <code>--label-enable</code> 选项时，Watch-tower 将只更新这些包含此参数的容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    containrrr/watchtower -c \</span><br><span class="line">    --label-enable</span><br></pre></td></tr></table></figure><p><code>--label-enable</code> 可以简写为 <code>-e</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    containrrr/watchtower -ce</span><br></pre></td></tr></table></figure><p>因为需要在容器启动时进行设置，且设置后就无法直接更改，只能重建容器，所以这种方式的灵活性不如更新列表法。尤其是在设置 <code>com.centurylinklabs.watchtower.enable=false</code> 参数后容器将永远被 Watch-tower 忽略，也包括后面将要提到的手动更新方式，所以一般不推荐这样做，除非你愿意手动重建的原生方式更新。</p><h2 id="设置自动更新检查频率"><a href="#设置自动更新检查频率" class="headerlink" title="设置自动更新检查频率"></a>设置自动更新检查频率</h2><p>默认情况下 Watch-tower 每 5 分钟会轮询一次，如果你觉得这个频率太高了可以使用如下选项来控制更新检查的频率，但二者只能选择其一。</p><ul><li><code>--interval</code>, <code>-i</code> - 设置更新检测时间间隔，单位为秒。比如每隔 1 个小时检查一次更新：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    containrrr/watchtower -c \</span><br><span class="line">    --interval 3600</span><br></pre></td></tr></table></figure><ul><li><code>--schedule</code>, <code>-s</code> - 设置定时检测更新时间。格式为 6 字段 Cron 表达式，而非传统的 5 字段，即第一位是秒。比如每天凌晨 2 点检查一次更新：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name watchtower \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    containrrr/watchtower -c \</span><br><span class="line">    --schedule <span class="string">&quot;0 0 2 * * *&quot;</span></span><br></pre></td></tr></table></figure><h2 id="手动更新"><a href="#手动更新" class="headerlink" title="手动更新"></a>手动更新</h2><p>前面的使用方式都是让 Watch-tower 以 <code>detached</code>（后台）模式在运行并自动更新容器，而 Watch-tower 也支持以 <code>foreground</code>（前台）模式来使用，即运行一次退出并删掉容器，来实现手动更新容器。这对于偶尔更新一次那些不在自动更新列表中的容器非常有用。</p><p>对于 <code>foreground</code> 模式，需要加上 <code>--run-once</code> 这个专用的选项。下面的例子 Docker 会运行一次 Watch-tower 并检查 <code>aria2-pro</code> 容器的基础镜像更新，最后删掉本次运行创建的 Watch-tower 容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    containrrr/watchtower -c \</span><br><span class="line">    --run-once \</span><br><span class="line">    aria2-pro</span><br></pre></td></tr></table></figure><p><code>--run-once</code> 可以简写为 <code>-R</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    containrrr/watchtower -cR \</span><br><span class="line">    aria2-pro</span><br></pre></td></tr></table></figure><p>需要注意的是当这个容器设置过 <code>com.centurylinklabs.watchtower.enable=false</code> 参数时不会更新。</p><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>以上是博主在使用 Watch-tower 中总结的一些使用方式和方法，当然它还有一些其它的功能与使用方式，比如电子邮件通知、监视私人注册表的镜像、更新远程主机上的容器等，这些对于一般用户来说可能很少会用到，所以这里就不赘述了，感兴趣的小伙伴可以去研究 <a href="https://p3terx.com/go/aHR0cHM6Ly9jb250YWlucnJyLmdpdGh1Yi5pby93YXRjaHRvd2VyLw">Watchtower 官方文档</a>。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cnblog漂亮主题博客样板</title>
      <link href="/2021/8/cnblog%E6%BC%82%E4%BA%AE%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E6%A0%B7%E6%9D%BF/"/>
      <url>/2021/8/cnblog%E6%BC%82%E4%BA%AE%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E6%A0%B7%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/TangXiaoHuiHui">https://www.cnblogs.com/TangXiaoHuiHui</a><br><a href="https://www.cnblogs.com/BNTang/">https://www.cnblogs.com/BNTang/</a></p><p>Silence<br><a href="https://www.cnblogs.com/jajian/p/9763946.html">https://www.cnblogs.com/jajian/p/9763946.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> cnblog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 搭建filerun</title>
      <link href="/2021/8/docker%20%E6%90%AD%E5%BB%BAfilerun/"/>
      <url>/2021/8/docker%20%E6%90%AD%E5%BB%BAfilerun/</url>
      
        <content type="html"><![CDATA[<p>filerun 官方docker：<br><a href="https://hub.docker.com/r/afian/filerun/">https://hub.docker.com/r/afian/filerun/</a></p><p>1、预先搭建好mariadb容器<br>2、使用以下命令运行filerun容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name filerun \</span><br><span class="line">    --restart=unless-stopped \</span><br><span class="line">    --link=mariadb</span><br><span class="line">    -e FR_DB_HOST=数据库地址 \</span><br><span class="line">    -e FR_DB_PORT=数据库端口 \</span><br><span class="line">    -e FR_DB_NAME=数据库名称（需要先自行建好，filerun初始化时不会建立） \</span><br><span class="line">    -e FR_DB_USER=数据库用户名 \</span><br><span class="line">    -e FR_DB_PASS=数据库密码 \</span><br><span class="line">    -e APACHE_RUN_USER=www-data \</span><br><span class="line">    -e APACHE_RUN_USER_ID=33 \</span><br><span class="line">    -e APACHE_RUN_GROUP=www-data \</span><br><span class="line">    -e APACHE_RUN_GROUP_ID=33 \</span><br><span class="line">    -p 616:80 \</span><br><span class="line">    -v /userdatas/Sandisk/filerun/html:/var/www/html \</span><br><span class="line">    -v /userdatas/Sandisk/filerun/user-files:/user-files \</span><br><span class="line">    afian/filerun</span><br></pre></td></tr></table></figure><p>filerun默认监听80端口，<br>默认使用以下两个作为数据持久化的路径：</p><ul><li>/filerun/html:/var/www/html</li><li>/filerun/user-files:/user-files</li></ul><p>初始化的用户名密码均为：<code>superuser</code></p><p>深色主题：<br>来源：<a href="https://feedback.filerun.com/en/communities/1/topics/501-dark-version-theme">https://feedback.filerun.com/en/communities/1/topics/501-dark-version-theme</a><br>文中提到的<code>theme_dark.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.frBtn</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.x-grid3-header</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#303030</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.x-btn-pressed</span>,</span><br><span class="line"><span class="selector-class">.x-btn-click</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.x-btn-pressed</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.x-btn-icon</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#262626</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.x-window</span>,</span><br><span class="line"><span class="selector-class">.x-toolbar</span>,</span><br><span class="line"><span class="selector-class">.x-panel-header</span>,</span><br><span class="line"><span class="selector-class">.x-panel-body</span>,</span><br><span class="line"><span class="selector-class">.x-panel-footer</span>,</span><br><span class="line"><span class="selector-class">.x-grid3</span>,</span><br><span class="line"><span class="selector-class">.ext-el-mask</span>,</span><br><span class="line"><span class="selector-class">.x-combo-list-inner</span>,</span><br><span class="line"><span class="selector-class">.x-tab-panel-header</span>,</span><br><span class="line"><span class="selector-class">.x-tab-panel-footer</span>,</span><br><span class="line"><span class="selector-class">.x-form-text</span>,</span><br><span class="line"><span class="selector-tag">textarea</span><span class="selector-class">.x-form-field</span>,</span><br><span class="line"><span class="selector-class">.x-superboxselect-input-field</span>,</span><br><span class="line"><span class="selector-class">.x-menu</span>,</span><br><span class="line"><span class="selector-class">.x-layout-split</span>,</span><br><span class="line"><span class="selector-class">.headerTbar</span> <span class="selector-class">.x-btn-icon</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.targetSelector</span> <span class="selector-class">.backButton</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.targetSelector</span> <span class="selector-class">.closeButton</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.targetSelector</span> <span class="selector-class">.topToolbar</span>,</span><br><span class="line"><span class="selector-class">.targetSelector</span> <span class="selector-class">.x-window-header</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#404040</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-class">.headerTbar</span>,</span><br><span class="line"><span class="selector-class">.x-menu-item-active</span>,</span><br><span class="line"><span class="selector-class">.tmbItem</span><span class="selector-class">.typeFolder</span>,</span><br><span class="line"><span class="selector-class">.tmbItem</span> <span class="selector-class">.tmbInner</span>,</span><br><span class="line"><span class="selector-class">.x-superboxselect-item</span>,</span><br><span class="line"><span class="selector-class">.x-tree-node-el</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.fr-btn-default</span>,</span><br><span class="line"><span class="selector-class">.x-grid3-row-over</span>,</span><br><span class="line"><span class="selector-class">.ext-el-mask-msg</span>,</span><br><span class="line"><span class="selector-id">#loadMsg</span> <span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-class">.x-list-over</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#262626</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.headerTbar</span> <span class="selector-class">.x-btn-icon</span><span class="selector-class">.x-btn-pressed</span>,</span><br><span class="line"><span class="selector-class">.headerTbar</span> <span class="selector-class">.x-btn-icon</span><span class="selector-class">.x-btn-click</span>,</span><br><span class="line"><span class="selector-class">.headerTbar</span> <span class="selector-class">.x-btn-icon</span><span class="selector-class">.x-btn-menu-active</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.headerTbar</span> <span class="selector-class">.xtb-sep</span> &#123;</span><br><span class="line"><span class="attribute">border-color</span>: white;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tmbItem</span><span class="selector-class">.typeFolder</span>,</span><br><span class="line"><span class="selector-class">.tmbItem</span> <span class="selector-class">.tmbInner</span> &#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fr-btn-new</span>,</span><br><span class="line"><span class="selector-class">.fr-btn-primary</span>, <span class="selector-class">.fr-btn-primary</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.x-date-inner</span> <span class="selector-class">.x-date-selected</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.x-combo-list</span> <span class="selector-class">.x-combo-selected</span>,</span><br><span class="line"><span class="selector-class">.x-list-selected</span>,</span><br><span class="line"><span class="selector-class">.comment</span><span class="selector-class">.own</span> <span class="selector-class">.text</span>,</span><br><span class="line"><span class="selector-class">.bubbleCount</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#2d61b7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fr-btn-default</span>,</span><br><span class="line"><span class="selector-class">.fr-btn-default</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.x-color-palette</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.x-color-palette</span> <span class="selector-tag">em</span>,</span><br><span class="line"><span class="selector-class">.x-color-palette</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.x-color-palette</span> <span class="selector-tag">a</span><span class="selector-class">.x-color-palette-sel</span>,</span><br><span class="line"><span class="selector-class">.x-superboxselect-item</span> &#123;</span><br><span class="line"><span class="attribute">border-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.x-window</span>,</span><br><span class="line"><span class="selector-class">.x-menu</span> &#123;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#262626</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.x-tab-strip-bottom</span>,</span><br><span class="line"><span class="selector-class">.x-tab-strip-top</span>,</span><br><span class="line"><span class="selector-class">.x-menu-sep</span>,</span><br><span class="line"><span class="selector-class">.x-toolbar</span><span class="selector-class">.FR-NavBar</span>,</span><br><span class="line"><span class="selector-class">.x-layout-split</span>,</span><br><span class="line"><span class="selector-class">.x-grid3-header</span>,</span><br><span class="line"><span class="selector-class">.x-grid3-row</span>,</span><br><span class="line"><span class="selector-class">.targetSelector</span> <span class="selector-class">.x-window-body</span> &#123;</span><br><span class="line"><span class="attribute">border-color</span>: <span class="number">#262626</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment</span><span class="selector-class">.own</span> <span class="selector-class">.text</span> <span class="selector-class">.inner</span>:after,</span><br><span class="line">.comment.own .text .inner:before &#123;</span><br><span class="line">border-left-color: <span class="number">#2d61b7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo3d</span>,</span><br><span class="line"><span class="selector-class">.logo3d</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.fr-btn-new</span>,</span><br><span class="line"><span class="selector-class">.headerTbar</span> <span class="selector-class">.fa</span>,</span><br><span class="line"><span class="selector-class">.x-btn-icon</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">i</span>,</span><br><span class="line"><span class="selector-class">.x-btn-icon</span><span class="selector-class">.x-btn-pressed</span> <span class="selector-tag">i</span>,</span><br><span class="line"><span class="selector-class">.x-btn-icon</span><span class="selector-class">.x-btn-click</span> <span class="selector-tag">i</span>,</span><br><span class="line"><span class="selector-class">.x-combo-list</span> <span class="selector-class">.x-combo-selected</span>,</span><br><span class="line"><span class="selector-class">.targetSelector</span> <span class="selector-class">.x-list-selected</span> <span class="selector-tag">dt</span>,</span><br><span class="line"><span class="selector-class">.targetSelector</span> <span class="selector-class">.x-list-selected</span> <span class="selector-class">.fa</span>,</span><br><span class="line"><span class="selector-class">.frBtn</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.x-menu-item</span>,</span><br><span class="line"><span class="selector-class">.x-menu-item-active</span> <span class="selector-class">.x-menu-item-the-arrow</span>,</span><br><span class="line"><span class="selector-class">.fr-btn-default</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-class">.lang-select</span>,</span><br><span class="line"><span class="selector-class">.x-tree-node</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.tmbItem</span> <span class="selector-class">.name</span>,</span><br><span class="line"><span class="selector-class">.fa</span>,</span><br><span class="line"><span class="selector-class">.x-form-text</span>,</span><br><span class="line"><span class="selector-tag">textarea</span><span class="selector-class">.x-form-field</span>,</span><br><span class="line"><span class="selector-class">.x-superboxselect-input-field</span>,</span><br><span class="line"><span class="selector-class">.fr-details-fields</span> <span class="selector-class">.field</span> <span class="selector-class">.name</span>,</span><br><span class="line"><span class="selector-class">.x-tool</span>,</span><br><span class="line"><span class="selector-class">.x-grid3-hd-row</span> <span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-class">.FR-NavBar</span> <span class="selector-class">.frBtn</span> <span class="selector-tag">span</span>,</span><br><span class="line"><span class="selector-class">.x-tab-strip</span> <span class="selector-tag">span</span><span class="selector-class">.x-tab-strip-text</span>,</span><br><span class="line"><span class="selector-class">.x-fieldset</span> <span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-class">.footerTextPanel</span> <span class="selector-class">.x-panel-body</span>,</span><br><span class="line"><span class="selector-class">.eventItem</span> <span class="selector-class">.txt</span> <span class="selector-class">.fn</span>,</span><br><span class="line"><span class="selector-class">.targetSelector</span> <span class="selector-tag">dt</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#DADCDC</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.x-tab-strip-active</span> <span class="selector-tag">span</span><span class="selector-class">.x-tab-strip-text</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.x-tree-node</span> <span class="selector-class">.x-tree-ec-icon</span>,</span><br><span class="line"><span class="selector-class">.x-tree-node-el</span> <span class="selector-class">.icons</span> <span class="selector-tag">i</span>,</span><br><span class="line"><span class="selector-class">.fa-folder</span>,</span><br><span class="line"><span class="selector-class">.x-tree-node-icon</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#807e7e</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.x-tree-selected</span> <span class="selector-class">.x-tree-node-icon</span>,</span><br><span class="line"><span class="selector-class">.x-tree-node-el</span><span class="selector-class">.x-tree-selected</span> <span class="selector-class">.icons</span> <span class="selector-tag">i</span>,</span><br><span class="line"><span class="selector-class">.x-tree-selected</span> <span class="selector-class">.x-tree-ec-icon</span>,</span><br><span class="line"><span class="selector-class">.tmbItemSel</span> <span class="selector-class">.icon</span> <span class="selector-tag">i</span>,</span><br><span class="line"><span class="selector-class">.tmbItemSel</span><span class="selector-class">.typeFolder</span> <span class="selector-class">.iconsHolder</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#DADCDC</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.fr-btn-link</span>,</span><br><span class="line"><span class="selector-class">.fr-details-fields</span> <span class="selector-class">.field</span><span class="selector-class">.title</span> <span class="selector-class">.value</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.fr-details-fields</span> <span class="selector-class">.field</span><span class="selector-class">.title</span> <span class="selector-class">.editIcon</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">i</span>,</span><br><span class="line"><span class="selector-class">.x-superboxselect-btns</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.x-superboxselect-locked</span> <span class="selector-class">.x-superboxselect-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#3FA9F2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tmbItemSel</span> <span class="selector-class">.tmbInner</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tmbItem</span> <span class="selector-class">.selOverlay</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#262626</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tmbItemSel</span> <span class="selector-class">.tmbInner</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tmbItem</span><span class="selector-class">.typeFolder</span> <span class="selector-class">.iconsHolder</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.x-tree-node</span> <span class="selector-class">.x-tree-selected</span>,</span><br><span class="line"><span class="selector-class">.tmbItemSel</span><span class="selector-class">.typeFolder</span>,</span><br><span class="line"><span class="selector-id">#FR-Grid-Panel</span> <span class="selector-class">.photoMode</span> <span class="selector-class">.tmbItemSel</span>,</span><br><span class="line"><span class="selector-class">.x-grid3-row-selected</span>,</span><br><span class="line"><span class="selector-class">.x-progress-inner</span>,</span><br><span class="line"><span class="selector-class">.ux-progress-cell-background</span>,</span><br><span class="line"><span class="selector-class">.tmbItem</span> <span class="selector-class">.selOverlay</span>,</span><br><span class="line"><span class="selector-class">.tmbItemSel</span> <span class="selector-class">.tmbInner</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#2d61b7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.x-tree-node</span> <span class="selector-class">.x-tree-selected</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.x-grid3-row-selected</span>,</span><br><span class="line"><span class="selector-class">.tmbItemSel</span> <span class="selector-class">.name</span>,</span><br><span class="line"><span class="selector-class">.fr-info-panel</span> <span class="selector-class">.x-tab-strip-active</span> <span class="selector-class">.fa</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.x-tab-strip-bottom</span> <span class="selector-class">.x-tab-strip-active</span> <span class="selector-class">.x-tab-right</span>,</span><br><span class="line"><span class="selector-class">.x-tab-strip-top</span> <span class="selector-class">.x-tab-strip-active</span> <span class="selector-class">.x-tab-right</span> &#123;</span><br><span class="line"><span class="attribute">border-color</span>: <span class="number">#2d61b7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tmbItemSel</span> <span class="selector-class">.tmbInner</span>,</span><br><span class="line"><span class="selector-class">.tmbItemSel</span><span class="selector-class">.typeFolder</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#FR-Grid-Panel</span> <span class="selector-class">.photoMode</span> <span class="selector-class">.tmbItemSel</span> &#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#262626</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tmbItem</span><span class="selector-class">.typeFolder</span><span class="selector-class">.dragged-over</span>,</span><br><span class="line"><span class="selector-class">.x-tree-node</span> <span class="selector-class">.x-tree-drag-append</span>,</span><br><span class="line"><span class="selector-class">.dragged-over</span> &#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#2d61b7</span> <span class="meta">!important</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#262626</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tmbItemSel</span> <span class="selector-class">.selOverlay</span> &#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#explorer-shadow</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.iconsHolder</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#262626</span>26;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#FR-Center-Region</span>,</span><br><span class="line"><span class="selector-id">#FR-Info-Region</span> &#123;</span><br><span class="line"><span class="attribute">border-left</span>:<span class="number">1px</span> solid <span class="number">#262626</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.x-window</span><span class="selector-class">.login</span> &#123;</span><br><span class="line"><span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login</span><span class="selector-class">.transparent</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login</span><span class="selector-class">.transparent</span> <span class="selector-class">.x-panel-footer</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>:transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login</span><span class="selector-class">.transparent</span> <span class="selector-id">#loginText</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">background-color: dimgray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#FR-AudioPlayer</span> <span class="selector-class">.x-panel-body</span> &#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: none;</span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#262626</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Control Panel */</span></span><br><span class="line"><span class="selector-id">#FR-Tree-Region-xsplit</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#404040</span>;</span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#262626</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#cardDisplayArea</span> &#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sysConfMenuItem</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#262626</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#gridTab</span> <span class="selector-class">.x-panel-bbar</span>,</span><br><span class="line"><span class="selector-id">#gridTab</span> <span class="selector-class">.x-panel-tbar</span> &#123;</span><br><span class="line"><span class="attribute">border-color</span>: <span class="number">#262626</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> filerun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh自动登陆的实现</title>
      <link href="/2021/8/ssh%E8%87%AA%E5%8A%A8%E7%99%BB%E9%99%86%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/8/ssh%E8%87%AA%E5%8A%A8%E7%99%BB%E9%99%86%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux系统shell脚本实现："><a href="#Linux系统shell脚本实现：" class="headerlink" title="Linux系统shell脚本实现："></a>Linux系统shell脚本实现：</h2><p><a href="https://www.cnblogs.com/zhenbianshu/p/5867440.html">https://www.cnblogs.com/zhenbianshu/p/5867440.html</a></p><h3 id="需要先安装expect"><a href="#需要先安装expect" class="headerlink" title="需要先安装expect"></a>需要先安装expect</h3><p><a href="https://blog.csdn.net/wangtaoking1/article/details/78268574">https://blog.csdn.net/wangtaoking1/article/details/78268574</a></p><h2 id="Python脚本实现："><a href="#Python脚本实现：" class="headerlink" title="Python脚本实现："></a>Python脚本实现：</h2><p><a href="https://mp.weixin.qq.com/s/vwmAa3kDc1zYdyTE18aA5w">https://mp.weixin.qq.com/s/vwmAa3kDc1zYdyTE18aA5w</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh防爆破</title>
      <link href="/2021/8/ssh%E9%98%B2%E7%88%86%E7%A0%B4/"/>
      <url>/2021/8/ssh%E9%98%B2%E7%88%86%E7%A0%B4/</url>
      
        <content type="html"><![CDATA[<p>来源：<a href="https://github.com/FunctionClub/Fail2ban">https://github.com/FunctionClub/Fail2ban</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Fail2ban会通过检查日志来匹配错误信息，从而使用iptables来防止暴力破解。理论上只要是能够在服务器本地输出错误日志和访问日志的程序都可以使用Fail2ban来保驾护航。</p><h2 id="脚本介绍"><a href="#脚本介绍" class="headerlink" title="脚本介绍"></a>脚本介绍</h2><p>一键安装部署Fail2ban，自动配置防SSH爆破。可自定义ip封禁时间，最高重试次数。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/FunctionClub/Fail2ban/master/fail2ban.sh &amp;&amp; bash fail2ban.sh 2&gt;&amp;1 | tee fail2ban.log</span><br></pre></td></tr></table></figure><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/FunctionClub/Fail2ban/master/uninstall.sh &amp;&amp; bash uninstall.sh</span><br></pre></td></tr></table></figure><h2 id="脚本运行截图"><a href="#脚本运行截图" class="headerlink" title="脚本运行截图"></a>脚本运行截图</h2><img src="2699326682-162893297153527.png" />]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typecho博客收集</title>
      <link href="/2021/8/typecho%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86/"/>
      <url>/2021/8/typecho%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p><a href="https://savokiss.com/">https://savokiss.com/</a><br><a href="https://www.zmki.cn/5366.html#webstackxz">https://www.zmki.cn/5366.html?#webstackxz</a> webstackmod作者<br><a href="http://viggoz.com/">http://viggoz.com/</a> webstack作者</p><h2 id="typecho框架博客"><a href="#typecho框架博客" class="headerlink" title="typecho框架博客"></a>typecho框架博客</h2><p><a href="https://www.qian.blue/archives/SanQianZhiTu-random_img.html">https://www.qian.blue/archives/SanQianZhiTu-random_img.html</a><br>上面博客使用的主题（<code>Typecho-Cuteen</code>–58元）来源：<br><a href="https://blog.zwying.com/archives/39.html">https://blog.zwying.com/archives/39.html</a></p><p>漂亮主題<br><a href="https://couqiao.net/">https://couqiao.net/</a><br>handsome主题元88元<br><a href="https://www.ihewro.com/archives/489/">https://www.ihewro.com/archives/489/</a><br>handsome主題老版本地址：<br><a href="https://github.com/hsce/typecho-theme-handsome">https://github.com/hsce/typecho-theme-handsome</a></p><p>Typecho 开发者：关于最近的 Typecho 安全漏洞<br><a href="https://paper.seebug.org/428/">https://paper.seebug.org/428/</a></p><p>Jekyll 框架<br>深綠色主題，養眼<br><a href="https://blog.kelu.org/tech/2019/01/22/build-your-own-webdav.html">https://blog.kelu.org/tech/2019/01/22/build-your-own-webdav.html</a></p>]]></content>
      
      
      <categories>
          
          <category> typecho </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typecho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于堡垒机</title>
      <link href="/2021/8/%E5%85%B3%E4%BA%8E%E5%A0%A1%E5%9E%92%E6%9C%BA/"/>
      <url>/2021/8/%E5%85%B3%E4%BA%8E%E5%A0%A1%E5%9E%92%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>来源：<a href="https://github.com/perfectstorm88/bblog/issues/5#%E5%85%B3%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E8%B6%8B%E5%8A%BF%E7%9C%8B%E6%B3%95">https://github.com/perfectstorm88/bblog/issues/5#关于未来的趋势看法</a></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li><a href="https://github.com/perfectstorm88/bblog/issues/5#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="https://github.com/perfectstorm88/bblog/issues/5#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83">开发环境</a></li><li><a href="https://github.com/perfectstorm88/bblog/issues/5#%E5%A0%A1%E5%9E%92%E6%9C%BA">堡垒机</a></li><li><a href="https://github.com/perfectstorm88/bblog/issues/5#vpn">VPN</a></li><li><a href="https://github.com/perfectstorm88/bblog/issues/5#%E4%BA%91%E5%A0%A1%E5%9E%92%E6%9C%BA">云堡垒机</a></li><li><a href="https://github.com/perfectstorm88/bblog/issues/5#%E5%85%B3%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E8%B6%8B%E5%8A%BF%E7%9C%8B%E6%B3%95">关于未来的趋势看法：</a></li><li><a href="https://github.com/perfectstorm88/bblog/issues/5#%E5%8F%82%E8%80%83">参考</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>医院、政府类项目中对安全的合规要求比较高，会把网络整得很复杂，由此给项目实施相关人员带来诸多不便，令很多人头大得很。俗话说“难者不会、会者不难”，从原理上搞清楚，解决问题就只剩操作步骤了。</p><p>本文的尝试是用通俗的语言还原安全相关的网络原理，非专业网络工程师也能看懂，比如产品经理、前后端的开发人员、测试人员、项目经理等。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>先从我们最熟悉的开发环境说起，如下图所示：</p><img src="/2021/8/%E5%85%B3%E4%BA%8E%E5%A0%A1%E5%9E%92%E6%9C%BA/4124540583.png" class="" title="[dddd]"><p>在我们自己的开发环境，为了效率考虑，作为技术的开发运维都是直接访问数据库、后端服务器、web服务器，作为访问用户的产品经理、测试人员，也是直接访问web服务器提供的服务。</p><h2 id="堡垒机"><a href="#堡垒机" class="headerlink" title="堡垒机"></a>堡垒机</h2><p>对于一个要部署上线的系统，安全就变得很重要了，作为技术的开发运维不能再随意访问、操作数据库和服务器了。因此就引入了一个叫做堡垒机的东东，对数据库和服务器进行保护，如下图所示：</p><img src="/2021/8/%E5%85%B3%E4%BA%8E%E5%A0%A1%E5%9E%92%E6%9C%BA/2053743094.png" class=""><!-- <img src="/关于堡垒机/2053743094.png" alt="2021-04-30T08:16:55.png" style="zoom:80%;" /> --><p>堡垒机只能让你访问被授权的主机事先防范“事先防范、访问过程对你的行为进行监控事中控制事中控制、出了安全事故可以回看操作录像(事后溯源）。</p><p>堡垒机的原理也不复杂，网上有开源代码,见<a href="https://github.com/jumpserver/jumpserver">jumpserver</a>，感兴趣的也可以自己部署一套玩玩。有的堡垒机需要专门的客户端软件，有的可以直接通过浏览器访问，相信未来以浏览器作为访问方式的会越来越多。<br>使用堡垒机访问数据库和服务器有多种协议，比如ssh协议用来访问linux系统、DRP协议用来访问windows桌面。</p><p>别看现在堡垒机很常见，但是出现的历史却很短，也才十几年的时间；技术人员比较讨论堡垒机，因为每次通过堡垒机操作太麻烦，但是企业大客户和政府事业单位的领导非常喜欢这玩意，所以要适应这个东西，以后会更常见的。</p><h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><p>对于医院、政府类项目，生产环境都在封闭内网，之前都需要去企业现场才能干活，有个VPN之后，在家里就可以干活了。</p><p>尤其现在VPN客户端都挺好用，可以同时访问互联网和企业内网，只要网络够快、VPN服务器够好，在家里跟去企业现场没太大区别，所以技术人员还是很喜欢用VPN的。</p><p>现在很多情况下，运维/开发都不需要去客户驻场了，所以经常的应用场景如下所示：需要先连上VPN，再登陆堡垒机，然后才能通过堡垒机上的软件进行干活。</p><img src="/2021/8/%E5%85%B3%E4%BA%8E%E5%A0%A1%E5%9E%92%E6%9C%BA/2594537473.png" class=""><!-- <img src="/关于堡垒机/2594537473.png" alt="2021-04-30T08:17:06.png" style="zoom:80%;" /> --><p>原理如上图所示，但实际上我们在干活时还会碰到很多意外：<br>1、比如有的企业会对VPN进行限制，把VPN的访问权限限制在一个很小的区域，所以在内网能打开的网页通过VPN就不能打开了。<br>2、在这种情况下，也是有方法可以解决的，就是让网管给你开放一台经过授权的windows主机，然后通过这条线去打开网页：操作者-》VPN-》堡垒机-》windows主机-》打开网页。</p><h2 id="云堡垒机"><a href="#云堡垒机" class="headerlink" title="云堡垒机"></a>云堡垒机</h2><p>最近随着云计算越来越普及，医院、政府类项目很多都在上云，云堡垒机也应运而生，其使用场景如下图所示，不必在通过VPN，可以直接登录堡垒机使用。</p><img src="/2021/8/%E5%85%B3%E4%BA%8E%E5%A0%A1%E5%9E%92%E6%9C%BA/189612217.png" class=""><!-- <img src="/关于堡垒机/189612217.png" alt="2021-04-30T08:17:18.png" style="zoom:80%;" /> --><h2 id="关于未来的趋势看法："><a href="#关于未来的趋势看法：" class="headerlink" title="关于未来的趋势看法："></a>关于未来的趋势看法：</h2><ul><li>堡垒机会越来越多，甚至公司内部、团队内部的一些重要数据资产，也有采用堡垒机的方式进行保护</li><li>现在堡垒机的运维客户端很多还需要安装软件，以后会越来越多地采用浏览器方式直接访问，而且云堡垒机的场景会越来越多</li><li>VPN技术单一，也比较成熟了，现在还有不少乱七八糟的客户端，会越来越少的</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/przqaXcZtb6uqVpLHNB2mg">堡垒机哲学史</a><br><a href="https://www.zhihu.com/question/21036511">堡垒机是干什么的？</a><br><a href="https://help.aliyun.com/document_detail/61261.html">云堡垒机应用场景</a><br><a href="https://cshihong.github.io/2020/06/15/%E5%A0%A1%E5%9E%92%E6%9C%BA-%E8%BF%90%E7%BB%B4%E5%AE%A1%E8%AE%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%B8%8E%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F">堡垒机运维审计系统运维审计系统的基本原理与部署方式</a><br><a href="https://zhidao.baidu.com/question/1539157792717672267.html">VPN和防火墙有什么关系？</a><br><a href="https://zh.wizcase.com/blog/%E4%BB%80%E4%B9%88%E6%98%AFvpn%EF%BC%9F%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97/">什么是VPN以及VPN的工作原理是什么？新手指南（2020年）</a><br><a href="https://zhuanlan.zhihu.com/p/89278073">VPN保护企业内网安全？VPN了解一下</a><br><a href="https://svcministry.org/zh/dictionary/what-s-the-difference-between-a-business-vpn-and-a-personal-vpn/">商业VPN和个人VPN有什么区别？</a> :</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 堡垒机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装配置Filebrowser</title>
      <link href="/2021/8/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEFilebrowser/"/>
      <url>/2021/8/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEFilebrowser/</url>
      
        <content type="html"><![CDATA[<p>docker安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd \</span><br><span class="line">--name=filebrowser \ <span class="comment"># 镜像别名</span></span><br><span class="line">-v /:/srv \ <span class="comment"># filebrowser 管理的路径</span></span><br><span class="line">-v /etc/filebrowser/config.json:/etc/config.json \ <span class="comment"># filebrowser 配置</span></span><br><span class="line">-v /etc/filebrowser/database.db:/etc/database.db \ <span class="comment"># filebrowser 数据库</span></span><br><span class="line">-p 80:80 \ <span class="comment"># filebrowser 映射端口</span></span><br><span class="line">filebrowser/filebrowser</span><br></pre></td></tr></table></figure><p>一键安装脚本,下面的可以不用看了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://233blog.com/filebrowser.sh)</span><br></pre></td></tr></table></figure><p>另一个详细教程文章<br><a href="https://233blog.com/post/26/">https://233blog.com/post/26/</a></p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash</span><br></pre></td></tr></table></figure><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>生成初始化配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo filebrowser -d /etc/filebrowser/filebrowser.db config init</span><br></pre></td></tr></table></figure><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>修改配置文件（通过命令）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置监听地址</span></span><br><span class="line">sudo filebrowser -d /etc/filebrowser/filebrowser.db config <span class="built_in">set</span> --address 0.0.0.0  </span><br><span class="line"><span class="comment"># 设置监听端口</span></span><br><span class="line">sudo filebrowser -d /etc/filebrowser/filebrowser.db config <span class="built_in">set</span> --port 8088</span><br><span class="line"><span class="comment"># 设置语言环境</span></span><br><span class="line">sudo filebrowser -d /etc/filebrowser/filebrowser.db config <span class="built_in">set</span> --locale zh-cn</span><br><span class="line"><span class="comment"># 设置日志位置</span></span><br><span class="line">sudo filebrowser -d /etc/filebrowser/filebrowser.db config <span class="built_in">set</span> --<span class="built_in">log</span> /var/<span class="built_in">log</span>/filebrowser.log</span><br><span class="line"><span class="comment"># 添加一个用户,其中的root和password分别是用户名和密码，根据自己的需求更改。</span></span><br><span class="line">sudo filebrowser -d /etc/filebrowser/filebrowser.db users add root password --perm.admin</span><br></pre></td></tr></table></figure><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>打开8088端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8088/tcp --permanent</span><br><span class="line"><span class="comment"># 开放端口后要重启防火墙生效</span></span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><h2 id="第五步-前台运行"><a href="#第五步-前台运行" class="headerlink" title="第五步 前台运行"></a>第五步 前台运行</h2><p>启动file browser<br>配置修改好以后，就可以启动 File Browser 了，使用<code>-d</code>参数指定配置数据库路径，<code>-r</code>参数指定使用的目录。示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser/filebrowser.db -r /tmp/</span><br></pre></td></tr></table></figure><h2 id="第六步-后台运行"><a href="#第六步-后台运行" class="headerlink" title="第六步 后台运行"></a>第六步 后台运行</h2><p>File Browser 默认是前台运行，如何让它后台运行呢？</p><h3 id="第一种-nohup-大法："><a href="#第一种-nohup-大法：" class="headerlink" title="第一种 nohup 大法："></a>第一种 nohup 大法：</h3><p>运行：<code>nohup filebrowser -d /etc/filebrowser.db &gt;/dev/null 2&gt;&amp;1 &amp;</code></p><p>停止运行：<code>kill -9 $(pidof filebrowser)</code></p><p>开机启动：<code>sed -i &#39;/exit 0/i\nohup filebrowser -d \/etc\/filebrowser.db &gt;\/dev\/null 2&gt;&amp;1 &amp;&#39; /etc/rc.local</code></p><p>取消开机启动：<code>sed -i &#39;/nohup filebrowser -d \/etc\/filebrowser.db &gt;\/dev\/null 2&gt;&amp;1 &amp;/d&#39; /etc/rc.local</code></p><h3 id="第二种-systemd-大法（推荐）"><a href="#第二种-systemd-大法（推荐）" class="headerlink" title="第二种 systemd 大法（推荐）"></a>第二种 systemd 大法（<strong>推荐</strong>）</h3><p>编写service文件：<code>vi /etc/systemd/system/filebrowser.service</code></p><blockquote><p>参照：<a href="https://blog.csdn.net/ywd1992/article/details/93030495">https://blog.csdn.net/ywd1992/article/details/93030495</a></p></blockquote><p>ExecStart根据自己的实际目录修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=File Browser</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/filebrowser -d /etc/filebrowser/filebrowser.db</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start filebrowser</span><br><span class="line">systemctl <span class="built_in">enable</span> filebrowser</span><br></pre></td></tr></table></figure><p>停止运行：<code>systemctl stop filebrowser</code></p><p>开机启动：<code>systemctl enable filebrowser</code></p><p>取消开机启动：<code>systemctl disable filebrowser</code></p><p>查看运行状态：<code>systemctl status filebrowser</code></p><p>我推荐使用 systemd 的方法来后台运行，当然，前提是你所使用的操作系统支持 systemd。</p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>File Browser 2.0 起开始内建 HTTPS 支持，只需要配置 SSL 证书即可。</p><p>配置 SSL：<code>filebrowser -d /etc/filebrowser.db config set --cert example.com.crt --key example.com.key</code>，其中<code>example.com.crt</code>和<code>example.com.key</code>分别是 SSL 证书和**路径，根据自身情况进行更改。配置完 SSL 后，只可以使用 HTTPS 访问，不可以使用 HTTP。</p><p>取消 SSL：<code>filebrowser -d /etc/filebrowser.db config set --cert &quot;&quot; --key &quot;&quot;</code></p><p>当然，你也可以使用 Nginx 等 Web 服务器对 File Browser 进行反向代理，以达到 HTTPS 访问的目的。</p><p>还有就是使用 Caddy，这是一个开源、支持 HTTP/2 的 Web 服务器，它的一个显著特点就是默认启用 HTTPS 访问，会自己申请 SSL 证书，同时支持大量的插件，File Browser 就可以作为其插件运行。</p><p>参考：<br><a href="https://blog.csdn.net/Homewm/article/details/87931165">https://blog.csdn.net/Homewm/article/details/87931165</a><br><a href="https://www.pianshen.com/article/3979763347/">https://www.pianshen.com/article/3979763347/</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将CentOS、RHEL 7/8引导到紧急模式（Emergency mode）/恢复模式（Recovery mode）</title>
      <link href="/2021/8/%E5%B0%86CentOS%2078%E3%80%81RHEL%2078%E5%BC%95%E5%AF%BC%E5%88%B0%E7%B4%A7%E6%80%A5%E6%A8%A1%E5%BC%8F%E6%81%A2%E5%A4%8D%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2021/8/%E5%B0%86CentOS%2078%E3%80%81RHEL%2078%E5%BC%95%E5%AF%BC%E5%88%B0%E7%B4%A7%E6%80%A5%E6%A8%A1%E5%BC%8F%E6%81%A2%E5%A4%8D%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>作为Linux管理员，您可能需要对某些实例进行故障排除和修复引导问题，这通常是通过从Grub菜单将系统引导到紧急模式（Emergency mode）/恢复模式（Recovery mode）来实现的。在本文中，您将学习诊断问题并从紧急模式恢复系统。</p><p><strong>将CentOS、RHEL 7/8引导到紧急模式（Emergency mode）/恢复模式（Recovery mode）</strong></p><p>启动您的CentOS 7/8、RHEL 7/8 Linux机器，当出现引导加载程序菜单时，请按Enter键以外的任何键以中断倒计时：</p><p><img src="https://ywnz.com/uploads/allimg/20/1-20021R11Q55D.JPG" alt="将CentOS 7/8、RHEL 7/8引导到紧急模式/恢复模式的方法"></p><p>按e键编辑当前条目，以便我们可以修改默认的引导加载程序条目并登录到紧急模式：</p><p><img src="https://ywnz.com/uploads/allimg/20/1-20021R11R61R.JPG" alt="将CentOS 7/8、RHEL 7/8引导到紧急模式/恢复模式的方法"></p><p>现在，使用光标键导航到以linux开头的行，您需要将systemd.unit=emergency.target添加到行尾，如上图方框所示。</p><p>按Ctrl+x键以使用修改后的配置启动。</p><p>输入root密码登录到紧急模式（Emergency mode）：</p><p><img src="https://ywnz.com/uploads/allimg/20/1-20021R11Sa94.JPG" alt="将CentOS 7/8、RHEL 7/8引导到紧急模式/恢复模式的方法"></p><p>使用mount命令重新安装对/文件系统的读/写操作，这将使您能够编辑文件系统：</p><p># mount -o remount,rw /</p><p>参考：<a href="https://ywnz.com/linux/mount/">mount命令_Linux mount命令使用详解：用于加载文件系统到指定的加载点</a>。</p><p>这时，您应该能够从紧急模式中拯救出故障的系统。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> 恢复模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建验证码识别服务并与BurpSuite联动</title>
      <link href="/2021/8/%E6%90%AD%E5%BB%BA%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E6%9C%8D%E5%8A%A1%E5%B9%B6%E4%B8%8EBurpSuite%E8%81%94%E5%8A%A8/"/>
      <url>/2021/8/%E6%90%AD%E5%BB%BA%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E6%9C%8D%E5%8A%A1%E5%B9%B6%E4%B8%8EBurpSuite%E8%81%94%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h2><p><a href="https://www.ddosi.com/xp_captcha/">https://www.ddosi.com/xp_captcha/</a><br><a href="https://github.com/smxiazi/NEW_xp_CAPTCHA">https://github.com/smxiazi/NEW_xp_CAPTCHA</a></p><h1 id="xp-CAPTCHA白嫖版白嫖版"><a href="#xp-CAPTCHA白嫖版白嫖版" class="headerlink" title="xp_CAPTCHA白嫖版白嫖版"></a>xp_CAPTCHA白嫖版白嫖版</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>xp_CAPTCHA 白嫖版白嫖版</p><ul><li>验证码识别</li><li>burp插件</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要python3 小于3.7的版本</p><h3 id="安装-muggle-ocr-模块（大概400M左右）"><a href="#安装-muggle-ocr-模块（大概400M左右）" class="headerlink" title="安装 muggle_ocr 模块（大概400M左右）"></a>安装 <code>muggle_ocr</code> 模块（大概400M左右）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com muggle-ocr</span><br></pre></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/30351807/115872316-3f4b6780-a474-11eb-8f25-a2de13274510.png#vwid=1000&vhei=123"><img src="https://user-images.githubusercontent.com/30351807/115872316-3f4b6780-a474-11eb-8f25-a2de13274510.png#vwid=1000&vhei=123" alt="image"></a></p><h3 id="运行-server-py"><a href="#运行-server-py" class="headerlink" title="运行 server.py"></a>运行 server.py</h3><p>见文末</p><p><a href="https://user-images.githubusercontent.com/30351807/115872339-470b0c00-a474-11eb-8339-109b82f464eb.png#vwid=992&vhei=241"><img src="https://user-images.githubusercontent.com/30351807/115872339-470b0c00-a474-11eb-8339-109b82f464eb.png#vwid=992&vhei=241" alt="image"></a></p><p>等待显示出 Starting server, listen at: 0.0.0.0:8899 访问 <a href="http://127.0.0.1/">http://127.0.0.1</a>:8899/ 显示下面界面即为正常。</p><p><a href="https://user-images.githubusercontent.com/30351807/115872365-4ffbdd80-a474-11eb-8be6-cd4150242d66.png#vwid=903&vhei=205"><img src="https://user-images.githubusercontent.com/30351807/115872365-4ffbdd80-a474-11eb-8be6-cd4150242d66.png#vwid=903&vhei=205" alt="image"></a></p><p>linux 下安装可能会需要</p><p><a href="https://user-images.githubusercontent.com/30351807/115872401-58ecaf00-a474-11eb-9a1a-e933173585a7.png#vwid=645&vhei=241"><img src="https://user-images.githubusercontent.com/30351807/115872401-58ecaf00-a474-11eb-9a1a-e933173585a7.png#vwid=645&vhei=241" alt="image"></a></p><p>安装即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libglvnd-glx-1.0.1-0.8.git5baa1e5.el7.x86_64</span><br></pre></td></tr></table></figure><h2 id="验证码识别率"><a href="#验证码识别率" class="headerlink" title="验证码识别率"></a>验证码识别率</h2><p><a href="https://user-images.githubusercontent.com/30351807/115872436-61dd8080-a474-11eb-8971-02c7144ff91e.png#vwid=566&vhei=172"><img src="https://user-images.githubusercontent.com/30351807/115872436-61dd8080-a474-11eb-8971-02c7144ff91e.png#vwid=566&vhei=172" alt="image"></a></p><p><a href="https://user-images.githubusercontent.com/30351807/115872450-673acb00-a474-11eb-8865-a12383727615.png#vwid=380&vhei=117"><img src="https://user-images.githubusercontent.com/30351807/115872450-673acb00-a474-11eb-8865-a12383727615.png#vwid=380&vhei=117" alt="image"></a></p><p><a href="https://user-images.githubusercontent.com/30351807/115872463-6ace5200-a474-11eb-9a8e-a93de9ba0f47.png#vwid=300&vhei=131"><img src="https://user-images.githubusercontent.com/30351807/115872463-6ace5200-a474-11eb-9a8e-a93de9ba0f47.png#vwid=300&vhei=131" alt="image"></a></p><p><a href="https://user-images.githubusercontent.com/30351807/115872476-702b9c80-a474-11eb-9d48-cdf2e02348d0.png#vwid=339&vhei=117"><img src="https://user-images.githubusercontent.com/30351807/115872476-702b9c80-a474-11eb-9d48-cdf2e02348d0.png#vwid=339&vhei=117" alt="image"></a></p><p><a href="https://user-images.githubusercontent.com/30351807/115872496-73bf2380-a474-11eb-9d92-147c69e28452.png#vwid=321&vhei=122"><img src="https://user-images.githubusercontent.com/30351807/115872496-73bf2380-a474-11eb-9d92-147c69e28452.png#vwid=321&vhei=122" alt="image"></a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>把图片base64编码后POST发送至接口<a href="http://localhost/">http://localhost</a>:8899/base64 的base64参数即可，返回结果为识别的后的结果。</p><p><a href="https://user-images.githubusercontent.com/30351807/115872517-791c6e00-a474-11eb-89ad-307efa56d7f1.png#vwid=1002&vhei=607"><img src="https://user-images.githubusercontent.com/30351807/115872517-791c6e00-a474-11eb-89ad-307efa56d7f1.png#vwid=1002&vhei=607" alt="image"></a></p><p><a href="https://user-images.githubusercontent.com/30351807/115872532-7d488b80-a474-11eb-9886-74519894d224.png"><img src="https://user-images.githubusercontent.com/30351807/115872532-7d488b80-a474-11eb-9886-74519894d224.png" alt="image"></a></p><h2 id="burp联动识别验证码爆破"><a href="#burp联动识别验证码爆破" class="headerlink" title="burp联动识别验证码爆破"></a>burp联动识别验证码爆破</h2><p>如果 server.py 在服务器上跑的话，xp_CAPTCHA.py需要修改对应的IP。</p><p><a href="https://user-images.githubusercontent.com/30351807/115872564-85083000-a474-11eb-85b1-98523a93a60e.png"><img src="https://user-images.githubusercontent.com/30351807/115872564-85083000-a474-11eb-85b1-98523a93a60e.png" alt="image"></a></p><p>修改完后导入burp</p><p><a href="https://user-images.githubusercontent.com/30351807/115872601-918c8880-a474-11eb-9b43-6aa958a12172.png"><img src="https://user-images.githubusercontent.com/30351807/115872601-918c8880-a474-11eb-9b43-6aa958a12172.png" alt="image"></a></p><p><a href="https://user-images.githubusercontent.com/30351807/115872621-994c2d00-a474-11eb-8072-bbe22b2c8033.png"><img src="https://user-images.githubusercontent.com/30351807/115872621-994c2d00-a474-11eb-8072-bbe22b2c8033.png" alt="image"></a></p><p>Attack type处选择 Pitchfork,在http头部位置插入xiapao:验证码的URL地址</p><p><a href="https://user-images.githubusercontent.com/30351807/115872650-a10bd180-a474-11eb-9a34-b30a974d145d.png"><img src="https://user-images.githubusercontent.com/30351807/115872650-a10bd180-a474-11eb-9a34-b30a974d145d.png" alt="image"></a></p><p>此处导入字典</p><p><a href="https://user-images.githubusercontent.com/30351807/115872672-a79a4900-a474-11eb-818f-a3e0c47cfb21.png"><img src="https://user-images.githubusercontent.com/30351807/115872672-a79a4900-a474-11eb-818f-a3e0c47cfb21.png" alt="image"></a></p><p>选择验证码识别</p><p><a href="https://user-images.githubusercontent.com/30351807/115872696-ad902a00-a474-11eb-814e-305faaa20756.png"><img src="https://user-images.githubusercontent.com/30351807/115872696-ad902a00-a474-11eb-814e-305faaa20756.png" alt="image"></a></p><p><a href="https://user-images.githubusercontent.com/30351807/115872713-b1bc4780-a474-11eb-8e03-df7eab39885f.png"><img src="https://user-images.githubusercontent.com/30351807/115872713-b1bc4780-a474-11eb-8e03-df7eab39885f.png" alt="image"></a></p><p>然后把线程设置为1</p><p><a href="https://user-images.githubusercontent.com/30351807/115872728-b5e86500-a474-11eb-8d4f-32344006ee36.png"><img src="https://user-images.githubusercontent.com/30351807/115872728-b5e86500-a474-11eb-8d4f-32344006ee36.png" alt="image"></a></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="server-py"><a href="#server-py" class="headerlink" title="server.py"></a>server.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- conding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer, BaseHTTPRequestHandler</span><br><span class="line"><span class="keyword">import</span> muggle_ocr</span><br><span class="line"><span class="keyword">import</span> re,time,base64,os</span><br><span class="line"> </span><br><span class="line">host = (<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8899</span>)</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resquest</span>(<span class="params">BaseHTTPRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handler</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;data:&quot;</span>, self.rfile.readline().decode())</span><br><span class="line">        self.wfile.write(self.rfile.readline())</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.requestline)</span><br><span class="line">        <span class="keyword">if</span> self.path != <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            self.send_error(<span class="number">404</span>, <span class="string">&quot;Page not Found!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">        data = <span class="string">&#x27;&lt;title&gt;xp_CAPTCHA&lt;/title&gt;&lt;body style=&quot;text-align:center&quot;&gt;&lt;h1&gt;验证码识别：xp_CAPTCHA&lt;/h1&gt;&lt;a href=&quot;http://www.nmd5.com&quot;&gt;author:算命縖子&lt;/a&gt;&lt;/body&gt;&#x27;</span></span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line">        self.send_header(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;text/html; charset=UTF-8&#x27;</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        self.wfile.write(data.encode())</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_POST</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#print(self.headers)</span></span><br><span class="line">        <span class="comment">#print(self.command)</span></span><br><span class="line">        <span class="keyword">if</span> self.path != <span class="string">&#x27;/base64&#x27;</span>:</span><br><span class="line">            self.send_error(<span class="number">404</span>, <span class="string">&quot;Page not Found!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">        img_name = time.time()</span><br><span class="line">        req_datas = self.rfile.read(<span class="built_in">int</span>(self.headers[<span class="string">&#x27;content-length&#x27;</span>]))</span><br><span class="line">        req_datas = req_datas.decode()</span><br><span class="line">        base64_img = re.search(<span class="string">&#x27;base64=(.*?)$&#x27;</span>,req_datas)</span><br><span class="line">        <span class="comment">#print(base64_img.group(1)) #post base64参数的内容</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;temp/%s.png&quot;</span>%img_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(base64.b64decode(base64_img.group(<span class="number">1</span>)))</span><br><span class="line">            f.close()</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#验证码识别</span></span><br><span class="line">        sdk = muggle_ocr.SDK(model_type=muggle_ocr.ModelType.Captcha)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;temp/%s.png&quot;</span>%img_name, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            b = f.read()</span><br><span class="line">        text = sdk.predict(image_bytes=b)</span><br><span class="line">        <span class="built_in">print</span>(text) <span class="comment">#识别的结果</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">#删除掉图片文件，以防占用太大的内存</span></span><br><span class="line">        os.remove(<span class="string">&quot;temp/%s.png&quot;</span>%img_name)</span><br><span class="line"> </span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line">        self.send_header(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        self.wfile.write(text.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    os.makedirs(<span class="string">&#x27;temp&#x27;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    server = HTTPServer(host, Resquest)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Starting server, listen at: %s:%s&quot;</span> % host)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><h3 id="xp-CAPTCHA-py"><a href="#xp-CAPTCHA-py" class="headerlink" title="xp_CAPTCHA.py"></a>xp_CAPTCHA.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:gbk</span></span><br><span class="line"><span class="keyword">from</span> burp <span class="keyword">import</span> IBurpExtender</span><br><span class="line"><span class="keyword">from</span> burp <span class="keyword">import</span> IIntruderPayloadGeneratorFactory</span><br><span class="line"><span class="keyword">from</span> burp <span class="keyword">import</span> IIntruderPayloadGenerator</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"> </span><br><span class="line">host = (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8899</span>)</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BurpExtender</span>(<span class="params">IBurpExtender, IIntruderPayloadGeneratorFactory</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">registerExtenderCallbacks</span>(<span class="params">self, callbacks</span>):</span></span><br><span class="line">        <span class="comment">#注册payload生成器</span></span><br><span class="line">        callbacks.registerIntruderPayloadGeneratorFactory(self)</span><br><span class="line">        <span class="comment">#插件里面显示的名字</span></span><br><span class="line">        callbacks.setExtensionName(<span class="string">&quot;xp_CAPTCHA&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;xp_CAPTCHA  中文名:瞎跑验证码\nblog：http://www.nmd5.com/\nT00ls：https://www.t00ls.net/ \nThe loner安全团队 author:算命縖子\n\n用法：\n在head头部添加xiapao:验证码的URL\n\n如：\n\nPOST /login HTTP/1.1\nHost: www.baidu.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0\nAccept: text/plain, */*; q=0.01\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-Requested-With: XMLHttpRequest\nxiapao:http://www.baidu.com/get-validate-code\nContent-Length: 84\nConnection: close\nCookie: JSESSIONID=24D59677C5EDF0ED7AFAB8566DC366F0\n\nusername=admin&amp;password=admin&amp;vcode=8888\n\n&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getGeneratorName</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;xp_CAPTCHA&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createNewInstance</span>(<span class="params">self, attack</span>):</span></span><br><span class="line">        <span class="keyword">return</span> xp_CAPTCHA(attack)</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xp_CAPTCHA</span>(<span class="params">IIntruderPayloadGenerator</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, attack</span>):</span></span><br><span class="line">        tem = <span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(<span class="built_in">abs</span>(x)) <span class="keyword">for</span> x <span class="keyword">in</span> attack.getRequestTemplate()) <span class="comment">#request内容</span></span><br><span class="line">        cookie = re.findall(<span class="string">&quot;Cookie: (.+?)\r\n&quot;</span>, tem)[<span class="number">0</span>] <span class="comment">#获取cookie</span></span><br><span class="line">        xp_CAPTCHA = re.findall(<span class="string">&quot;xiapao:(.+?)\r\n&quot;</span>, tem)[<span class="number">0</span>]</span><br><span class="line">        ssl._create_default_https_context = ssl._create_unverified_context <span class="comment">#忽略证书，防止证书报错</span></span><br><span class="line">        <span class="built_in">print</span> xp_CAPTCHA+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;cookie:&#x27;</span> + cookie+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        self.xp_CAPTCHA = xp_CAPTCHA</span><br><span class="line">        self.cookie = cookie</span><br><span class="line">        self.<span class="built_in">max</span> = <span class="number">1</span> <span class="comment">#payload最大使用次数</span></span><br><span class="line">        self.num = <span class="number">0</span> <span class="comment">#标记payload的使用次数</span></span><br><span class="line">        self.attack = attack</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasMorePayloads</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#如果payload使用到了最大次数reset就清0</span></span><br><span class="line">        <span class="keyword">if</span> self.num == self.<span class="built_in">max</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 当达到最大次数的时候就调用reset</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNextPayload</span>(<span class="params">self, payload</span>):</span>  <span class="comment"># 这个函数请看下文解释</span></span><br><span class="line">        xp_CAPTCHA_url = self.xp_CAPTCHA <span class="comment">#验证码url</span></span><br><span class="line"> </span><br><span class="line">        <span class="built_in">print</span> xp_CAPTCHA_url</span><br><span class="line">        headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36&quot;</span>,<span class="string">&quot;Cookie&quot;</span>:self.cookie&#125;</span><br><span class="line">        request = urllib2.Request(xp_CAPTCHA_url,headers=headers)</span><br><span class="line">        CAPTCHA = urllib2.urlopen(request) <span class="comment">#获取图片</span></span><br><span class="line">        CAPTCHA_base64 = base64.b64encode(CAPTCHA.read()) <span class="comment">#把图片base64编码</span></span><br><span class="line"> </span><br><span class="line">        request = urllib2.Request(<span class="string">&#x27;http://%s:%s/base64&#x27;</span>%host, <span class="string">&#x27;base64=&#x27;</span>+CAPTCHA_base64)</span><br><span class="line">        response = urllib2.urlopen(request).read()</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.num = <span class="number">0</span>  <span class="comment"># 清零</span></span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> burpsuite </tag>
            
            <tag> 验证码识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务在“内网”，nginx记录用户源IP和源端口</title>
      <link href="/2021/8/%E6%9C%8D%E5%8A%A1%E5%9C%A8%E2%80%9C%E5%86%85%E7%BD%91%E2%80%9D%EF%BC%8Cnginx%E8%AE%B0%E5%BD%95%E7%94%A8%E6%88%B7%E6%BA%90IP%E5%92%8C%E6%BA%90%E7%AB%AF%E5%8F%A3/"/>
      <url>/2021/8/%E6%9C%8D%E5%8A%A1%E5%9C%A8%E2%80%9C%E5%86%85%E7%BD%91%E2%80%9D%EF%BC%8Cnginx%E8%AE%B0%E5%BD%95%E7%94%A8%E6%88%B7%E6%BA%90IP%E5%92%8C%E6%BA%90%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>转载自<a href="https://www.cnblogs.com/linuxk/p/12033796.html">https://www.cnblogs.com/linuxk/p/12033796.html</a></p><h1 id="服务器架构前面加了防火墙，Nginx如何获取客户端真实ip？？？"><a href="#服务器架构前面加了防火墙，Nginx如何获取客户端真实ip？？？" class="headerlink" title="服务器架构前面加了防火墙，Nginx如何获取客户端真实ip？？？"></a>服务器架构前面加了防火墙，Nginx如何获取客户端真实ip？？？</h1><p>在大部分实际业务场景中，网站访问请求并不是简单地从用户（访问者）的浏览器直达网站的源站服务器，中间可能经过所部署的CDN、高防IP、WAF等代理服务器。例如，网站可能采用这样的部署架构：用户 &gt; CDN/高防IP/WAF &gt; 源站服务器。这种情况下，访问请求在经过多层加速或代理转发后，源站服务器该如何获取发起请求的真实客户端IP？</p><p>一般情况下，透明的代理服务器在将用户的访问请求转发到下一环节的服务器时，会在HTTP的请求头中添加一条X-Forwarded-For记录，用于记录用户的真实IP，其记录格式为X-Forwarded-For:用户IP。如果期间经历多个代理服务器，则X-Forwarded-For将以该格式记录用户真实IP和所经过的代理服务器IP：X-Forwarded-For:用户IP, 代理服务器1-IP, 代理服务器2-IP, 代理服务器3-IP, ……。</p><p>因此，常见的Web应用服务器可以使用X-Forwarded-For的方式获取访问者真实IP。</p><p><strong>Nginx配置方案</strong></p><ul><li>1、确认nginx安装时已经安装http_realip_module模块</li></ul><p>为实现负载均衡，Nginx使用http_realip_module模块来获取真实IP。<code># nginx -V | grep http_realip_module</code>命令查看是否已安装该模块。如未安装，则需要重新编译Nginx服务并加装该模块。方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.14.2.tar.gz</span><br><span class="line">tar zxvf nginx-1.14.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.14.2</span><br><span class="line">./configure --user=www --group=www --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module --without-http-cache --with-http_ssl_module --with-http_realip_module</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="built_in">kill</span> -USR2 `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span><br><span class="line"><span class="built_in">kill</span> -QUIT `cat /usr/<span class="built_in">local</span>/nginx/logs/ nginx.pid.oldbin`</span><br></pre></td></tr></table></figure><ul><li>2、修改Nginx对应server的配置</li></ul><p>打开<a href="http://www.conf配置文件,在location/">www.conf配置文件，在location</a> / {} 中加入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set_real_ip_from ip_range1;    <span class="comment">#真实服务器上一级代理的IP地址或者IP段,可以写多行</span></span><br><span class="line">set_real_ip_from ip_range2;</span><br><span class="line">...</span><br><span class="line">set_real_ip_from ip_rangex;</span><br><span class="line">real_ip_header    X-Forwarded-For;    <span class="comment">#从哪个header头检索出需要的IP地址</span></span><br><span class="line">real_ip_recursive on;    <span class="comment">#递归排除set_real_ip_from里面出现的IP,其余没有出现的认为是用户真实IP</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong> 其中，ip_range1，2，…，x 指WAF的回源IP地址，需要分多条分别添加。</p><p>如何获取WAF的回源IP地址？？？</p><p>打开WAF界面–&gt;设置–&gt;产品信息–&gt;即可查看到回源IP段，将这里的IP段按照上面的方式写进nginx配置当中即可，查看nginx访问日志就是客户端真实ip了。不过要说的是阿里的回源IP段真多，用notepad++处理好配置再写上去更方便！</p><ul><li>3、修改日志记录格式</li></ul><p>log_format一般在nginx.conf配置文件中的http配置部分。在log_format中，添加x-forwarded-for字段，替换原来remote-address字段，即将log_format修改为以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  <span class="string">&#x27;$http_x_forwarded_for - $remote_user [$time_local] &quot;$request&quot; &#x27;</span> <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span> <span class="string">&#x27;&quot;$http_user_agent&quot; &#x27;</span>;</span><br></pre></td></tr></table></figure><p>Don’t forget the beginner’s mind</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS镜像快照迁移到虚拟机</title>
      <link href="/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://mefj.com.cn/lur2853.html">https://mefj.com.cn/lur2853.html</a></li></ul><h3 id="找到ECS实例创建快照"><a href="#找到ECS实例创建快照" class="headerlink" title="找到ECS实例创建快照"></a>找到ECS实例创建快照</h3><img src="/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/image-1.png" class=""><!-- <img src="/阿里云ECS镜像快照迁移到虚拟机/image-1.png" alt="阿里云ECS镜像快照迁移到虚拟机" style="zoom:60%;" /> --><img src="/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/image-2.png" class=""><!-- <img src="/阿里云ECS镜像快照迁移到虚拟机/image-2.png" alt="阿里云ECS镜像快照迁移到虚拟机" style="zoom:60%;" /> --><h3 id="等待镜像创建100"><a href="#等待镜像创建100" class="headerlink" title="等待镜像创建100%"></a>等待镜像创建100%</h3><img src="/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/image-3.png" class=""><!-- <img src="/阿里云ECS镜像快照迁移到虚拟机/image-3.png" alt="阿里云ECS镜像快照迁移到虚拟机" style="zoom:60%;" /> --><img src="/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/image-4.png" class=""><!-- <img src="/阿里云ECS镜像快照迁移到虚拟机/image-4.png" alt="阿里云ECS镜像快照迁移到虚拟机" style="zoom:60%;" /> --><h3 id="导出到阿里云OSS存储。阿里云镜像不可以直接下载到本地，只能通过OSS下载到本地"><a href="#导出到阿里云OSS存储。阿里云镜像不可以直接下载到本地，只能通过OSS下载到本地" class="headerlink" title="导出到阿里云OSS存储。阿里云镜像不可以直接下载到本地，只能通过OSS下载到本地"></a>导出到阿里云OSS存储。阿里云镜像不可以直接下载到本地，只能通过OSS下载到本地</h3><img src="/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/image-5.png" class=""><!-- <img src="/阿里云ECS镜像快照迁移到虚拟机/image-5.png" alt="阿里云ECS镜像快照迁移到虚拟机" style="zoom:60%;" /> --><img src="/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/image-6.png" class=""><!-- <img src="/阿里云ECS镜像快照迁移到虚拟机/image-6.png" alt="阿里云ECS镜像快照迁移到虚拟机" style="zoom:60%;" /> --><img src="/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/image-7.png" class=""><!-- <img src="/阿里云ECS镜像快照迁移到虚拟机/image-7.png" alt="阿里云ECS镜像快照迁移到虚拟机" style="zoom:60%;" /> --><img src="/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/image-8.png" class=""><!-- <img src="/阿里云ECS镜像快照迁移到虚拟机/image-8.png" alt="阿里云ECS镜像快照迁移到虚拟机" style="zoom:60%;" /> --> --><h3 id="下载到本地，OSS流量比较贵，建议没有特殊情况不要随意使用，我这里镜像下载了10个多GB，费用在五六块钱"><a href="#下载到本地，OSS流量比较贵，建议没有特殊情况不要随意使用，我这里镜像下载了10个多GB，费用在五六块钱" class="headerlink" title="下载到本地，OSS流量比较贵，建议没有特殊情况不要随意使用，我这里镜像下载了10个多GB，费用在五六块钱"></a>下载到本地，OSS流量比较贵，建议没有特殊情况不要随意使用，我这里镜像下载了10个多GB，费用在五六块钱</h3><img src="/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/image-9.png" class=""><!-- <img src="/阿里云ECS镜像快照迁移到虚拟机/image-9.png" alt="阿里云ECS镜像快照迁移到虚拟机" style="zoom:60%;" /> --><h3 id="本地找到下载镜像文件格式为-raw-tar-gz-的文件，解压到本地"><a href="#本地找到下载镜像文件格式为-raw-tar-gz-的文件，解压到本地" class="headerlink" title="本地找到下载镜像文件格式为**.raw.tar.gz**的文件，解压到本地"></a>本地找到下载镜像文件格式为**.raw.tar.gz**的文件，解压到本地</h3><img src="/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/image-10.png" class=""><!-- <img src="/阿里云ECS镜像快照迁移到虚拟机/image-10.png" alt="阿里云ECS镜像快照迁移到虚拟机" style="zoom:80%;" /> --><h3 id="使用qemu工具将raw格式转换成VMware可以使用的vmdk格式"><a href="#使用qemu工具将raw格式转换成VMware可以使用的vmdk格式" class="headerlink" title="使用qemu工具将raw格式转换成VMware可以使用的vmdk格式"></a>使用<a href="https://mefj.com.cn/wp-content/themes/begin-lts-1/inc/go.php?url=https://share.mefj.com.cn/%E8%A3%85%E6%9C%BA%E6%96%87%E4%BB%B6/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/qemu-img-win-x64-2_3_0.zip">qemu</a>工具将raw格式转换成VMware可以使用的vmdk格式</h3><img src="/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/image-11.png" class=""><!-- <img src="/阿里云ECS镜像快照迁移到虚拟机/image-11.png" alt="阿里云ECS镜像快照迁移到虚拟机" style="zoom:80%;" /> --><img src="/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/image-12.png" class=""><!-- <img src="/阿里云ECS镜像快照迁移到虚拟机/image-12.png" alt="阿里云ECS镜像快照迁移到虚拟机" style="zoom:80%;" /> --><p>注：raw为最原始的虚拟机镜像文件，vmdk是vmware的虚拟机镜像文件，如果要查看raw文件中的内容可以先把raw文件转换为vmdk文件，然后再用vmware虚拟机打开vmdk文件。</p><h3 id="创建虚拟机，选择现有磁盘（这步很重要）"><a href="#创建虚拟机，选择现有磁盘（这步很重要）" class="headerlink" title="创建虚拟机，选择现有磁盘（这步很重要）"></a>创建虚拟机，选择现有磁盘（这步很重要）</h3><img src="/2021/8/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%95%9C%E5%83%8F%E5%BF%AB%E7%85%A7%E8%BF%81%E7%A7%BB%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA/image-13.png" class=""><!-- <img src="/阿里云ECS镜像快照迁移到虚拟机/image-13.png" alt="阿里云ECS镜像快照迁移到虚拟机" style="zoom:80%;" /> --><h3 id="启动创建的虚拟机即可"><a href="#启动创建的虚拟机即可" class="headerlink" title="启动创建的虚拟机即可"></a>启动创建的虚拟机即可</h3>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECS </tag>
            
            <tag> VMWARE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线nginx配置生成工具和nginx配置UI管理工具</title>
      <link href="/2021/8/%E5%9C%A8%E7%BA%BFnginx%E9%85%8D%E7%BD%AE%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E5%92%8Cnginx%E9%85%8D%E7%BD%AEUI%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2021/8/%E5%9C%A8%E7%BA%BFnginx%E9%85%8D%E7%BD%AE%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E5%92%8Cnginx%E9%85%8D%E7%BD%AEUI%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="一、在线配置生成工具"><a href="#一、在线配置生成工具" class="headerlink" title="一、在线配置生成工具"></a>一、在线配置生成工具</h2><p><a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN">https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN</a></p><h2 id="二、nginx配置webUI管理工具"><a href="#二、nginx配置webUI管理工具" class="headerlink" title="二、nginx配置webUI管理工具"></a>二、nginx配置webUI管理工具</h2><blockquote><p>均为docker容器部署</p></blockquote><h3 id="nginx-proxy-manager"><a href="#nginx-proxy-manager" class="headerlink" title="nginx proxy manager"></a>nginx proxy manager</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>可容器化部署，轻量化（两个容器占用共71M+45M内存）、无汉化</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>谈不上缺点的缺点—-两个容器<br><a href="https://nginxproxymanager.com/">https://nginxproxymanager.com/</a><br>部署：<br>新建docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">NginxProxyManager-WEB</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;jc21/nginx-proxy-manager:latest&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;81:81&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">DB_MYSQL_HOST:</span> <span class="string">&quot;db&quot;</span></span><br><span class="line">      <span class="attr">DB_MYSQL_PORT:</span> <span class="number">3306</span></span><br><span class="line">      <span class="attr">DB_MYSQL_USER:</span> <span class="string">&quot;npm&quot;</span></span><br><span class="line">      <span class="attr">DB_MYSQL_PASSWORD:</span> <span class="string">&quot;npm&quot;</span></span><br><span class="line">      <span class="attr">DB_MYSQL_NAME:</span> <span class="string">&quot;npm&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp/NginxProxyManager/data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp/NginxProxyManager/letsencrypt:/etc/letsencrypt</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">NginxProxyManager-DB</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;jc21/mariadb-aria:latest&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">&#x27;npm&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">&#x27;npm&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">&#x27;npm&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">&#x27;npm&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp/NginxProxyManager/mysql:/var/lib/mysql</span></span><br></pre></td></tr></table></figure><p>然后在上述文件目录下执行：<code>docker-compose up -d</code></p><p>如果已有数据库，则运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name=NginxProxyManager-WEB \</span><br><span class="line">--restart=unless-stopped \</span><br><span class="line">--link=db \</span><br><span class="line">-e DB_MYSQL_HOST: <span class="string">&quot;db&quot;</span> \</span><br><span class="line">-e DB_MYSQL_PORT: 3306 \</span><br><span class="line">-e DB_MYSQL_USER: <span class="string">&quot;npm&quot;</span> \</span><br><span class="line">-e DB_MYSQL_PASSWORD: <span class="string">&quot;npm&quot;</span> \</span><br><span class="line">-e DB_MYSQL_NAME: <span class="string">&quot;npm&quot;</span> \</span><br><span class="line">-v /tmp/NginxProxyManager/data:/data \</span><br><span class="line">-v /tmp/NginxProxyManager/letsencrypt:/etc/letsencrypt \</span><br><span class="line">jc21/nginx-proxy-manager:latest</span><br></pre></td></tr></table></figure><h3 id="nginx-webui"><a href="#nginx-webui" class="headerlink" title="nginx webui"></a>nginx webui</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>国人使用JAVA开发的，语言友善，只有一个容器，便于管理</p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>占用资源很大（同样环境中该容器占用205M内存）<br><a href="http://www.nginxwebui.cn/">http://www.nginxwebui.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何给已经运行的容器添加映射路径</title>
      <link href="/2021/8/%E5%A6%82%E4%BD%95%E7%BB%99%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E7%9A%84%E5%AE%B9%E5%99%A8%E6%B7%BB%E5%8A%A0%E6%98%A0%E5%B0%84%E8%B7%AF%E5%BE%84/"/>
      <url>/2021/8/%E5%A6%82%E4%BD%95%E7%BB%99%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E7%9A%84%E5%AE%B9%E5%99%A8%E6%B7%BB%E5%8A%A0%E6%98%A0%E5%B0%84%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p>类似地，貌似通过修改容器配置文件，可以实现端口映射等其他最初运行容器时未设置的参数。<br>端口映射的修改请看：<a href="http://www.sirliu.top:8000/Docker/30.html">如何给已运行容器修改 / 添加端口映射</a></p><h2 id="方法一-通过修改已有容器配置文件实现"><a href="#方法一-通过修改已有容器配置文件实现" class="headerlink" title="方法一 通过修改已有容器配置文件实现"></a>方法一 通过修改已有容器配置文件实现</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>如果要操作的容器在运行，停掉正在运行的容器</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>获取容器所使用的镜像<code>ID</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名称|grep Id</span><br></pre></td></tr></table></figure><p>镜像ID形如：<code>bde9b0f3a3a40521e60f10dfbce9a15d3ea0d0708ef65c303cea73656fbc5acb</code></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>打开已停止容器的配置文件, 配置文件位置：<code>/var/lib/docker/containers/第一步获取到的镜像ID/config.v2.json</code> 旧版本的可能是旧版本的docker可能是config.json.</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>找到<code>MountPoints</code>区域,未做过路径映射的应该是空的: <code>&quot;MountPoints&quot;:&#123;&#125;</code>，然后用形如如下格式的内容替换你可以从其他做过路径映射的容器的配置文件中获取你可以从其他做过路径映射的容器的配置文件中获取:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;MountPoints&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;/mnt&quot;</span>: &#123;                               # 容器路径</span><br><span class="line">      <span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/home/&lt;user-name&gt;&quot;</span>,          # 宿主机路径</span><br><span class="line">      <span class="attr">&quot;Destination&quot;</span>: <span class="string">&quot;/mnt&quot;</span>,                  # 容器路径</span><br><span class="line">      <span class="attr">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Driver&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Spec&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/home/&lt;user-name&gt;&quot;</span>,        # 宿主机路径</span><br><span class="line">        <span class="attr">&quot;Target&quot;</span>: <span class="string">&quot;/mnt&quot;</span>                      # 容器路径</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;SkipMountpointCreation&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>重启整个 docker 服务: <code>service docker restart</code></p><h2 id="方法二-通过将现有容器提交为镜像实现"><a href="#方法二-通过将现有容器提交为镜像实现" class="headerlink" title="方法二 通过将现有容器提交为镜像实现"></a>方法二 通过将现有容器提交为镜像实现</h2><h3 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h3><p>停掉要操作的容器<code>docker stop 容器名字</code>。<br><code>docker ps -a</code>获取该容器的容器ID</p><h3 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h3><p>将当前容器提交为新的镜像<code>docker commit 容器ID 指定新的镜像名称（须与原来的不同）</code></p><h3 id="第三步-1"><a href="#第三步-1" class="headerlink" title="第三步"></a>第三步</h3><p>在第二步创建的镜像上重新运行容器（经过实验，原来的映射等参数均丢失，需要全部重新指定）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v <span class="string">&quot;<span class="variable">$PWD</span>/somedir&quot;</span>:/somedir 新容器名称 /bin/bash</span><br></pre></td></tr></table></figure><p>原文在此，仅作翻译：<a href="https://stackoverflow.com/a/53516263">https://stackoverflow.com/a/53516263</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何给已运行容器修改 \ 添加端口映射</title>
      <link href="/2021/8/%E5%A6%82%E4%BD%95%E7%BB%99%E5%B7%B2%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8%E4%BF%AE%E6%94%B9%20%20%E6%B7%BB%E5%8A%A0%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
      <url>/2021/8/%E5%A6%82%E4%BD%95%E7%BB%99%E5%B7%B2%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8%E4%BF%AE%E6%94%B9%20%20%E6%B7%BB%E5%8A%A0%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>如果要操作的容器在运行，停掉正在运行的容器</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>获取容器所使用的镜像<code>ID</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名称|grep Id</span><br></pre></td></tr></table></figure><p>镜像ID形如：<code>bde9b0f3a3a40521e60f10dfbce9a15d3ea0d0708ef65c303cea73656fbc5acb</code></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>打开已停止容器的配置文件, 配置文件位置：<code>/var/lib/docker/containers/第一步获取到的镜像ID/hostconfig.json</code>.</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>找到<code>PortBindings</code>区域并根据需要修改:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="string">&quot;PortBindings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;80/tcp&quot;</span>: [&#123;</span><br><span class="line">            <span class="attr">&quot;HostIp&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;HostPort&quot;</span>: <span class="string">&quot;8000&quot;</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;RestartPolicy&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;MaximumRetryCount&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>重启整个 docker 服务: <code>service docker restart</code></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无限网盘、云服务特殊优惠码等购买</title>
      <link href="/2021/8/%E6%97%A0%E9%99%90%E7%BD%91%E7%9B%98%E3%80%81%E4%BA%91%E6%9C%8D%E5%8A%A1%E7%89%B9%E6%AE%8A%E4%BC%98%E6%83%A0%E7%A0%81%E7%AD%89%E8%B4%AD%E4%B9%B0/"/>
      <url>/2021/8/%E6%97%A0%E9%99%90%E7%BD%91%E7%9B%98%E3%80%81%E4%BA%91%E6%9C%8D%E5%8A%A1%E7%89%B9%E6%AE%8A%E4%BC%98%E6%83%A0%E7%A0%81%E7%AD%89%E8%B4%AD%E4%B9%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://shop.obweb.cn/#/">https://shop.obweb.cn/#/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo引用本地图片</title>
      <link href="/2021/8/Hexo%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
      <url>/2021/8/Hexo%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="引用本地图"><a href="#引用本地图" class="headerlink" title="引用本地图"></a>引用本地图</h2><p>参考：<a href="https://steflerjiang.github.io/2016/12/20/Hexo%E6%A1%86%E6%9E%B6%E4%B8%8B%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/">原文链接</a></p><p>首先在<code>hexo</code>的配置文件<code>_config.yml</code>中增加一句：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span></span><br></pre></td></tr></table></figure><p>再在source文件夹中新建images文件夹，插入的图片要保存进此文件夹。<br>插入语法<code>html</code>(可控制图片大小):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/four heroes.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;dota插图&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:80%;&quot;</span> /&gt;</span></span><br><span class="line"># 或</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/four heroes.jpg&quot;</span> <span class="attr">width</span>=<span class="string">50%</span> <span class="attr">height</span>=<span class="string">50%</span> <span class="attr">align</span>=<span class="string">center/</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/four heroes.jpg" alt="dota插图" style="zoom:80%;" /><h3 id="label标签彩色文字样例，仅butterfly主题生效"><a href="#label标签彩色文字样例，仅butterfly主题生效" class="headerlink" title="label标签彩色文字样例，仅butterfly主题生效"></a>label标签彩色文字样例，仅butterfly主题生效</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;创业未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此诚&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈于内；&#123;% label 忠志之士 purple %&#125;，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">宫中、府中，俱为一体；陟罚臧否，不宜异同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/8/hello-world/"/>
      <url>/2021/8/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"> </span><br><span class="line">connR = sqlite3.connect(<span class="string">&#x27;:memory:&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">connR.enable_load_extension(<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#now we can load the extension</span></span><br><span class="line"><span class="comment"># depending on your OS and sqlite/spatialite version you might need to add </span></span><br><span class="line"><span class="comment"># &#x27;.so&#x27; (Linux) or &#x27;.dll&#x27; (Windows) to the extension name</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#mod_spatialite (recommended)</span></span><br><span class="line">connR.execute(<span class="string">&#x27;SELECT load_extension(&quot;mod_spatialite&quot;)&#x27;</span>)   </span><br><span class="line">connR.execute(<span class="string">&#x27;SELECT InitSpatialMetaData(1);&#x27;</span>)  </span><br><span class="line"> </span><br><span class="line"><span class="comment"># libspatialite</span></span><br><span class="line">connR.execute(<span class="string">&#x27;SELECT load_extension(&quot;libspatialite&quot;)&#x27;</span>)</span><br><span class="line">connR.execute(<span class="string">&#x27;SELECT InitSpatialMetaData();&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">curR = connR.cursor()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">curR.execute(<span class="string">&#x27;&#x27;&#x27;CREATE TABLE my_line(id INTEGER PRIMARY KEY)&#x27;&#x27;&#x27;</span>)</span><br><span class="line">curR.execute(<span class="string">&#x27;SELECT AddGeometryColumn(&quot;my_line&quot;,&quot;geom&quot; , 4326, &quot;LINESTRING&quot;, 2)&#x27;</span>)</span><br><span class="line">connR.commit()</span><br><span class="line"> </span><br><span class="line">polygon_wkt = <span class="string">&#x27;POLYGON ((11 50,11 51,12 51,12 50,11 50))&#x27;</span></span><br><span class="line"> </span><br><span class="line">XA = <span class="number">11</span></span><br><span class="line">YA = <span class="number">52</span></span><br><span class="line">XB = <span class="number">12</span></span><br><span class="line">YB = <span class="number">49</span></span><br><span class="line"> </span><br><span class="line">line_wkt = <span class="string">&#x27;LINESTRING(&#123;0&#125; &#123;1&#125;, &#123;2&#125; &#123;3&#125;)&#x27;</span>.<span class="built_in">format</span>(XA, YA, XB, YB)</span><br><span class="line"> </span><br><span class="line">curR.execute(<span class="string">&quot;&quot;&quot;INSERT INTO my_line VALUES (?,GeomFromText(?, 4326))&quot;&quot;&quot;</span>, (<span class="number">1</span>, line_wkt))</span><br><span class="line"> </span><br><span class="line">connR.commit()</span><br><span class="line"> </span><br><span class="line">cursor = connR.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    SELECT astext(st_intersection(geom, GeomFromText(?, 4326))) from my_line</span></span><br><span class="line"><span class="string">    WHERE st_intersects(geom, GeomFromText(?, 4326))&#x27;&#x27;&#x27;</span>, (polygon_wkt, polygon_wkt))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题折腾</title>
      <link href="/2021/8/%E8%AE%B0%E5%BD%95butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
      <url>/2021/8/%E8%AE%B0%E5%BD%95butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="自己打磨"><a href="#自己打磨" class="headerlink" title="自己打磨"></a>自己打磨</h2><h3 id="chrome浏览网页，检查并试图修改元素看变化，如果自己要的效果变了就是自己要找的元素，再以此为关键字用sublime-text去搜索主题目录及其子目录文件。"><a href="#chrome浏览网页，检查并试图修改元素看变化，如果自己要的效果变了就是自己要找的元素，再以此为关键字用sublime-text去搜索主题目录及其子目录文件。" class="headerlink" title="chrome浏览网页，检查并试图修改元素看变化，如果自己要的效果变了就是自己要找的元素，再以此为关键字用sublime text去搜索主题目录及其子目录文件。"></a>chrome浏览网页，检查并试图修改元素看变化，如果自己要的效果变了就是自己要找的元素，再以此为关键字用sublime text去搜索主题目录及其子目录文件。</h3><h3 id="修改首页卡片高度"><a href="#修改首页卡片高度" class="headerlink" title="修改首页卡片高度"></a>修改首页卡片高度</h3><p>修改文件<code>\themes\butterfly\source\css\_page\homepage.styl</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&amp; &gt; <span class="selector-class">.recent-post-item</span></span><br><span class="line">  <span class="attribute">display</span>: flex</span><br><span class="line">  flex-direction: row</span><br><span class="line">  align-items: center</span><br><span class="line">  height: <span class="number">20em</span> # 修改此处，可在chrome先边修改边预览，再改此处</span><br><span class="line">  border-radius: <span class="number">12px</span> <span class="number">8px</span> <span class="number">8px</span> <span class="number">12px</span></span><br><span class="line">  background: <span class="built_in">var</span>(--card-bg)</span><br><span class="line">  box-shadow: <span class="built_in">var</span>(--card-box-shadow)</span><br><span class="line">  transition: all .<span class="number">3s</span></span><br></pre></td></tr></table></figure><h3 id="修改首页卡片背景颜色"><a href="#修改首页卡片背景颜色" class="headerlink" title="修改首页卡片背景颜色"></a>修改首页卡片背景颜色</h3><p>修改文件<code>themes\butterfly\source\css\var.styl</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// Global <span class="attribute">color</span> &amp; SVG</span><br><span class="line">$light-blue = $theme-<span class="attribute">color</span></span><br><span class="line">$dark-black = <span class="selector-id">#000000</span></span><br><span class="line">$light-grey = <span class="selector-id">#EEEEEE</span></span><br><span class="line">$grey = <span class="selector-id">#858585</span></span><br><span class="line">$white = <span class="selector-id">#FFFFFF</span> # 修改此处，可在chrome先边修改边预览，再改此处</span><br><span class="line">$whitesmoke = <span class="selector-id">#f5f5f5</span></span><br><span class="line">$<span class="attribute">font</span>-black = <span class="selector-id">#4C4948</span></span><br><span class="line">$card-bg = $white</span><br><span class="line">$text-highlight-<span class="attribute">color</span> = $<span class="attribute">font</span>-<span class="attribute">color</span></span><br><span class="line">$text-hover = $theme-<span class="attribute">color</span></span><br><span class="line">$text-bg-hover = $theme-<span class="attribute">color</span></span><br></pre></td></tr></table></figure><p>更好的卡片背景色（文章文字等的颜色同样适用）修改方法，<br>将上面文件中的<code>$card-bg</code>改为如下式样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$card-bg = $themeColorEnable &amp;&amp; hexo-config(&#x27;theme_color<span class="selector-class">.card-bg_color</span>&#x27;) ? alpha(convert(hexo-config(&#x27;theme_color<span class="selector-class">.card-bg_color</span>&#x27;)), .<span class="number">1</span>) : $card-green</span><br></pre></td></tr></table></figure><p>然后再主题配置文件的<code>theme_color</code>块</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 美化/特效</span></span><br><span class="line"><span class="comment"># 自定義主題色</span></span><br><span class="line"><span class="comment"># 顏色值必須被雙引號包裹，就像&quot;#000&quot;而不是#000。否則將會在構建的時候報錯！</span></span><br><span class="line"><span class="attr">theme_color:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">main:</span> <span class="string">&quot;#49B1F5&quot;</span></span><br><span class="line">  <span class="attr">paginator:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">button_hover:</span> <span class="string">&quot;#FF7242&quot;</span></span><br><span class="line">  <span class="attr">text_selection:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">link_color:</span> <span class="string">&quot;#99a9bf&quot;</span></span><br><span class="line">  <span class="attr">meta_color:</span> <span class="string">&quot;#858585&quot;</span></span><br><span class="line">  <span class="attr">hr_color:</span> <span class="string">&quot;#A4D8FA&quot;</span></span><br><span class="line">  <span class="attr">code_foreground:</span> <span class="string">&quot;#F47466&quot;</span></span><br><span class="line">  <span class="attr">code_background:</span> <span class="string">&quot;rgba(27, 31, 35, .05)&quot;</span></span><br><span class="line">  <span class="attr">toc_color:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">blockquote_padding_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">blockquote_background_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">card-bg_color:</span> <span class="string">&quot;#3D3D11&quot;</span> <span class="comment">#卡片背景 备选，海蓝色#00ffe0d1</span></span><br></pre></td></tr></table></figure><h4 id="修改正文字体颜色"><a href="#修改正文字体颜色" class="headerlink" title="修改正文字体颜色"></a>修改正文字体颜色</h4><p><code>themes\butterfly\source\css\_global\index.styl</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span></span><br><span class="line">  --global-<span class="attribute">font-size</span>: $font-size</span><br><span class="line">  --global-bg: $body-bg</span><br><span class="line">  // --font-color: $font-black</span><br><span class="line">  --font-color: <span class="number">#ffffff</span></span><br></pre></td></tr></table></figure><h3 id="修改导航栏高度"><a href="#修改导航栏高度" class="headerlink" title="修改导航栏高度"></a>修改导航栏高度</h3><p>修改<code>themes\butterfly\source\css\_layout\head.styl</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#nav</span></span><br><span class="line">  <span class="attribute">position</span>: absolute</span><br><span class="line">  top: <span class="number">0</span></span><br><span class="line">  z-index: <span class="number">90</span></span><br><span class="line">  display: flex</span><br><span class="line">  flex-wrap: wrap</span><br><span class="line">  align-items: center</span><br><span class="line">  padding: <span class="number">0</span> <span class="number">36px</span></span><br><span class="line">  width: <span class="number">100%</span></span><br><span class="line">// 修改此处</span><br><span class="line">  height: <span class="number">60px</span> </span><br><span class="line">  font-size: <span class="number">1.3em</span></span><br><span class="line">  opacity: <span class="number">0</span></span><br><span class="line">  transition: all .<span class="number">5s</span></span><br></pre></td></tr></table></figure><p>好看主题：<a href="https://ethant.top/">https://ethant.top/</a><br>其图片地址：<a href="https://cdn.jsdelivr.net/gh/tzy13755126023/BLOG_SOURCE/theme_f/main.jpg">https://cdn.jsdelivr.net/gh/tzy13755126023/BLOG_SOURCE/theme_f/main.jpg</a></p><h2 id="CSS-修改"><a href="#CSS-修改" class="headerlink" title="CSS 修改"></a>CSS 修改</h2><p>来源：<a href="https://butterfly.lete114.top/article/Butterfly-config.html">https://butterfly.lete114.top/article/Butterfly-config.html</a></p><p>新建 <code>Hexo-Butterfly\themes\Butterfly-Master\source\css\Lete.css</code>(css 文件名自定义)</p><h3 id="手机端显示"><a href="#手机端显示" class="headerlink" title="手机端显示"></a>手机端显示</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*移动端优化：去除归档、标签、最新文章、公告、、只保留网站统计*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">800px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#aside_content</span> <span class="selector-tag">div</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>) &#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 滚动条 */</span></span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    width: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    background-color: <span class="number">#e58a8a</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>( <span class="number">45deg</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">25%</span>, transparent <span class="number">25%</span>, transparent <span class="number">50%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">50%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">75%</span>, transparent <span class="number">75%</span>, transparent);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">    color: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e58a8a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进阶修改"><a href="#进阶修改" class="headerlink" title="进阶修改"></a>进阶修改</h2><p>来源：<a href="https://ouoholly.github.io/post/my-custom-config-on-hexo-butterfly-theme/">https://ouoholly.github.io/post/my-custom-config-on-hexo-butterfly-theme/</a><br>主題顏色<br>如果想進階修改主題顏色的話，可到以下文件修改參數：</p><p><code>.\themes\Butterfly\source\css\var.styl</code></p><h3 id="主頁文章：不顯示圖片cover"><a href="#主頁文章：不顯示圖片cover" class="headerlink" title="主頁文章：不顯示圖片cover"></a>主頁文章：不顯示圖片cover</h3><ol><li> 在 <code>.\themes\Butterfly\_config.yml</code> 設定 <code>index_post_cover: none</code></li><li>在 <code>.\themes\Butterfly\source\css\_layout\page.styl</code> , <ul><li>2.1 -  把 <code>.recent-post-info</code> 設定 <code>width: 100%</code></li><li>2.2 -  在描述 <code>index_post_cover</code> 那裡添加下面三行：<figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> hexo-config(<span class="string">&#x27;index_post_cover&#x27;</span>) == <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  <span class="selector-class">.post_cover</span></span><br><span class="line">      <span class="attribute">display</span>: none</span><br></pre></td></tr></table></figure><h3 id="右下角按鈕：改為默認顯示，按才隱藏"><a href="#右下角按鈕：改為默認顯示，按才隱藏" class="headerlink" title="右下角按鈕：改為默認顯示，按才隱藏"></a>右下角按鈕：改為默認顯示，按才隱藏</h3>右下角的 <code>黑夜模式</code>、<code>繁簡轉換</code> 、<code>字體大小</code> 按鈕原本是默認隱藏的，要按那個轉轉的設置按鈕才會彈出來。<br>我想把這些功能按鈕改成默認顯示，按那個轉轉設置按鈕就收起來，再按再彈出來這樣和原本反過來的效果。<br>於是把 <code>.\themes\Butterfly\source\css\_layout\rightside.styl</code> 裡改成下面這樣：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#rightside</span></span><br><span class="line">  <span class="attribute">position</span>: fixed</span><br><span class="line">  right: -<span class="number">38px</span></span><br><span class="line">  bottom: <span class="number">40px</span></span><br><span class="line">  opacity: <span class="number">0</span></span><br><span class="line">  transition: all .<span class="number">5s</span></span><br><span class="line"></span><br><span class="line">  #rightside-config-hide</span><br><span class="line">    transform: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  .rightside-in</span><br><span class="line">    animation: rightsideIn .<span class="number">3s</span></span><br><span class="line"></span><br><span class="line">  .rightside-out</span><br><span class="line">    animation: rightsideOut .<span class="number">3s</span></span><br><span class="line">    transform: <span class="built_in">translate</span>(<span class="number">30px</span>, <span class="number">0</span>) <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line">  &amp; &gt; div</span><br><span class="line">    &amp; &gt; i,</span><br><span class="line">    &amp; &gt; a,</span><br><span class="line">    &amp; &gt; div</span><br><span class="line">      display: block</span><br><span class="line">      margin-bottom: <span class="number">2px</span></span><br><span class="line">      width: <span class="number">30px</span></span><br><span class="line">      height: <span class="number">30px</span></span><br><span class="line">      background-color: $light-blue</span><br><span class="line">      color: $white</span><br><span class="line">      text-align: center</span><br><span class="line">      text-decoration: none</span><br><span class="line">      font-size: <span class="number">16px</span></span><br><span class="line">      line-height: <span class="number">29px</span></span><br><span class="line">      cursor: pointer</span><br><span class="line"></span><br><span class="line">      &amp;:hover</span><br><span class="line">        background-color: $ruby</span><br><span class="line"></span><br><span class="line">  #rightside_config</span><br><span class="line">    i</span><br><span class="line">      animation: avatar_turn_around <span class="number">2s</span> linear infinite</span><br><span class="line"></span><br><span class="line">  #mobile-toc-button</span><br><span class="line">    display: none</span><br><span class="line"></span><br><span class="line">@media screen and (max-width: $bg)</span><br><span class="line">  #rightside</span><br><span class="line">    #mobile-toc-button</span><br><span class="line">      display: block</span><br><span class="line"></span><br><span class="line">@keyframes rightsideOut</span><br><span class="line">  <span class="number">0%</span></span><br><span class="line">    transform: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="number">100%</span></span><br><span class="line">    transform: <span class="built_in">translate</span>(<span class="number">30px</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">@keyframes rightsideIn</span><br><span class="line">  <span class="number">0%</span></span><br><span class="line">    transform: <span class="built_in">translate</span>(<span class="number">30px</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="number">100%</span></span><br><span class="line">    transform: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF默认转发的端口列表</title>
      <link href="/2021/7/CF%E9%BB%98%E8%AE%A4%E8%BD%AC%E5%8F%91%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8/"/>
      <url>/2021/7/CF%E9%BB%98%E8%AE%A4%E8%BD%AC%E5%8F%91%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<img src="CF默认转发的端口列表" alt="CF默认转发的端口列表" style="zoom:100%;" />...]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
